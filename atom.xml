<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山月半轮的博客</title>
  
  <subtitle>时光，不会辜负每个平静努力的人！</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-04-28T16:08:59.409Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YangDavid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>集合幂级数、FMT、FWT学习笔记</title>
    <link href="http://yoursite.com/2019/04/27/%E9%9B%86%E5%90%88%E5%B9%82%E7%BA%A7%E6%95%B0-FMT-FWT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/27/集合幂级数-FMT-FWT学习笔记/</id>
    <published>2019-04-27T06:37:00.000Z</published>
    <updated>2019-04-28T16:08:59.409Z</updated>
    
    <content type="html"><![CDATA[<p>受这几天看到的不少高维前缀和题目的影响，我决定系统地学习一下集合幂级数的一套理论了。内容主要来自2015年吕凯风（VFleaKing）国家集训队论文《集合幂级数的性质与应用及其快速算法》（pdf版本会放在附录里），包括<strong>集合并卷积、集合对称差卷积、子集卷积、快速莫比乌斯变换、快速莫比乌斯反演、快速沃尔什变换及逆变换</strong>等，以及附带进行的一些练习。</p><a id="more"></a><h2 id="引言及定义"><a href="#引言及定义" class="headerlink" title="引言及定义"></a>引言及定义</h2><p>类似数列的生成函数，对于集合，我们引入集合幂级数来解决一些有关集合的动态规划问题。</p><blockquote><p>定义：设  $F$ 是一个域，则称函数 $f:2^U\to F$ 是 F 上的一个形式幂级数，记 $f_S=f(S)$ 为集合幂级数第 $S$ 项的系数。</p></blockquote><p>我们记为：<br>$$<br>f=\sum_{S\subseteq 2^U} f_S x^S<br>$$<br>显然可以定义集合幂级数的加法：$(f+g)(S) = f(S)+g(S)$ ，减法也类似。这两种运算都是 $O(2^n)$ 的。</p><p>如何定义乘法？为了保证乘法对加法的分配律，若 $h=f\cdot g$ ，我们应该有：<br>$$<br>\sum_{S\in 2^U} h_S x^S = \big(\sum_{L\in2^U}f_Lx^L\big) \cdot (\sum_{R\in 2^U} g_R x^R) = \sum_{L\in 2^U} \sum_{R\in 2^U} (f_L x^L) \cdot (g_R x^R)<br>$$<br>因此我们只需要规定 $(f_L x^L) \cdot (g_R x^R)$ 的运算结果，我们希望它是以某种集合运算乘起来的。我们设一个 $2^U$ 中满足交换律、结合律、空集是单位元的二元运算 $\ast$ ，那么我们就可以定义 $(f_L x^L) \cdot (g_R x^R) = (f_L g_R) x^{L\ast R}$ 。至此集合幂级数形成了一个交换环，并且包含了整个 $F$ 作为子环。</p><p>常见定义 $\ast$ 为集合并运算、集合对称差运算以及子集卷积，我们一一解决。</p><h2 id="集合并卷积（FWT-or）"><a href="#集合并卷积（FWT-or）" class="headerlink" title="集合并卷积（FWT_or）"></a>集合并卷积（FWT_or）</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>即给出两个集合幂级数 $f,g$ ，求 $h = f\ast g$  满足：<br>$$<br>h_S = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cup R = S] f_L g_R \tag{1}<br>$$<br>怎么做呢？暴力做是 $O(4^n)$ 的，一种做法是分治乘法，可是总感觉在理论价值上面会逊色一些。有没有类似 FFT 的一种变换，使得变换后将卷积直接变成点乘呢？莫比乌斯变换做到了这一点。</p><p>我们定义集合幂级数 $f$ 的莫比乌斯变换 $\hat{f} $为：<br>$$<br>\hat{f_S} = \sum_{T\subseteq S} f_T<br>$$<br>反过来，如何求莫比乌斯逆变换呢（常常称为莫比乌斯反演）？<a href="http://vfleaking.blog.uoj.ac/slide/87#/23" target="_blank" rel="noopener">有关反演看这里：《炫酷反演魔术》</a>。很容易由容斥原理，我们又有：（这一步建议在纸上推导一下，要不然可能会觉得不直观）<br>$$<br>f_S = \sum_{T\subseteq S} (-1)^{|S|-|T|} \hat{f_T}<br>$$<br>现在，我们可以解决 (1) 中的问题了。对 (1) 式的左右两边同时做莫比乌斯变换<br>$$<br>\begin{aligned}<br>\hat{h_S} &amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cup R \subseteq S] f_L g_R\\<br>&amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\subseteq S][ R \subseteq S] f_L g_R\\<br>&amp; = (\sum_{L\subseteq S}f_L) (\sum_{R\subseteq S}g_R)\\<br>&amp; = \hat{f_S}\hat{g_S}<br>\end{aligned}<br>$$<br>因此，我们想要的性质是成立的。只需要把 $f,g$ 做莫比乌斯变换，点乘起来，然后再做莫比乌斯反演即可得到集合并卷积。</p><p>如何进行莫比乌斯变换呢？可以使用递推，设 $\hat f^{(i)}_S$ 表示只考虑 $S\oplus T\subseteq \{1,\cdots,i\}$ 的子集 $T$ 时的莫比乌斯变换第 $S$ 项，令 $\hat f_S^{(0)} = f_S$ ，那么对于每个不包含 $i$ 的 $S$ 有：<br>$$<br>\hat{f_S^{(i)}} = \hat{f_S}^{(i-1)}\\<br>\hat{f}_{S\cup\{i\}} ^{(i)} = \hat f_{S\cup\{i\}}^{(i-1)} + \hat f _S ^{(i-1)}<br>$$<br>由此递推计算即可。复杂度 $O(n2^n)$</p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>代码非常简短，<code>dmt</code> 变量为 1 时表示正变换，为 -1 时表示逆变换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_or(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(A[S|(<span class="number">1</span>&lt;&lt;i)] + dmt*A[S]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合交卷积（FWT-and）"><a href="#集合交卷积（FWT-and）" class="headerlink" title="集合交卷积（FWT_and）"></a>集合交卷积（FWT_and）</h2><p>由于 $S\cap T = C_U(\bar S \cup \bar T)$，因此将S、T翻转之后，可以直接用FWT_or导出。可是实际上还有更简洁的实现，我还没有搞清楚为什么。</p><p>复杂度 $O(n2^n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_and(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S] = mo(A[S] + dmt*A[S|(<span class="number">1</span>&lt;&lt;i)]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="集合对称差卷积（FWT-xor）"><a href="#集合对称差卷积（FWT-xor）" class="headerlink" title="集合对称差卷积（FWT_xor）"></a>集合对称差卷积（FWT_xor）</h2><h3 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h3><p>这一回把 $\ast$ 定义为集合对称差。即给出两个集合幂级数 $f,g$ 求 $h = f\ast g$  ：<br>$$<br>h_S = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\oplus R=S] f_L g_R \tag 2<br>$$<br>分治乘法在这里也是可行的，但是对应的变换方法是什么呢？这次我们使用快速沃尔什变换及其逆变换（本质上是高维 FFT）。</p><p>快速沃尔什变换：<br>$$<br>\hat{f_S} = \sum_{T\subseteq 2^U} f_T (-1) ^{|S\cap T|}<br>$$<br>其逆变换为：（我没有找到靠谱证明）<br>$$<br>f_S = \frac {1}{2^n}\sum_{T\subseteq 2^U} \hat{f_T}(-1)^{|S\cap T|}<br>$$<br>沃尔什变换是具体如何解决（2）式的问题的呢？我们基于下面的事实：<br>$$<br>\frac {1}{2^n}\sum_{T\subseteq 2^U} (-1)^{|S\cap T|} = [S=\oslash]<br>$$<br>化简过程如下：<br>$$<br>\begin{aligned}<br>h_S &amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\oplus R\oplus S = \oslash] f_L g_R\\<br>&amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} \frac{1}{2^n} \sum_{T\subseteq 2^n} (-1)^{|S\cap (L\oplus R \oplus S)|} f_l g_R\\<br>&amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} \frac{1}{2^n} \sum_{T\subseteq 2^n} (-1)^{|T\cap L|} (-1)^{|T\cap R|}(-1)^{|T\cap S|} f_l g_R\\<br>&amp; = \frac{1}{2^n} \sum_{T\subseteq 2^n} (-1)^{|T\cap S|} \Big(\sum_{L\subseteq 2^U} (-1)^{|T\cap L|} f_L\Big)<br>\Big(\sum_{R\subseteq 2^U} (-1)^{|T\cap R|} g_R\Big)\\<br>&amp; = \frac{1}{2^n} \sum_{L\subseteq 2^U} (-1)^{|L\cap S|} \hat{f_S} \hat{g_S}<br>\end{aligned}<br>$$<br>即： $\hat{h_S} = \hat{f_S} \cdot \hat{g_S}$</p><p>注：在理论上，这种变换还有一个小问题，就是特征为2的 $F$ 上上述算法会失效，因为上述算法涉及乘以 $\frac {1}{2^n}$ 。不过一般情况下不会成问题。</p><p>接下来考虑如何计算快速沃尔什变换。依然可以使用递推，设 $\hat f^{(i)}_S$ 表示只考虑 $S\oplus T\subseteq \{1,\cdots,i\}$ 的子集 $T$ 时的沃尔什变换第 $S$ 项，令 $\hat f_S^{(0)} = f_S$ ，那么对于每个不包含 $i$ 的 $S$ 有：<br>$$<br>\hat{f_S^{(i)}} = \hat{f_S}^{(i-1)}+\hat{f}_{S\cup\{i\}}^{(i-1)}\\<br>\hat{f}_{S\cup\{i\}} ^{(i)} = \hat f _S ^{(i-1)} - \hat f_{S\cup\{i\}}^{(i-1)}<br>$$<br>由此递推计算即可。复杂度 $O(n2^n)$</p><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fwt_xor(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = A[S], r = A[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            A[S] = mo(l + r);</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(dmt==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> inv2 = qpow(qpow(<span class="number">2</span>, MOD<span class="number">-2</span>), n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S)</span><br><span class="line">            A[S] = muln(A[S], inv2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="子集卷积"><a href="#子集卷积" class="headerlink" title="子集卷积"></a>子集卷积</h2><p>这一部分感觉论文讲得有点自闭，推荐 <a href="https://www.cnblogs.com/Dance-Of-Faith/p/8818211.html" target="_blank" rel="noopener">Dance Of Faith 的这篇博客</a> 。</p><h3 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h3><p>考虑这种形式的卷积如何处理：<br>$$<br>h_S = \sum_{T\subseteq S} f_T g_{S-T} \tag 3<br>$$<br>实际上，这种卷积等价于定义 $\ast$ 为不相交集合的并，即<br>$$<br>L \ast R =<br>\begin{cases}<br>  \varnothing, &amp; L \cap R \neq \varnothing \\<br>  L \cup R, &amp; \text{otherwise}<br>\end{cases}<br>$$<br>我们稍微改写一下 （3） 式：<br>$$<br>\begin{aligned}<br>h_S &amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cap R = \varnothing] [L\cup R = S] f_L g_R \\<br>&amp; =\sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [|L| + |R| = |S|][L\cup R = S] f_L g_R<br>\end{aligned}<br>$$<br>我们只需要处理掉 $|L|+|R| = |S|$ 这一项。实际上我们直接加一维表示集合的大小，暴力处理即可。</p><p>具体来讲，初始时，我们先只把 $f_{pc(S),S}$ （<code>pc(S)</code> 表示 <code>popcount</code> ，即 S 二进制表示中有多少位是 1 ）的值赋成原来的 $f_{S}$（$g$ 也使用同样的操作），然后对每一个 $f_i$ 做一遍FMT，点值相乘时这么卷积：$h_{i, S} = \sum\limits_{j = 0}^{i} f_{j,S} * g_{i - j, S}$ 。代码很简洁，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; subset_conv(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(Len);</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; siga(Base+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(Len,<span class="number">0</span>)), sigb = siga, sigh = siga;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        siga[pc[S]][S] = A[S], sigb[pc[S]][S] = B[S];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Base; ++i) &#123;</span><br><span class="line">        fmt_or(siga[i], <span class="number">1</span>);</span><br><span class="line">        fmt_or(sigb[i], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line">                sigh[i][S] = mo(sigh[i][S] + muln(siga[j][S], sigb[i-j][S]));</span><br><span class="line">        fmt_or(sigh[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        H[S] = sigh[pc[S]][S];</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>FWT_OR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if FMT : f[S|(1&lt;&lt;i)] += f[S]</span><br><span class="line">if IFMT: f[S|(1&lt;&lt;i)] -= f[S]</span><br></pre></td></tr></table></figure><p>FWT_AND</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if FMT : f[S] += f[S|(1&lt;&lt;i)]</span><br><span class="line">if IFMT: f[S] -= f[S|(1&lt;&lt;i)]</span><br></pre></td></tr></table></figure><p>FWT_XOR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = f[S], r = f[S|(1&lt;&lt;i)]</span><br><span class="line">f[S] = l + r</span><br><span class="line">f[S|(1&lt;&lt;i)] = l - r</span><br><span class="line">if IFMT: </span><br><span class="line">    f[S] /= qpow(2, n)</span><br></pre></td></tr></table></figure><p>子集卷积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n + <span class="number">1</span>):</span><br><span class="line">    F[i] = FWT_OR(f[i])</span><br><span class="line">    G[i] = FWT_OR(g[i])</span><br><span class="line">    <span class="keyword">for</span> S <span class="keyword">in</span> range(<span class="number">0</span>, Len):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i + <span class="number">1</span>):</span><br><span class="line">            H[i][S] += F[j][S] * G[i-j][S]</span><br><span class="line">    H[i] = IFWT_OR(H[i])</span><br><span class="line"><span class="keyword">for</span> S <span class="keyword">in</span> range(<span class="number">0</span>, Len):</span><br><span class="line">    h[S] = H[bc[S]][S]</span><br></pre></td></tr></table></figure><p>完整板子代码如下，由于没有采用类似 FFT 蝴蝶操作的优化，效率不是很高，在LOJ的子集卷积模板题上跑了 <code>4500/5000 ms</code>。<a href="https://www.luogu.org/problemnew/solution/P4717" target="_blank" rel="noopener">Luogu 4717</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Template starts here</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000009</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Len, Base; <span class="comment">// Ensure these values are calculated!!!!</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_or(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(A[S|(<span class="number">1</span>&lt;&lt;i)] + dmt*A[S]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_and(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S] = mo(A[S] + dmt*A[S|(<span class="number">1</span>&lt;&lt;i)]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fwt_xor(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dwt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = A[S], r = A[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            A[S] = mo(l + r);</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(dwt==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> inv2 = qpow(Len, MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            A[S] = muln(A[S], inv2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; conv(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(*fn)(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>)) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; aa = fn(A, <span class="number">1</span>), bb = fn(B, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Len; ++i)</span><br><span class="line">        aa[i] = muln(aa[i], bb[i]);</span><br><span class="line">    aa = fn(aa, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> aa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pc;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_popcount</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">    pc.resize(sz, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz; ++i)</span><br><span class="line">        pc[i] = pc[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; subset_conv(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B) &#123;</span><br><span class="line">    get_popcount(Len);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(Len);</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; siga(Base+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(Len,<span class="number">0</span>)), sigb = siga, sigh = siga;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        siga[pc[S]][S] = A[S], sigb[pc[S]][S] = B[S];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Base; ++i) &#123;</span><br><span class="line">        siga[i] = fmt_or(siga[i], <span class="number">1</span>);</span><br><span class="line">        sigb[i] = fmt_or(sigb[i], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line">                sigh[i][S] = mo(sigh[i][S] + muln(siga[j][S], sigb[i-j][S]));</span><br><span class="line">        sigh[i] = fmt_or(sigh[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        H[S] = sigh[pc[S]][S];</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Template ends here</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = Len = <span class="number">1</span> &lt;&lt; n, Base = n;</span><br><span class="line">    a.resize(m), b.resize(m);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">    </span><br><span class="line">    show(conv(a, b, fmt_and));</span><br><span class="line">    show(conv(a, b, fmt_or));</span><br><span class="line">    show(conv(a, b, fwt_xor));</span><br><span class="line">    show(subset_conv(a, b));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="HAOI2015-按位或"><a href="#HAOI2015-按位或" class="headerlink" title="[HAOI2015] 按位或"></a>[HAOI2015] 按位或</h3><h4 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h4><p>刚开始你有一个数字0，每一秒钟你会随机选择一个 $[0,2^n-1]$ 的数字，与你手上的数字进行按位或操作。选择数字 $i$ 的概率是 $p_i$。保证 $0\leq p_i \leq1$，$\sum p_i = 1$。问期望多少秒后，你手上的数字变成 $2^n-1$。无穷输出 <code>INF</code></p><p>数据范围：$n\leq 20$</p><p>Source: <a href="https://lydsy.com/JudgeOnline/problem.php?id=4036" target="_blank" rel="noopener">BZOJ4036</a> vfk论文第一道例题。</p><h4 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h4><p>留坑。</p><h3 id="Day8-I-岸边露伴的人生经验"><a href="#Day8-I-岸边露伴的人生经验" class="headerlink" title="Day8 I. 岸边露伴的人生经验"></a>Day8 I. 岸边露伴的人生经验</h3><h4 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h4><p>岸边露伴是一个天才漫画家，他经常用自己的替身天堂之门来查看别人的人生经历，为自己的漫画积累素材。最近他学会了将一个人的人生经历编码成一个 $10$ 维的向量，每一维取值为 $\{0,1,2\}$ 中的一个元素。定义向量$\overrightarrow{V}=(x_1,x_2,\cdots,x_{10})$ 的模长 $|\overrightarrow{V}|$ 为 $\sqrt{x_1^2+x_2^2+\cdots+x_{10}^2}$。令第 $i$ 个人的人生经历对应的向量为$\overrightarrow{V_i}$，则第i<em>i</em>个人和第 $j$ 个人的人生轨迹的差别可以用 $|\overrightarrow{V_i}-\overrightarrow{V_j}|$ 衡量。岸边露伴收集了 $n$ 个人的向量，他想要知道这些人里，人生轨迹差别相同的二元组有多少对，即有多少个四元组 $(i,j,k,l)(1 \le i,j,k,l \le n)$ 满足 $|\overrightarrow{V_i}-\overrightarrow{V_j}|=|\overrightarrow{V_k}-\overrightarrow{V_l}|$ </p><p>数据范围：$n\leq 10^5$</p><p>Source: <a href="https://www.cometoj.com/contest/28/problem/I?problem_id=412" target="_blank" rel="noopener">CCPC-Wannafly Winter Camp Day8 (Div1, onsite) Day 8 Problem I</a></p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h4><p>考虑每个向量取值只有 $\{0,1\}$ 的情况，每个人的向量为一个二进制数，装进桶里，直接进行自己卷积自己的异或 FWT ，这时集合幂级数的每一项都代表这个集合被异或出来的 可能方式。再扫一遍每一个状态，按照 <code>bitcount</code> 统计距离，加入另一个数组，平方一下即可。</p><p>考虑这道题，多了一个 $2$ ，我们只需要把每一个向量中一个数位拆成两个字符即可，将 <code>1</code> 变为 <code>01</code> ，2 变为 <code>10</code> ， <code>0</code> 变为 <code>00</code> ，然后把上一种做法求 <code>bitcount</code> 统计距离的方式稍微改一下就可以了。</p><h4 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Generated by powerful Codeforces Tool</span></span><br><span class="line"><span class="comment"> * Author: YangDavid</span></span><br><span class="line"><span class="comment"> * Time: 2019-04-28 19:15:38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>, maxs = <span class="number">1</span> &lt;&lt; <span class="number">20</span>, BB = <span class="number">20</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, dif[<span class="number">10200</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(maxs, <span class="number">0</span>), val(maxs, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line"><span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> dwt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BB; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> mask = (maxs<span class="number">-1</span>) ^ (<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> S = mask; S &gt;= <span class="number">0</span>; S = (S<span class="number">-1</span>)&amp;mask) &#123;</span><br><span class="line">l = a[S], r = a[S | (<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">a[S] = mo(l + r);</span><br><span class="line">a[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line"><span class="keyword">if</span>(S == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dwt == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> fac = qpow(qpow(<span class="number">2</span>, MOD - <span class="number">2</span>), BB);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxs; ++i)</span><br><span class="line">a[i] = muln(a[i], fac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> msk = <span class="number">0</span>, x;</span><br><span class="line">    rep(j, <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    msk &lt;&lt;= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>) msk += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">2</span>) msk += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">a[msk]++;</span><br><span class="line">    &#125;</span><br><span class="line">    fwt(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxs; ++i)</span><br><span class="line">    a[i] = muln(a[i], a[i]);</span><br><span class="line">    fwt(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    val[<span class="number">0</span>] = <span class="number">0</span>, val[<span class="number">1</span>] = <span class="number">1</span>, val[<span class="number">2</span>] = <span class="number">4</span>, val[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">4</span>; S &lt; maxs; S += <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> t = val[S &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    val[S] = t;</span><br><span class="line">    val[S+<span class="number">1</span>] = t + <span class="number">1</span>;</span><br><span class="line">    val[S+<span class="number">2</span>] = t + <span class="number">4</span>;</span><br><span class="line">    val[S+<span class="number">3</span>] = t + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; maxs; ++S) &#123;</span><br><span class="line">    dif[val[S]] += a[S];</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">    res = mo(res + <span class="number">1L</span>L * dif[i] * dif[i] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;受这几天看到的不少高维前缀和题目的影响，我决定系统地学习一下集合幂级数的一套理论了。内容主要来自2015年吕凯风（VFleaKing）国家集训队论文《集合幂级数的性质与应用及其快速算法》（pdf版本会放在附录里），包括&lt;strong&gt;集合并卷积、集合对称差卷积、子集卷积、快速莫比乌斯变换、快速莫比乌斯反演、快速沃尔什变换及逆变换&lt;/strong&gt;等，以及附带进行的一些练习。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="快速沃尔什变换（FWT）" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80%E5%8F%98%E6%8D%A2%EF%BC%88FWT%EF%BC%89/"/>
    
      <category term="集合幂级数" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88%E5%B9%82%E7%BA%A7%E6%95%B0/"/>
    
      <category term="子集卷积" scheme="http://yoursite.com/tags/%E5%AD%90%E9%9B%86%E5%8D%B7%E7%A7%AF/"/>
    
      <category term="高维前缀和（FMT）" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%88FMT%EF%BC%89/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 1505 训练报告</title>
    <link href="http://yoursite.com/2019/04/24/Opentrains-1505-%E8%AE%AD%E7%BB%83%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/04/24/Opentrains-1505-训练报告/</id>
    <published>2019-04-24T11:27:30.000Z</published>
    <updated>2019-04-27T16:48:35.222Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Petrozavodsk-Summer-2017-Moscow-IPT-Contest"><a href="#Petrozavodsk-Summer-2017-Moscow-IPT-Contest" class="headerlink" title="Petrozavodsk Summer-2017. Moscow IPT Contest."></a>Petrozavodsk Summer-2017. Moscow IPT Contest.</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center"></td><td style="text-align:center">4:40</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">4:11</td><td style="text-align:center"></td><td style="text-align:center">(0)</td><td style="text-align:center">2:13</td><td style="text-align:center">1:25</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"></td><td style="text-align:center">$\mathcal O$</td><td style="text-align:center"></td><td style="text-align:center">AC</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center">$\mathcal {O}$</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="red">*</font></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">15</td><td style="text-align:center">45</td><td style="text-align:center">2</td><td style="text-align:center">14</td><td style="text-align:center">6</td><td style="text-align:center">10</td><td style="text-align:center">63</td><td style="text-align:center">32</td><td style="text-align:center">52</td><td style="text-align:center">86</td><td style="text-align:center">71</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">dp</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">KMP</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">讨论</td><td style="text-align:center">构造</td><td style="text-align:center">思维</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">LIS</td><td style="text-align:center">组合</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">988</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">1300</font></td><td style="text-align:center"><font color="blue">1836</font></td><td style="text-align:center"><font color="blue">3408</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">cyy</td><td style="text-align:center">cyy</td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">Mid+</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center">cyy</td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">★★</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">★</td><td style="text-align:center">★★</td><td style="text-align:center">★</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">★</td><td style="text-align:center">★</td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><p>XHT Red Sun 队第一次（也许算正式？）训练（不过 wzk 去参加 JSOI 了，只有我和 cyy 打）。</p><ul><li>Solved during contest:  <code>4/11</code></li><li>Upsolved after contest: <code>6/11</code></li><li>Orially solved: <code>8/11</code></li><li>Rank: <code>55/94</code></li></ul><a id="more"></a><p>难度顺序：<br>$$<br>J\to K \to G \to B \to H \to D,F,I<br>$$<br>几点感受：</p><ul><li>开局还是需要稳健，签到题确认结论时应当想清楚结论的细节以及证明</li><li>感觉我赛时写 G 题的代码有点太慌张了，浪费了不少时间。</li><li>H 题不难，本应场上写出来的。</li><li>F 题直接大力分类讨论就好了。。。没有几种情况，但是榜上过的人比较少。感觉赛时没做有点失策。</li></ul><h1 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h1><h2 id="Prob-B-FMT，高维前缀和，SOS-dp"><a href="#Prob-B-FMT，高维前缀和，SOS-dp" class="headerlink" title="Prob B. FMT，高维前缀和，SOS dp"></a>Prob B. FMT，高维前缀和，SOS dp</h2><blockquote><p><em>Solved By hdmmblz at 04:40 (1 try)</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>对于一个长度为 $n$ 的非负整数序列 $b_1,b_2,…,b_n$，定义这个序列的能量为：<br>$$<br>LP(b) = \max_{i=0,1,\cdots,n} (b_1 \oplus b_2 \oplus \cdots \oplus b_i) + (b_{i+1}\oplus\cdots\oplus b_n)<br>$$<br>其中 $\oplus$ 表示按位异或 (XOR)，给定一个长度为 $n$ 的非负整数序列 $\{a\} = a_1,a_2,…,a_n$， 请计算 a 的每个前缀的能量值。</p><p>数据范围： $n\leq 10^6, a_i\leq 10^6$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>首先，分析 LP 的性质，假设 $s_j = \oplus_{i=1}^j a_j$ ，很容易看到 $a$ 的前 $c$  个元素组成的前缀 $pref_c$ 的 LP 值为：<br>$$<br>LP(pref_c) = \max_{i=0,1,\cdots,c} s_i + (s_c \oplus s_i)<br>$$<br>由于$x\oplus y = x - y + 2\text{ } (\text{~}x  \&amp;   y)$ ，可以推断得到：<br>$$<br>LP(pref_c) = s_c + 2\cdot \max_{i=0,1,\cdots,c}s_c \&amp;\text{~} s_i<br>$$<br>因此我们将这道题转化到下面的等价形式：</p><blockquote><p>你有一个空集合 $A$，你需要进行以下两个操作：</p><ol><li>Query $x$ ，表示求 $\max\limits_{a\in A} a\&amp; x$ 。</li><li>Insert $x$，表示将 $x$ 插入集合 $A$ 中.</li></ol></blockquote><p>可是这个问题怎么解决呢？开始我的想法是将 $A$ 集合建 01-trie 树，从大到小考虑所有数位，碰到 $x$ 中 1 的数位就尽量往 trie 的 1 方向走。可是碰到 $x$ 中 0 的数位就会失效， trie 树的两个子树都要考虑，这样做可能会遍历整个 trie 树，复杂度必然会失效。</p><p>实际上，我们可以感觉到这个问题和前缀和有一定的相似之处。碰到 1 的情况就是尽量选，只有一条路；碰到 0 的情况无限制，有两条路。这里我们又注意到值域是 $\leq 10^6$ 的，因此我们可以将问题离线，之后使用黑科技——高维前缀和（不过这里是前缀 $\min$）。我们定义 $dp[mask]$ 表示 $s$ 中最小的下标 $x$，使得 $s_x$ 含有 $mask$ 的二进制表示中每一个数位 1 ，即 $s_i \&amp; mask = mask$。</p><p>我们可以先初始化 $dp[i]=\infty$ ，然后令 $dp[s_i]=i$ 作为初值条件，然后跑高维前缀 $\min$（FMT，Sum over Subset等等一系列等价说法）即可得到上面想要的 $dp[mask]$ 的性质。考虑如何回答询问，回答第 $i$ 个询问时，我们初始化 $mask=0$ ，然后依次从大到小考虑每一位进行贪心。如果这一位 $s_c$ 为 1，则尽量使mask这一位也变成 1，检查 $dp[mask]$ 是否超过 $i$。如果 $s_c$ 这一位是 0那就不考虑。这样就解决了问题。</p><p>时间复杂度 $\mathcal O (2^m \cdot m)$，$m$ 是值域的二进制最大位数，这里取 20。</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>感觉这是一道牛逼题啊，2017 年 8 月的 Petrozavodsk 冬令营题，2017 年 11 月就成了 BZOJ 月赛题了。题号5092: [Lydsy1711月赛]分割序列。cyy 现场 29 分钟 AC，太强了</p><p>有关高维前缀和，我找到了以下资源：</p><p><a href="https://codeforces.com/blog/entry/45223" target="_blank" rel="noopener">Codeforces 上的 SOS dp 教程</a></p><p>SPOJ Time limit exceeded</p><p>CF 449D</p><p>BZOJ4036</p><p>【UPD：看了这些内容，感觉再不开始学 FWT 相关知识就有点说不过去了啊，明天仔细学一学 FWT 吧】</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">4004000</span>, bit = <span class="number">20</span>, full = <span class="number">1048575</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n, sum, dp[maxn];</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  Question equiv to 2 ops:</span></span><br><span class="line"><span class="comment">  1. Given a set A and number b, find b+2max(a&amp;~b))</span></span><br><span class="line"><span class="comment">  2. Insert number x in the set A.</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span>&amp; x, <span class="keyword">int</span> y)</span> </span>&#123; x = min(x, y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    read(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i) &#123;</span><br><span class="line">        read(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(i) a[i] ^= a[i - <span class="number">1</span>];</span><br><span class="line">        upd(dp[a[i]], i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>; d &lt; bit; ++d) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = full; S &gt;= <span class="number">0</span>; --S) <span class="keyword">if</span>(S &gt;&gt; d &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            upd(dp[S ^ (<span class="number">1</span>&lt;&lt;d)], dp[S]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> b = a[i], c = ~b &amp; full, cur = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = bit<span class="number">-1</span>; j &gt;= <span class="number">0</span>; --j) <span class="keyword">if</span>(c&gt;&gt;j&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[cur | (<span class="number">1</span> &lt;&lt; j)] &lt; i)</span><br><span class="line">                cur |= (<span class="number">1</span> &lt;&lt; j);</span><br><span class="line">        &#125;</span><br><span class="line">        write(b + <span class="number">2</span> * cur);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">" \n"</span>[i==n<span class="number">-1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-F-分类讨论"><a href="#Prob-F-分类讨论" class="headerlink" title="Prob F. 分类讨论"></a>Prob F. 分类讨论</h2><blockquote><p><em>Upsolved by YangDavid (1 try)</em></p></blockquote><p>直接分 6 种情况讨论即可。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n, m, k, n1, n0, m1, m0;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n * m % <span class="number">2</span> == <span class="number">0</span>) <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n * m);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) swap(n, m);</span><br><span class="line">    n1 = n / k, n0 = n % k;</span><br><span class="line">    m1 = m / k, m0 = m % k;</span><br><span class="line">    <span class="keyword">if</span>(n1 == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m1 == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (n-k+<span class="number">1</span>) * (m-k+<span class="number">1</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(m1 == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (n0+<span class="number">1</span>) * max(<span class="number">0L</span>L, <span class="number">3L</span>L*k-m<span class="number">-1</span>));</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(m1 == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, n0 + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n1 == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m1 == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(n0 == k - <span class="number">1</span> || m0 == k - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"0"</span>);</span><br><span class="line">                <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">/* We must do like this: (Destroy all of 4 blocks)</span></span><br><span class="line"><span class="comment">                XX-</span></span><br><span class="line"><span class="comment">                XX-</span></span><br><span class="line"><span class="comment">                ---</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (k*<span class="number">3</span>-m<span class="number">-1</span>)*(k*<span class="number">3</span>-n<span class="number">-1</span>));</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(m1 == <span class="number">3</span>) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">              .X.      X..    ..X   ...   ...</span></span><br><span class="line"><span class="comment">              .X.      ...    ...   X..   ..X</span></span><br><span class="line"><span class="comment">              ---      ---    ---   X--   --X</span></span><br><span class="line"><span class="comment">            Case 1           Case 2</span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            <span class="keyword">if</span>(n0 == k - <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">            ll ans = k * <span class="number">3</span> - n - <span class="number">1</span>; <span class="comment">// Case 1</span></span><br><span class="line">            ans += <span class="number">4</span> * (n - <span class="number">2</span> * k + <span class="number">1</span>); <span class="comment">// Case 2</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="comment">// Why???</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-G-构造好题"><a href="#Prob-G-构造好题" class="headerlink" title="Prob G. 构造好题"></a>Prob G. 构造好题</h2><blockquote><p><em>Solved by YangDavid at 04:11 (2 tries)</em></p></blockquote><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>你需要构造这么一个 $n$ 位二进制串 $s$，（$n$ 是偶数）使得它的任何一个前缀 $pref_i$ 代表的二进制数 $\pmod n$ 两两互不同余。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>首先，显然可以把这道题转化为一个图论问题：</p><blockquote><p>给出一张 $n$ 个节点的有向图，节点编号依次为 $0,1,\cdots,n-1$ 。其中 $i$ 号节点会与 $2i\bmod n, 2i+1\bmod n$ 这两个节点连边，请找出这个图中的一条哈密尔顿回路。</p></blockquote><p>我们将两个相邻的小节点定义为一个大节点。具体说是 $\{0,1\},\{2,3\},\cdots,\{n-2,n-1\}$ 各组成一个大节点。我们规定若小节点 $i,j$ 之间有边，那么它们对应的大节点之间也会连边。于是我们发现第 $i$ 个大节点会向 $2i,2i+1$ 这两个大节点连边，每个大节点恰好连出去两条边，且连进来两条边，是一个欧拉图。找到欧拉回路之后，每个大节点出现两次，我们只需要确定两次大节点分别代表哪一个小节点就可以将欧拉回路改成要求的哈密尔顿回路。实际上根据大节点连边的特性，我们倒序考虑即可完成这件事情。细节见代码。</p><h3 id="Comment-1"><a href="#Comment-1" class="headerlink" title="Comment"></a>Comment</h3><p>碰到了喜欢的构造题，感觉海星。这道题又是一道构造哈密尔顿回路。前面提到的构造哈密尔顿回路用到的主要方法有随机化搜索、硬核构造、 Dirac 定理等等（如Google Code Jam Round 1A <a href="https://yang2002.github.io/2019/04/13/Google-Code-Jam-Round-1A-%E6%B8%B8%E8%AE%B0%EF%BC%88%E9%99%84%E9%A2%98%E8%A7%A3%EF%BC%89/" target="_blank" rel="noopener">Problem A</a>, <a href="https://yang2002.github.io/2019/03/17/Atcoder-Grand-Contest-031-%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/#Prob-C-%E6%9E%84%E9%80%A0%EF%BC%8C%E6%A0%BC%E9%9B%B7%E7%A0%81%EF%BC%8C%E5%A5%BD%E9%A2%98" target="_blank" rel="noopener">AGC031 C题</a> )，不过这道题的方法则非常有趣，又给了我一种新的思路，即利用欧拉回路找到哈密尔顿回路的。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2020</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> G[maxn][maxn], vis[maxn][maxn], hf;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; lf[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">euler</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; hf; ++v) <span class="keyword">if</span>(G[u][v] &amp;&amp; !vis[u][v]) &#123;</span><br><span class="line">vis[u][v] = <span class="literal">true</span>;</span><br><span class="line">euler(v);</span><br><span class="line">&#125;</span><br><span class="line">ans.push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lk</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">x %= n, y %= n;</span><br><span class="line">x &gt;&gt;= <span class="number">1</span>, y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">G[x][y] = <span class="literal">true</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i += <span class="number">2</span>) &#123;</span><br><span class="line">lk(i, i * <span class="number">2</span>);</span><br><span class="line">lk(i + <span class="number">1</span>, i * <span class="number">2</span> + <span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">2</span>) &#123; <span class="built_in">puts</span>(<span class="string">"10"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">hf = n / <span class="number">2</span>;</span><br><span class="line">build();</span><br><span class="line">euler(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; n; ++i) &#123;</span><br><span class="line">        lf[i].insert(i * <span class="number">2</span> + <span class="number">1</span>);</span><br><span class="line">        lf[i].insert(i * <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    reverse(ans.begin(), ans.end());</span><br><span class="line">    ans.pop_back();</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> it = ans.rbegin(); it != ans.rend(); ++it) &#123;</span><br><span class="line">        <span class="keyword">auto</span> g = *it;</span><br><span class="line">        <span class="keyword">if</span>(lf[g].count(cur / <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = cur / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(v * <span class="number">2</span> == cur) res += <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(v * <span class="number">2</span> + <span class="number">1</span> == cur) res += <span class="string">'1'</span>;</span><br><span class="line">            cur = v;</span><br><span class="line">            lf[g].erase(v);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(lf[g].count((cur + n) / <span class="number">2</span>)) &#123;</span><br><span class="line">            <span class="keyword">auto</span> v = cur / <span class="number">2</span> + n / <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(v * <span class="number">2</span> % n == cur) res += <span class="string">'0'</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>((v*<span class="number">2</span>+<span class="number">1</span>) % n == cur) res += <span class="string">'1'</span>;</span><br><span class="line">            cur = v;</span><br><span class="line">            lf[g].erase(v);</span><br><span class="line">        &#125; <span class="keyword">else</span> assert(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(res.begin(), res.end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-H-扫描线-模拟"><a href="#Prob-H-扫描线-模拟" class="headerlink" title="Prob H. 扫描线+模拟"></a>Prob H. 扫描线+模拟</h2><blockquote><p><em>Upsolved by YangDavid on 2019.4.28 (1 try)</em></p></blockquote><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给你一个 $n\times  m$ 的表格，由 <code>+</code> 和 <code>-</code> 组成。一步操作可以选取一个位置，把它所在的行和列翻转，该元素本身仅被翻转一次。现在进行如下的操作：每轮把所有 <code>+</code> 的位置记录下来，然后对每个记录下来的位置进行一步操作，直到所有元素都为 <code>-</code>。问要进行多少<strong>步</strong>操作。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>首先，线段树+扫描线统计出来初始条件下每一行、每一列+号的奇偶性，之后就可以发现行与列奇偶性相同的方格一定会变为 <code>-</code> ，不同的一定会变为 <code>+</code> 。交换行列的顺序是不影响答案的，因此经过一次变换之后，经过一番操作，矩形将被分成四个小矩形，我们只需要记录有几个横行 <code>+</code> 的个数是奇数，几个纵列 <code>+</code> 的个数是奇数，最多只有 16 种状态，直接模拟即可。如果出现重复状态，那么就说明不可以。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">402000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, q, row[maxn], col[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> l, r, t;</span><br><span class="line">    event(<span class="keyword">int</span> L, <span class="keyword">int</span> R, <span class="keyword">int</span> T): l(L), r(R), t(T) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> event&amp; ev) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> t &lt; ev.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;event&gt; erow, ecol;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tag, sumv;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lson (o &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rson (o &lt;&lt; 1 | 1)</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tag[o]) &#123;</span><br><span class="line">            <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            tag[lson] ^= <span class="number">1</span>;</span><br><span class="line">            sumv[lson] = mid - l + <span class="number">1</span> - sumv[lson];</span><br><span class="line">            tag[rson] ^= <span class="number">1</span>;</span><br><span class="line">            sumv[rson] = r - mid - sumv[rson];</span><br><span class="line">            tag[o] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123; sumv[o] = sumv[lson] + sumv[rson]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">(<span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> o=<span class="number">1</span>, <span class="keyword">int</span> l=<span class="number">1</span>, <span class="keyword">int</span> r=<span class="number">100005</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            tag[o] ^= <span class="number">1</span>;</span><br><span class="line">            sumv[o] = r - l + <span class="number">1</span> - sumv[o];</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pushdown(o, l, r);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(ql &lt;= mid) flip(ql, qr, lson, l, mid);</span><br><span class="line">        <span class="keyword">if</span>(qr &gt; mid) flip(ql, qr, rson, mid + <span class="number">1</span>, r);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> sumv[<span class="number">1</span>]; &#125;</span><br><span class="line">    segtree() &#123; </span><br><span class="line">        tag = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(maxn, <span class="number">0</span>);</span><br><span class="line">        sumv = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(maxn, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; tr;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xf, yf, xs, ys;</span><br><span class="line">ll tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">scan</span><span class="params">(<span class="built_in">vector</span>&lt;event&gt; e, <span class="keyword">int</span>* par, <span class="keyword">int</span> lim)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    sort(e.begin(), e.end());</span><br><span class="line">    tr = segtree();</span><br><span class="line">    <span class="keyword">int</span> sz = e.size(), curt = <span class="number">1</span>, cursum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ) &#123;</span><br><span class="line">        ret += <span class="number">1L</span>L * cursum * (e[i].t - curt);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t = curt; t &lt; e[i].t; ++t)</span><br><span class="line">            par[t] = cursum &amp; <span class="number">1</span>;</span><br><span class="line">        curt = e[i].t;</span><br><span class="line">        <span class="keyword">while</span>(curt == e[i].t) &#123;</span><br><span class="line">            tr.flip(e[i].l, e[i].r);</span><br><span class="line">            <span class="keyword">if</span>(++i &gt;= sz) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cursum = tr.query();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(curt &lt;= lim) ret += <span class="number">1L</span>L * (lim - curt + <span class="number">1</span>) * cursum;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, m, q);</span><br><span class="line">    rep(i, q) &#123;</span><br><span class="line">        read(xf, yf, xs, ys);</span><br><span class="line">        erow.emplace_back(yf, ys, xf);</span><br><span class="line">        erow.emplace_back(yf, ys, xs + <span class="number">1</span>);</span><br><span class="line">        ecol.emplace_back(xf, xs, yf);</span><br><span class="line">        ecol.emplace_back(xf, xs, ys + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    tot = scan(erow, row, n);</span><br><span class="line">    assert(tot == scan(ecol, col, m));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> r1 = <span class="number">0</span>, c1 = <span class="number">0</span>, r0, c0;</span><br><span class="line">    rep(i, n) r1 += row[i];</span><br><span class="line">    rep(i, m) c1 += col[i];</span><br><span class="line"></span><br><span class="line">    <span class="built_in">set</span>&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; st;</span><br><span class="line">    <span class="keyword">while</span>(r1 + c1 != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(st.count(&#123;r1, c1&#125;)) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        st.emplace(r1, c1);</span><br><span class="line">        r0 = n - r1, c0 = m - c1;</span><br><span class="line">        tot += <span class="number">1L</span>L * r1 * c0 + <span class="number">1L</span>L * r0 * c1;</span><br><span class="line">        <span class="keyword">int</span> nr1 = r1 * (c0&amp;<span class="number">1</span>) + r0 * (c1&amp;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> nc1 = c1 * (r0&amp;<span class="number">1</span>) + c0 * (r1&amp;<span class="number">1</span>);</span><br><span class="line">        r1 = nr1, c1 = nc1;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tot);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-J-LIS"><a href="#Prob-J-LIS" class="headerlink" title="Prob J. LIS"></a>Prob J. LIS</h2><blockquote><p><em>Solved by hdmmblz on 02:13 (2 tries)</em></p></blockquote><p>简单题，直接将原来两个串的 LIS 的长度加起来就好了。证明：</p><ul><li>首先，长度为两个LIS长度加起来的LIS是可以构造出来的。考虑合并两个串时用归并排序的策略归并两个 LIS</li><li>其次，如果有更长的，那么在其中一个序列中将会出现比 LIS 更长的上升子序列，矛盾。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,m,cnt=<span class="number">0</span>,i,a[<span class="number">500005</span>],b[<span class="number">500005</span>],dp[<span class="number">500005</span>],hd1,hd2,pos,ans=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> ll inf=<span class="number">1e18</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;m);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;b[i]);</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)dp[i]=inf;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line">pos=lower_bound(dp,dp+n+<span class="number">1</span>,a[i])-dp;</span><br><span class="line">dp[pos]=a[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=n;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(dp[i]&lt;inf)<span class="keyword">break</span>;</span><br><span class="line">ans=i;</span><br><span class="line">dp[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)dp[i]=inf;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)</span><br><span class="line">&#123;</span><br><span class="line">pos=lower_bound(dp,dp+m+<span class="number">1</span>,b[i])-dp;</span><br><span class="line">dp[pos]=b[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=m;i&gt;=<span class="number">0</span>;i--)<span class="keyword">if</span>(dp[i]&lt;inf)<span class="keyword">break</span>;</span><br><span class="line">ans+=i;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-K-数学"><a href="#Prob-K-数学" class="headerlink" title="Prob K. 数学"></a>Prob K. 数学</h2><blockquote><p><em>Solved by hdmmblz on 01:25 (2 tries)</em></p></blockquote><p>推一推式子就好了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,m,k,i,fac[<span class="number">1000005</span>],invfac[<span class="number">1000005</span>],ans;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>; </span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">ll ans=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(b&amp;<span class="number">1L</span>L)ans=ans*a%mod;</span><br><span class="line">a=a*a%mod;</span><br><span class="line">b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">C</span><span class="params">(ll x,ll y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(y==<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(x==<span class="number">-1</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> fac[x]*invfac[y]%mod*invfac[x-y]%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>,&amp;n,&amp;k,&amp;m);</span><br><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)fac[i]=fac[i<span class="number">-1</span>]*i%mod;</span><br><span class="line">invfac[n]=<span class="built_in">pow</span>(fac[n],mod<span class="number">-2L</span>L);</span><br><span class="line"><span class="keyword">for</span>(i=n<span class="number">-1</span>;i&gt;=<span class="number">0</span>;i--)invfac[i]=invfac[i+<span class="number">1</span>]*(i+<span class="number">1</span>)%mod;</span><br><span class="line"><span class="keyword">for</span>(i=m;i&lt;n-(k-m);i++)ans=(ans+<span class="number">2L</span>L*C(i<span class="number">-2L</span>L,m<span class="number">-2L</span>L)*(n-k+m-i))%mod;</span><br><span class="line">ans=(ans-(n-k)+mod)%mod;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Petrozavodsk-Summer-2017-Moscow-IPT-Contest&quot;&gt;&lt;a href=&quot;#Petrozavodsk-Summer-2017-Moscow-IPT-Contest&quot; class=&quot;headerlink&quot; title=&quot;Petrozavodsk Summer-2017. Moscow IPT Contest.&quot;&gt;&lt;/a&gt;Petrozavodsk Summer-2017. Moscow IPT Contest.&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;K&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4:40&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4:11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;(0)&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2:13&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$\mathcal O$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$\mathcal {O}$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;*&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;63&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;32&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;52&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;86&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;71&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;dp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;KMP&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;讨论&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;构造&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;思维&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;LIS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;组合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;988&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;1300&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;1836&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;3408&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cyy&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cyy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;cyy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;p&gt;XHT Red Sun 队第一次（也许算正式？）训练（不过 wzk 去参加 JSOI 了，只有我和 cyy 打）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest:  &lt;code&gt;4/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Upsolved after contest: &lt;code&gt;6/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orially solved: &lt;code&gt;8/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;55/94&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="哈密尔顿路径" scheme="http://yoursite.com/tags/%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E8%B7%AF%E5%BE%84/"/>
    
      <category term="Opentrains" scheme="http://yoursite.com/tags/Opentrains/"/>
    
      <category term="高维前缀和（FMT）" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%88FMT%EF%BC%89/"/>
    
      <category term="LIS" scheme="http://yoursite.com/tags/LIS/"/>
    
  </entry>
  
  <entry>
    <title>最小圆（球）覆盖学习笔记</title>
    <link href="http://yoursite.com/2019/04/21/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/21/最小圆覆盖学习笔记/</id>
    <published>2019-04-21T15:15:14.000Z</published>
    <updated>2019-04-22T07:52:42.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="最小圆覆盖问题"><a href="#最小圆覆盖问题" class="headerlink" title="最小圆覆盖问题"></a>最小圆覆盖问题</h1><p>给出 $N$ 个点，让你画一个最小的包含所有点的圆。输出圆心、半径。</p><p>数据范围 $N\leq 10^5$</p><a id="more"></a><p>模板题：</p><p><a href="https://www.luogu.org/problemnew/show/P1742" target="_blank" rel="noopener">Luogu 1742</a></p><p><a href="https://lydsy.com/JudgeOnline/problem.php?id=1337" target="_blank" rel="noopener">BZOJ 1337</a></p><h1 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h1><p>一般有两种做法：随机增量法与模拟退火法。随机增量法是一种确定性算法，随机意义下均摊复杂度 $O(n)$ ，而且可以达到很高的精度（可达到 $10^{-10}$ 量级）；而模拟退火法是启发式算法，需要结合调整参数从而得到一定精度，精度一般只可以可达到 $10^{-5}$ 量级。</p><h2 id="随机增量法"><a href="#随机增量法" class="headerlink" title="随机增量法"></a>随机增量法</h2><p>为了保证随机情况下的均摊性质，我们首先将给出的点随机打乱。</p><p>然后基于下面的事实进行操作：</p><blockquote><p>如果点 $p$ 不在集合 $S$ 的最小覆盖圆内，则 $p$ 一定在 $S\cup\{p\}$ 的最小覆盖圆上。</p></blockquote><p>根据这个定理，我们可以分三次确定前 $i$ 个点的最小覆盖圆。</p><ul><li>1.令前 $i-1$ 个点的最小覆盖圆为 $C$</li><li>2.如果第 $i$ 个点在 $C$ 内，则前 $i$ 个点的最小覆盖圆也是 $C$</li><li>3.如果不在，那么第 $i$ 个点一定在前 $i$个点的最小覆盖圆上，接着确定前 $i-1$ 个点中还有哪两个在最小覆盖圆上。因此，设当前圆心为 $P_i$，半径为 $0$，做固定了第 $i$ 个点的前 $i$ 个点的最小圆覆盖。</li><li>4.固定了一个点：不停地在范围内找到第一个不在当前最小圆上的点 $P_j$，设当前圆心为 $(P_i+P_j)/2$，半径为 $\frac{1}{2}|P_iP_j|$，做固定了两个点的，前 $j$ 个点外加第 $i$ 个点的最小圆覆盖。</li><li>5.固定了两个点：不停地在范围内找到第一个不在当前最小圆上的点 $P_k$，设当前圆为 $P_i,P_j,P_k $ 的外接圆。</li></ul><p>核心代码非常简洁：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function">Circle <span class="title">MinCircle</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; pt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    shuffle(pt.begin(), pt.end(), rng);</span><br><span class="line">    <span class="function">Circle <span class="title">cc</span><span class="params">(pt[<span class="number">0</span>], <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) <span class="keyword">if</span>(cc.out(pt[i])) &#123;</span><br><span class="line">        cc = Circle(pt[i], <span class="number">0.0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) <span class="keyword">if</span>(cc.out(pt[j])) &#123;</span><br><span class="line">            cc = Circle((pt[i] + pt[j]) / <span class="number">2.0</span>, length(pt[i]-pt[j]) / <span class="number">2.0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span>(cc.out(pt[k])) &#123;</span><br><span class="line">                    cc = Circle(pt[i], pt[j], pt[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种做法乍一看是 $O(n^3)$ 的，可是实际上均摊意义下他就是 $O(n)$ 的。证法我现在还不会，留坑。</p><p><strong>Code：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">102000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>): x(xp), y(yp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;<span class="keyword">return</span> sgn(x - rhs.x) == <span class="number">0</span> &amp;&amp; sgn(y - rhs.y) == <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123; <span class="keyword">return</span> Point(x*<span class="built_in">cos</span>(rad)-y*<span class="built_in">sin</span>(rad), x*<span class="built_in">sin</span>(rad)+y*<span class="built_in">cos</span>(rad)); &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn90</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Point(-y, x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector x, Vector y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">acos</span>(dot(A, B) / length(A) / length(B)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">LLIntPV</span><span class="params">(Point P, Vector v, Point Q, Vector w)</span> </span>&#123;</span><br><span class="line">    Vector u = P - Q;</span><br><span class="line">    assert(cross(v, w) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> t = cross(w, u) / cross(v, w);</span><br><span class="line">    <span class="keyword">return</span> P + v * t;</span><br><span class="line">&#125; <span class="comment">// Line: Point + Vector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Circle</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    Circle(Point O, <span class="keyword">double</span> R): o(O), r(R) &#123; &#125;</span><br><span class="line">    Circle(Point A, Point B, Point C) &#123;</span><br><span class="line">        assert(sgn(cross(B-A, C-A)) != <span class="number">0</span>);</span><br><span class="line">        Point mab = (A + B) / <span class="number">2.0</span>, ab = (B - A).turn90();</span><br><span class="line">        Point mbc = (B + C) / <span class="number">2.0</span>, bc = (C - B).turn90();</span><br><span class="line">        o = LLIntPV(mab, ab, mbc, bc);</span><br><span class="line">        r = length(A - o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Point <span class="title">at</span><span class="params">(<span class="keyword">double</span> theta)</span> </span>&#123; <span class="keyword">return</span> o + Point(<span class="built_in">cos</span>(theta)*r, <span class="built_in">sin</span>(theta)*r); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">out</span><span class="params">(Point pt)</span> </span>&#123; <span class="keyword">return</span> sgn(length(o-pt) - r) == <span class="number">1</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function">Circle <span class="title">MinCircle</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; pt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    shuffle(pt.begin(), pt.end(), rng);</span><br><span class="line">    <span class="function">Circle <span class="title">cc</span><span class="params">(pt[<span class="number">0</span>], <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) <span class="keyword">if</span>(cc.out(pt[i])) &#123;</span><br><span class="line">        cc = Circle(pt[i], <span class="number">0.0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) <span class="keyword">if</span>(cc.out(pt[j])) &#123;</span><br><span class="line">            cc = Circle((pt[i] + pt[j]) / <span class="number">2.0</span>, length(pt[i]-pt[j]) / <span class="number">2.0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span>(cc.out(pt[k])) &#123;</span><br><span class="line">                    cc = Circle(pt[i], pt[j], pt[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i].scan();</span><br><span class="line">    Circle ans = MinCircle(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n%.10f %.10f\n"</span>, ans.r, ans.o.x, ans.o.y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="模拟退火法"><a href="#模拟退火法" class="headerlink" title="模拟退火法"></a>模拟退火法</h2><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>模拟退火算法 ( Simulated annealing ) 是一种寻找函数全局最优解的一种算法，它的出发点是物理中固体物质的退火过程与一般组合优化问题之间的相似性。</p><p>寻找全局最优解是一个很麻烦的事情。有人可能说，在一个位置看到哪个方向函数上升，就走向哪个方向不就行了吗？这种方法称为爬山法，爬山法是完完全全的贪心法，每次都鼠目寸光的选择一个当前最优解，因此可能会局限于局部的最优值。如何跳出局部最优呢？</p><p>模拟退火其实也是一种贪心算法，但是它的搜索过程引入了随机因素。模拟退火算法<strong>以一定的概率</strong>来接受一个比当前解要差的解，因此<strong>有可能</strong>会跳出这个局部的最优解，达到全局的最优解。</p><p>模拟退火算法描述：</p><ul><li><p>若 $J( Y(i+1) ) \geq J( Y(i) )$  (即移动后得到更优解)，则总是接受该移动</p></li><li><p>若 $J( Y(i+1) )&lt; J( Y(i) )$  (即移动后的解比当前解要差)，则<strong>以一定的概率</strong>接受移动，而且这个概率随着时间推移逐渐降低（逐渐降低才能趋向稳定），随着能量差的增大而降低。具体来说：</p></li></ul><p>在温度为 $T$ 时，出现能量差为 $\Delta E$ 的降温的概率为 $P(\Delta E)$，表示为：<br>$$<br>P(\Delta E) = e^{\frac {\Delta E} {kT}}<br>$$<br>这里的“一定的概率”的计算参考了金属冶炼的退火过程，这也是模拟退火算法名称的由来。</p><p>关于爬山算法与模拟退火，有一个有趣的比喻：</p><ul><li><p>爬山算法：兔子朝着比现在高的地方跳去。它找到了不远处的最高山峰。但是这座山不一定是珠穆朗玛峰。这就是爬山算法，它不能保证局部最优值就是全局最优值。</p></li><li><p>模拟退火：兔子喝醉了。它随机地跳了很长时间。这期间，它可能走向高处，也可能踏入平地。但是，它渐渐清醒了并朝最高方向跳去。这就是模拟退火。</p></li></ul><p><img src="Hill_Climbing_with_Simulated_Annealing.gif" alt="模拟退火算法图解"></p><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>注意这么几件事情：</p><ul><li>模拟退火一般需要进行调参，平衡运行时间、迭代次数、精度等因素</li><li>实现模拟退火时更是要注意各种精度损失。最小圆覆盖问题中，如果不考虑精度问题，求距离时多次调用 <code>sqrt</code> 函数将会损失非常多的精度</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>): x(xp), y(yp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;<span class="keyword">return</span> sgn(x - rhs.x) == <span class="number">0</span> &amp;&amp; sgn(y - rhs.y) == <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123; <span class="keyword">return</span> Point(x*<span class="built_in">cos</span>(rad)-y*<span class="built_in">sin</span>(rad), x*<span class="built_in">sin</span>(rad)+y*<span class="built_in">cos</span>(rad)); &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn90</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Point(-y, x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector x, Vector y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist2</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="keyword">return</span> dot(A - B, A - B); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">acos</span>(dot(A, B) / length(A) / length(B)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Circle</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    Circle(Point O, <span class="keyword">double</span> R): o(O), r(R) &#123; &#125;</span><br><span class="line">    <span class="function">Point <span class="title">at</span><span class="params">(<span class="keyword">double</span> theta)</span> </span>&#123; <span class="keyword">return</span> o + Point(<span class="built_in">cos</span>(theta)*r, <span class="built_in">sin</span>(theta)*r); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">out</span><span class="params">(Point pt)</span> </span>&#123; <span class="keyword">return</span> sgn(length(o-pt) - r) == <span class="number">1</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Eval</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; pt, Point o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) res = max(res, dist2(g, o));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">uniform_real_distribution&lt;<span class="keyword">double</span>&gt; rgen(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Rand</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> rgen(rng); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Circle <span class="title">MinCircleAnneal</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; pt, <span class="keyword">double</span> T, <span class="keyword">double</span> dec, <span class="keyword">double</span> ed)</span> </span>&#123;</span><br><span class="line">    Point pcur(0.0, 0.0), pbest, pnew;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) pcur = pcur + g;</span><br><span class="line">    pbest = pcur = pcur / sz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> vcur = Eval(pt, pcur), vnew, vbest = vcur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T &gt; ed) &#123;</span><br><span class="line">        pnew = pcur + Point((Rand()*<span class="number">2.0</span><span class="number">-1</span>) * T, (Rand()*<span class="number">2.0</span><span class="number">-1.0</span>) * T);</span><br><span class="line">        vnew = Eval(pt, pnew);</span><br><span class="line">        <span class="keyword">if</span>(vnew &lt;= vbest) vbest = vcur = vnew, pbest = pcur = pnew;</span><br><span class="line">        <span class="keyword">if</span>(vnew &lt;= vcur || Rand() &lt; <span class="built_in">exp</span>(-(vnew-vcur)/T))</span><br><span class="line">            vcur = vnew, pcur = pnew;</span><br><span class="line">        T *= dec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Circle(pbest, <span class="built_in">sqrt</span>(vbest));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i].scan();</span><br><span class="line">    Circle ans = MinCircleAnneal(p, <span class="number">100000.0</span>, <span class="number">0.997</span>, <span class="number">3e-11</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n%.10f %.10f\n"</span>, ans.r, ans.o.x, ans.o.y);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h1><h2 id="Opentrains-1519-G"><a href="#Opentrains-1519-G" class="headerlink" title="Opentrains 1519 G"></a>Opentrains 1519 G</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你了 $n$ 个定义在区间 $[0,T]$ 上的一次函数 $f_i(x) = a_ix+b_i$ ，定义两个一次函数的距离为：<br>$$<br>dist(f,g) = \left(\max_{0\leq i\leq T} (f(i)-g(i))\right)^2 + \left(\min_{0\leq i\leq T}(f(i)-g(i))\right)^2<br>$$<br>你现在要找一个一次函数 $g(x) = cx+d$ 使得下面的值最小：<br>$$<br>\max_{1\leq i\leq n} dist(f_i, g)<br>$$<br>你只需要输出最小值就可以了。</p><p>数据范围 $1\leq n \leq 200000$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>乍一看，貌似要想一想。那个最大值与最小值一定在定义域的两个端点或者两个函数相交的地方取到。。。等等，不对啊，看清楚之后，我们会发现，那个平方是加在外面的，因此要我们求最值的函数就是 $f(x)-g(x)$ ，两个一次函数之差还是一次函数！那么最值一个在 $x=0$ 处取得，一个在 $x=T$ 处取得。</p><p>我们用 $f(0)$ 与 $f(T)$ 两个值来表征一个一次函数，可以发现，如果把 $\big(f(0),f(T)\big)$ 作为点画在二维平面上， $dist(f,g)$ 即为这两个点的欧几里得距离。把题中 $n$ 个点都画出来，我们要找一个点使得这个点到其他点的距离的最大值最小，这不就是最小圆覆盖吗！</p><h1 id="最小球覆盖"><a href="#最小球覆盖" class="headerlink" title="最小球覆盖"></a>最小球覆盖</h1><p>那么考虑三维的情况，会是什么样子的呢？2018 ACM-ICPC 南京区域赛的 D 题正是最小球覆盖的裸题。</p><p>大致有两种方法，模拟退火法和三分套三分套三分。（我很奇怪为什么没有随机增量类似的方法了，不过很可能是三维情况下四点定球不是非常好写）。</p><p>模拟退火代码：（2018南京D）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y, z;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>, <span class="keyword">double</span> zp=<span class="number">0</span>): x(xp), y(yp), z(zp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y, z+rhs.z); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y, z-rhs.z); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k, z*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k, z/k); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y) || (x==rhs.x&amp;&amp;y==rhs.y&amp;&amp;z&lt;rhs.z); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;<span class="keyword">return</span> sgn(x - rhs.x) == <span class="number">0</span> &amp;&amp; sgn(y - rhs.y) == <span class="number">0</span> &amp;&amp; sgn(z-rhs.z)==<span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;x, &amp;y, &amp;z); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector x, Vector y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y + x.z*y.z; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist2</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="keyword">return</span> dot(A - B, A - B); &#125;</span><br><span class="line"><span class="comment">// Circle</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    Circle(Point O, <span class="keyword">double</span> R): o(O), r(R) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Eval</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; pt, Point o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) res = max(res, dist2(g, o));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">uniform_real_distribution&lt;<span class="keyword">double</span>&gt; rgen(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Rand</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> rgen(rng); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Circle <span class="title">MinCircleAnneal</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; pt, <span class="keyword">double</span> T, <span class="keyword">double</span> dec, <span class="keyword">double</span> ed)</span> </span>&#123;</span><br><span class="line">    Point pcur, pbest, pnew;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) pcur = pcur + g;</span><br><span class="line">    pbest = pcur = pcur / sz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> vcur = Eval(pt, pcur), vnew, vbest = vcur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T &gt; ed) &#123;</span><br><span class="line">        pnew = pcur + Point((Rand()*<span class="number">2.0</span><span class="number">-1</span>) * T, (Rand()*<span class="number">2.0</span><span class="number">-1.0</span>) * T, (Rand()*<span class="number">2.0</span><span class="number">-1</span>) * T);</span><br><span class="line">        vnew = Eval(pt, pnew);</span><br><span class="line">        <span class="keyword">if</span>(vnew &lt;= vbest) vbest = vcur = vnew, pbest = pcur = pnew;</span><br><span class="line">        <span class="keyword">if</span>(vnew &lt;= vcur || Rand() &lt; <span class="built_in">exp</span>(-(vnew-vcur)/T))</span><br><span class="line">            vcur = vnew, pcur = pnew;</span><br><span class="line">        T *= dec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Circle(pbest, <span class="built_in">sqrt</span>(vbest));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i].scan();</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1e13</span>;</span><br><span class="line">    rep(i, <span class="number">40</span>) &#123;</span><br><span class="line">        Circle cir = MinCircleAnneal(p, <span class="number">100000.0</span>, <span class="number">0.999</span>, <span class="number">3e-7</span>);</span><br><span class="line">        ans = min(ans, cir.r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;最小圆覆盖问题&quot;&gt;&lt;a href=&quot;#最小圆覆盖问题&quot; class=&quot;headerlink&quot; title=&quot;最小圆覆盖问题&quot;&gt;&lt;/a&gt;最小圆覆盖问题&lt;/h1&gt;&lt;p&gt;给出 $N$ 个点，让你画一个最小的包含所有点的圆。输出圆心、半径。&lt;/p&gt;
&lt;p&gt;数据范围 $N\leq 10^5$&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="最小圆覆盖" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/"/>
    
      <category term="模拟退火" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%8B%9F%E9%80%80%E7%81%AB/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 1519 训练报告</title>
    <link href="http://yoursite.com/2019/04/20/Opentrains-1519-%E8%AE%AD%E7%BB%83%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/04/20/Opentrains-1519-训练报告/</id>
    <published>2019-04-20T11:32:14.000Z</published>
    <updated>2019-04-24T16:26:44.270Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Petrozavodsk-Winter-2018-Carnegie-Mellon-U-Contest"><a href="#Petrozavodsk-Winter-2018-Carnegie-Mellon-U-Contest" class="headerlink" title="Petrozavodsk Winter-2018. Carnegie Mellon U Contest."></a>Petrozavodsk Winter-2018. Carnegie Mellon U Contest.</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center"></td><td style="text-align:center">0:44</td><td style="text-align:center"></td><td style="text-align:center">4:05</td><td style="text-align:center"></td><td style="text-align:center"><font color="red">(0)</font></td><td style="text-align:center"></td><td style="text-align:center"><font color="red">(1)</font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center">AC</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">$\mathcal{O}$</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"></td><td style="text-align:center">$\mathcal{O}$</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="red"><b>*10</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+5</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="red"><b>*3</b></font></td><td style="text-align:center"><font color="red"><b>*2</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">44</td><td style="text-align:center">126</td><td style="text-align:center">74</td><td style="text-align:center">71</td><td style="text-align:center">14</td><td style="text-align:center">109</td><td style="text-align:center">27</td><td style="text-align:center">85</td><td style="text-align:center">39</td><td style="text-align:center">67</td><td style="text-align:center">8</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">线段树</td><td style="text-align:center">签到</td><td style="text-align:center">矩阵</td><td style="text-align:center">结论</td><td style="text-align:center">点分治</td><td style="text-align:center">DS</td><td style="text-align:center">最小圆覆盖</td><td style="text-align:center">状压</td><td style="text-align:center">背包</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="red"><b>4857</b></font></td><td style="text-align:center"><font color="green">1283</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">916</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">3039</font></td><td style="text-align:center"><font color="green">923</font></td><td style="text-align:center"><font color="blue">2287</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center">★★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><p>Dodo_kindergarten 队第一次三人正式训练，不过其实不应当挑选这一场，这一场真是打自闭了 QAQ ，过了签到题就没怎么想出题目了。cyy 和 wzk 一共做出来四道题。这一场说明了我还有许多算法没有做到熟练运用，看来需要努力补充一些短板的。</p><ul><li>Solved during contest:  <code>2/11</code></li><li>Upsolved <code>6/11</code></li><li>Orally upsolved <code>8/11</code></li><li>Rank <code>114/137</code></li><li>深刻认识到我数据结构的短板</li></ul><a id="more"></a><p>一些资源：</p><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=001519" target="_blank" rel="noopener">比赛链接</a></p><p><a href="https://www.cnblogs.com/clrs97/p/8525989.html" target="_blank" rel="noopener">Claris题解</a></p><p><a href="http://clatisus.com/Petrozavodsk%20Winter-2018.%20Carnegie%20Mellon%20U%20Contest" target="_blank" rel="noopener">BUAA题解</a></p><p><a href="https://www.cnblogs.com/zbh2047/p/9597643.html" target="_blank" rel="noopener">zbh对于I题的思考</a></p><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><p>开局我看的是 H 题，whr 看 B，sl 看 J 题。发现 H 题数据范围不大，商量着要不写一个爆搜试一试，结果我写完之后本地测 $n=24$ 的数据，跑了五分钟都没有跑出来，弃疗了。</p><p>我和 whr 看了下 B，发现是可做题，我于是开始写，于 00:44 通过，可是榜上已经过了一大片了。</p><p>我发现 F 就是裸的二维数点问题，可是没有整理模板，就自闭了。wzk 几分钟就写完了。这个锅我背，除了线段树之外，我基本上都在做思维题之类的，都不知道多长时间没有写硬核的数据结构题了，这次比赛让我深刻认识到我的数据结构已经弱到了什么地步。</p><p>之后陷入无限期的自闭状态。sl 说了 D 题的结论，可是我不太相信。  whr 尝试写 H 题的模拟退火，可惜 WA 了。期间 cyy 他们过了 C 题，可是我没来得及仔细看。我又想写 H 题的另一种搜索，可是也没成功。这一阶段的状态特别不好，感觉什么题都做不出来。</p><p>sl 再次要求我听他讲 D 题的结论。我听完之后大致口胡出了一种证明，感觉挺对的。于是开始写，可是有点难写。纠结了好一会实现方式，终于我会了一种比较简单的写法。开工！03：34的时候我们交了第一发，结果 WA on test 160 ，心态炸了。自闭了好一会，发现有个细节的写法略有问题，稍微修改了一下，终于在04：05的时候获得了OK。</p><p>看了一会儿新题，感觉也没有别的心思来想题了，于是就跑路了。最后就只有两题滚粗了 QAQ。</p><h2 id="Prob-B-签到，set"><a href="#Prob-B-签到，set" class="headerlink" title="Prob B. 签到，set"></a>Prob B. 签到，set</h2><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>一条直线上放了 $n$ 个球，每个球的坐标已知，最右边位置 $W$ 处是一堵坚实的墙壁。要求支持下面两种操作：</p><ul><li>在 $p$ 位置放入新球，如果这个位置有球则忽略。</li><li>将最左边的球向右打。一个球如果碰到 $x$ 位置的另一个球，则它会在 $x-1$ 的位置停下，然后使 $x$ 位置的求开始向右运动，从而引发连锁反应。一个球撞击到墙则立即停止在 $W-1$ 处。</li></ul><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>不妨设最左边球的位置是 $l$ ，稍加模拟即可知道操作本质是将区间 $[l,W]$ 向左循环移位了一个单位。模拟这个过程，只需要考虑将最左边的球加到墙的右边即可。如果要支持放入新球，只需要用一个 <code>set</code> 维护就可以了。</p><p>复杂度 $O((n+q)\log n)$</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, w, op, xp, tl;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, q, w);</span><br><span class="line">    rep(i, n) read(xp), st.insert(xp);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        read(op);</span><br><span class="line">        <span class="keyword">if</span>(op == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> pos, d;</span><br><span class="line">            read(pos);</span><br><span class="line">            d = pos + tl;</span><br><span class="line">            <span class="keyword">if</span>(st.count(d) == <span class="number">0</span>)</span><br><span class="line">                st.insert(d);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">auto</span> ed = *st.begin();</span><br><span class="line">            st.erase(ed);</span><br><span class="line">            st.insert(w + tl);</span><br><span class="line">            tl++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : st) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, g - tl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-D-结论，数学，模拟"><a href="#Prob-D-结论，数学，模拟" class="headerlink" title="Prob D. 结论，数学，模拟"></a>Prob D. 结论，数学，模拟</h2><h3 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h3><p>你有一个超八边形图，每个顶点度数都是 3 ，每条边都同时属于两个八边形环，如下图所示。</p><p>这个图中，每条边都有标号，是 $\{a,b,c\}$ 中的一种。标号满足下面的性质：</p><ul><li>每个节点连出去的三条边的标号互不相同</li><li>每个八边形环上的标号序列恰好是交错的，即是与 $abababab$ 类似的</li></ul><p>现在给出了一个标号序列，问在八边形图中能否找到一个对应的路径，使这个序列对应的边连成一个回路。</p><p><img src="Graph.png" alt="超八边形图"></p><h3 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h3><p><b>结论</b></p><p>我们断言，对于序列中我们尽量消除下面两种子串，那么有回路就等价于最后序列被删空了。</p><ul><li>直接删除两个相同标号的重复出现的子串，如 $aa$</li><li>将五元交错子串掐头去尾，如将 $ababa$ 变为 $bab$ </li></ul><p><b>证明：</b></p><p>最开始，根据对称性，起点的选择显然是无关紧要的。</p><p>首先直观理解一下，第一种子串相当于走一个来回，第二种子串相当于将走得远的路径变成走得近的。事实上第二个操作也可以转化六元环与七元环，直接删除八元环。</p><p>然后考虑反证法，如果这两种情况都没出现，这个序列还是一个回路，那么这就说明这个回路走过的每一个环长度都不超过 $4$ ，但是这么走是不可能走回起点的。</p><p><b>实现</b></p><p>上述的做法实现起来还是略有难度，关键点是不重不漏，还要保证复杂度不爆炸。细节见代码吧，这份代码还算是写得非常简洁的。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">902000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m &gt; <span class="number">0</span> &amp;&amp; t[m<span class="number">-1</span>] == s[i]) m--;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            t[m++] = s[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(m &gt;= <span class="number">5</span> &amp;&amp; t[m<span class="number">-1</span>]==t[m<span class="number">-3</span>] &amp;&amp; t[m<span class="number">-3</span>]==t[m<span class="number">-5</span>] &amp;&amp; t[m<span class="number">-2</span>]==t[m<span class="number">-4</span>] &amp;&amp; t[m<span class="number">-1</span>] != t[m<span class="number">-2</span>]) &#123;</span><br><span class="line">            <span class="keyword">char</span> t2 = t[m<span class="number">-2</span>], t3 = t[m<span class="number">-3</span>], t4 = t[m<span class="number">-4</span>];</span><br><span class="line">            m -= <span class="number">5</span>;</span><br><span class="line">            i -= <span class="number">2</span>;</span><br><span class="line">            s[i] = t4;</span><br><span class="line">            s[i+<span class="number">1</span>] = t3;</span><br><span class="line">            s[i+<span class="number">2</span>] = t2;</span><br><span class="line">            i--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">1</span> &amp;&amp; t[m<span class="number">-1</span>] == t[m<span class="number">-2</span>]) m -= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m) <span class="built_in">puts</span>(<span class="string">"open"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"closed"</span>);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="赛后补题"><a href="#赛后补题" class="headerlink" title="赛后补题"></a>赛后补题</h1><h2 id="Prob-H-状压-dp"><a href="#Prob-H-状压-dp" class="headerlink" title="Prob H. 状压 dp"></a>Prob H. 状压 dp</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>你有 $n$ 个体积分别是 $w_i$ 的物品，现在要把它们装进最多装体积为 $S$ 的背包里，问至少需要几个背包才能把所有物品都装下。数据范围 $n\leq 24,w_i\leq 10^9$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>一种显然的想法是爆搜，或者模拟退火之类的玄学解法，可是貌似都不奏效。。。</p><p>一种比较好的方法是状压 dp 。为了避免后效性，我们给出一种比较强的定义状态的方式，我们采用将背包一个一个填满的方式，而不是几个背包同步填。</p><blockquote><p>定义 $dp[S]$ 表示按照一定顺序删除 $S$ 中元素之后，至少使用的背包数量 $c$，与最后一个背包的剩余体积 $v$ 组成的二元组 $(c,v)$。</p></blockquote><p>这样的话，dp就是可以合并的了，直接按照 $c$ 是第一关键字， $v$ 是第二关键字进行合并即可。转移是显然的。</p><p>复杂度 $O(n\cdot 2^n)$</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>这道题的一大启示就是，在保证等价的前提下，定义状态的时候可以附加一定条件，使得 dp 转移更加方便高效。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">25</span>, maxs = (<span class="number">1</span> &lt;&lt; <span class="number">24</span>) + <span class="number">30</span>;</span><br><span class="line">pii dp[maxs];</span><br><span class="line"><span class="keyword">int</span> n, a[maxn], s, full;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(pii &amp;p, pii x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.first &lt; p.first) p = x;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x.first == p.first &amp;&amp; x.second &gt; p.second) p = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;s);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line"></span><br><span class="line">    full = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">0</span>] = &#123;<span class="number">0</span>, <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; full; ++S) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j) <span class="keyword">if</span>(~S &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> lft = dp[S].second - a[j];</span><br><span class="line">            pii upd;</span><br><span class="line">            <span class="keyword">if</span>(lft &gt;= <span class="number">0</span>) upd = &#123;dp[S].first, lft&#125;;</span><br><span class="line">            <span class="keyword">else</span> upd = &#123;dp[S].first + <span class="number">1</span>, s - a[j]&#125;;</span><br><span class="line">            up(dp[S | (<span class="number">1</span>&lt;&lt;j)], upd);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[full].first);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-G-最小圆覆盖"><a href="#Prob-G-最小圆覆盖" class="headerlink" title="Prob G. 最小圆覆盖"></a>Prob G. 最小圆覆盖</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给你了 $n$ 个定义在区间 $[0,T]$ 上的一次函数 $f_i(x) = a_ix+b_i$ ，定义两个一次函数的距离为：<br>$$<br>dist(f,g) = \left(\max_{0\leq i\leq T} (f(i)-g(i))\right)^2 + \left(\min_{0\leq i\leq T}(f(i)-g(i))\right)^2<br>$$<br>你现在要找一个一次函数 $g(x) = cx+d$ 使得下面的值最小：<br>$$<br>\max_{1\leq i\leq n} dist(f_i, g)<br>$$<br>你只需要输出最小值就可以了。</p><p>数据范围 $1\leq n \leq 200000$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>乍一看，貌似要想一想。那个最大值与最小值一定在定义域的两个端点或者两个函数相交的地方取到。。。等等，不对啊，看清楚之后，我们会发现，那个平方是加在外面的，因此要我们求最值的函数就是 $f(x)-g(x)$ ，两个一次函数之差还是一次函数！那么最值一个在 $x=0$ 处取得，一个在 $x=T$ 处取得。</p><p>我们用 $f(0)$ 与 $f(T)$ 两个值来表征一个一次函数，可以发现，如果把 $\big(f(0),f(T)\big)$ 作为点画在二维平面上， $dist(f,g)$ 即为这两个点的欧几里得距离。把题中 $n$ 个点都画出来，那么所要求的就是最小圆覆盖！</p><p>不过最小圆覆盖怎么求呢？随机增量法或者模拟退火法都可以实现，这里就用的是随机增量法。有关最小圆覆盖，我单独写了一篇博客，<a href="http://yang2002.github.io/2019/04/21/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">看这里</a></p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">102000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-7</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>): x(xp), y(yp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;<span class="keyword">return</span> sgn(x - rhs.x) == <span class="number">0</span> &amp;&amp; sgn(y - rhs.y) == <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123; <span class="keyword">return</span> Point(x*<span class="built_in">cos</span>(rad)-y*<span class="built_in">sin</span>(rad), x*<span class="built_in">sin</span>(rad)+y*<span class="built_in">cos</span>(rad)); &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn90</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> Point(-y, x); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector x, Vector y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">acos</span>(dot(A, B) / length(A) / length(B)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">LLIntPV</span><span class="params">(Point P, Vector v, Point Q, Vector w)</span> </span>&#123;</span><br><span class="line">    Vector u = P - Q;</span><br><span class="line">    assert(cross(v, w) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> t = cross(w, u) / cross(v, w);</span><br><span class="line">    <span class="keyword">return</span> P + v * t;</span><br><span class="line">&#125; <span class="comment">// Line: Point + Vector</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Circle</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    Circle(Point O, <span class="keyword">double</span> R): o(O), r(R) &#123; &#125;</span><br><span class="line">    Circle(Point A, Point B, Point C) &#123;</span><br><span class="line">        assert(sgn(cross(B-A, C-A)) != <span class="number">0</span>);</span><br><span class="line">        Point mab = (A + B) / <span class="number">2.0</span>, ab = (B - A).turn90();</span><br><span class="line">        Point mbc = (B + C) / <span class="number">2.0</span>, bc = (C - B).turn90();</span><br><span class="line">        o = LLIntPV(mab, ab, mbc, bc);</span><br><span class="line">        r = length(A - o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">Point <span class="title">at</span><span class="params">(<span class="keyword">double</span> theta)</span> </span>&#123; <span class="keyword">return</span> o + Point(<span class="built_in">cos</span>(theta)*r, <span class="built_in">sin</span>(theta)*r); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">out</span><span class="params">(Point pt)</span> </span>&#123; <span class="keyword">return</span> sgn(length(o-pt) - r) == <span class="number">1</span>;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"><span class="function">Circle <span class="title">MinCircle</span><span class="params">(<span class="built_in">vector</span>&lt;Point&gt; pt)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    shuffle(pt.begin(), pt.end(), rng);</span><br><span class="line">    <span class="function">Circle <span class="title">cc</span><span class="params">(pt[<span class="number">0</span>], <span class="number">0.0</span>)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) <span class="keyword">if</span>(cc.out(pt[i])) &#123;</span><br><span class="line">        cc = Circle(pt[i], <span class="number">0.0</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) <span class="keyword">if</span>(cc.out(pt[j])) &#123;</span><br><span class="line">            cc = Circle((pt[i] + pt[j]) / <span class="number">2.0</span>, length(pt[i]-pt[j]) / <span class="number">2.0</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; j; ++k) &#123;</span><br><span class="line">                <span class="keyword">if</span>(cc.out(pt[k])) &#123;</span><br><span class="line">                    cc = Circle(pt[i], pt[j], pt[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, T, aa, bb;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;T, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;aa, &amp;bb);</span><br><span class="line">        p[i] = Point(bb, T * aa + bb);</span><br><span class="line">    &#125;</span><br><span class="line">    Circle ans = MinCircle(p);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans.r * ans.r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-A-线段树优化建图-Tarjan-SCC"><a href="#Prob-A-线段树优化建图-Tarjan-SCC" class="headerlink" title="Prob A. 线段树优化建图+Tarjan SCC"></a>Prob A. 线段树优化建图+Tarjan SCC</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>我们将连边 $a\to b$ 如果炸弹 $a$ 爆炸时能够引爆炸弹 $b$ 。每个炸弹影响的区域都是一个连续的区间，可以通过线段树优化建图将有向图建出来。然后缩点，把得到的 DAG 中入度为 0 的 SCC 最小权值加进答案即可。</p><p>怎么支持修改？实际上修改只修改权值，是不改变建出来的图的，只需要每一个SCC都用一个 <code>multiset</code> 维护SCC中的权值即可实现。</p><h3 id="Comment-1"><a href="#Comment-1" class="headerlink" title="Comment"></a>Comment</h3><p>对于这道题，真的不知道该说什么才好。。。基本上是一眼题，但是写起来是真心毒瘤。代码长度4857Byte，花了将近两个小时才写完，然后用了一个小时调试错误，最后才发现就是某一个数组开小了。</p><p>警示：</p><ul><li>遇到RE，永远要首先检查数组大小是否都开足够。不管自己多么自信不会数组开销也要检查！！！</li><li>Windows下本机测试手动扩栈的方法：编译选项 <code>-Wl,--stack,268435456</code></li></ul><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Generated by powerful Codeforces Tool</span></span><br><span class="line"><span class="comment"> * Author: YangDavid</span></span><br><span class="line"><span class="comment"> * Time: 2019-04-22 16:04:47</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> Graph = <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sccno, dfn, low;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line">Graph G(maxn * 4), nG;</span><br><span class="line"></span><br><span class="line"><span class="comment">// === template part ===</span></span><br><span class="line"><span class="keyword">namespace</span> Tarjan &#123;</span><br><span class="line">    <span class="comment">// input Graph G and vertex number vc, (index starts with 1)</span></span><br><span class="line">    <span class="comment">// then call find_scc(). nG is the new graph, sc is number of vertices in nG</span></span><br><span class="line">    <span class="comment">// (index starts with 1)</span></span><br><span class="line">    <span class="keyword">int</span> vc, sc, dfs_clock;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        S.push(v);</span><br><span class="line">        low[v] = dfn[v] = ++dfs_clock;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> u : G[v]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(!dfn[u]) &#123;</span><br><span class="line">                Tarjan(u);</span><br><span class="line">                low[v] = min(low[v], low[u]);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!sccno[u]) </span><br><span class="line">                low[v] = min(low[v], dfn[u]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(low[v] == dfn[v]) &#123;</span><br><span class="line">            sc++;</span><br><span class="line">            <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">                <span class="keyword">int</span> p = S.top(); S.pop();</span><br><span class="line">                sccno[p] = sc;</span><br><span class="line">                <span class="keyword">if</span>(p == v) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">find_scc</span><span class="params">(<span class="keyword">int</span> sz = G.size() - <span class="number">1</span>)</span> </span>&#123; </span><br><span class="line">        <span class="comment">// returns &#123;new Graph, sccno&#125;</span></span><br><span class="line">        sc = dfs_clock = <span class="number">0</span>;</span><br><span class="line">        vc = sz;</span><br><span class="line"></span><br><span class="line">        sccno = dfn = low = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(vc + <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vc; ++i) <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">            Tarjan(i);</span><br><span class="line">        nG.resize(sc + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= vc; ++u) <span class="keyword">for</span>(<span class="keyword">auto</span> v : G[u]) </span><br><span class="line">            <span class="keyword">if</span>(sccno[u] != sccno[v]) </span><br><span class="line">                nG[sccno[u]].push_back(sccno[v]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// === end of template ===</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">mine</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> p, r, c, id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> mine&amp; me) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> p &lt; me.p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[maxn], as[maxn];</span><br><span class="line"><span class="keyword">int</span> n, q, rk[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">multiset</span>&lt;pii&gt; asc;</span><br><span class="line"><span class="built_in">multiset</span>&lt; pii, greater&lt;pii&gt; &gt; des;</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; w[maxn * <span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vc;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">link</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> o = <span class="number">1</span>, <span class="keyword">int</span> l = <span class="number">1</span>, <span class="keyword">int</span> r = vc)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        G[p].push_back(o);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= mid) link(p, ql, qr, o &lt;&lt; <span class="number">1</span>, l, mid);</span><br><span class="line">    <span class="keyword">if</span>(qr &gt; mid) link(p, ql, qr, o &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FREOPEN</span></span><br><span class="line">        freopen(<span class="string">"in1.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    read(n, q);</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        read(a[i].p, a[i].r, a[i].c);</span><br><span class="line">        a[i].id = i;</span><br><span class="line">        as[i] = a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    sort(as + <span class="number">1</span>, as + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        asc.emplace(as[i].p, i);</span><br><span class="line">        des.emplace(as[i].p, i);</span><br><span class="line">    &#125;</span><br><span class="line">    vc = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(vc &lt; n) vc &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; vc; ++i) &#123;</span><br><span class="line">        G[i].push_back(i &lt;&lt; <span class="number">1</span>);</span><br><span class="line">        G[i].push_back(i &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// as[i] &lt;-&gt; G[i+vc-1]</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> lp = as[i].p - as[i].r - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rp = as[i].p + as[i].r + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> l = asc.upper_bound(&#123;lp, INF&#125;) -&gt; second;</span><br><span class="line">        <span class="keyword">int</span> r = des.upper_bound(&#123;rp, <span class="number">0</span>&#125;) -&gt; second;</span><br><span class="line">        link(vc - <span class="number">1</span> + i, l, r);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Tarjan::find_scc(vc *  <span class="number">2</span>- <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> vnc = Tarjan::sc;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indeg(vnc + <span class="number">10</span>), mark(vnc + <span class="number">10</span>);</span><br><span class="line">    <span class="keyword">auto</span> BFS = [&amp;]() &#123;</span><br><span class="line">        <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; leftscc;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = vc; i &lt; <span class="number">2</span> * vc; ++i)</span><br><span class="line">            leftscc.insert(sccno[i]);</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; qq;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : leftscc) qq.push(g);</span><br><span class="line">        <span class="keyword">while</span>(!qq.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> tp = qq.front(); qq.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> g : nG[tp]) <span class="keyword">if</span>(!indeg[g]) &#123;</span><br><span class="line">                indeg[g] = <span class="literal">true</span>;</span><br><span class="line">                qq.push(g);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vnc; ++i) &#123;</span><br><span class="line">            mark[i] = <span class="number">1</span> - indeg[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    BFS();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(mark[sccno[vc<span class="number">-1</span>+i]])</span><br><span class="line">        w[sccno[vc<span class="number">-1</span>+i]].insert(as[i].c);</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vnc; ++i) <span class="keyword">if</span>(mark[i])</span><br><span class="line">        ans += *w[i].begin();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        rk[as[i].id] = i;</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        <span class="keyword">int</span> m, nc;</span><br><span class="line">        read(m, nc);</span><br><span class="line">        <span class="keyword">int</span> wno = sccno[rk[m] + vc - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(mark[wno]) &#123;</span><br><span class="line">            ans -= *w[wno].begin();</span><br><span class="line">            w[wno].erase(w[wno].find(a[m].c));</span><br><span class="line">            w[wno].insert(nc);</span><br><span class="line">            ans += *w[wno].begin();</span><br><span class="line">        &#125;</span><br><span class="line">        a[m].c = nc;</span><br><span class="line">        write(ans);</span><br><span class="line">        <span class="comment">// printf(" q = %d", q);</span></span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以下部分纯属口胡~不过基本都是靠谱的。</p><h2 id="Prob-C-AC自动机-高斯消元-or-矩阵快速幂"><a href="#Prob-C-AC自动机-高斯消元-or-矩阵快速幂" class="headerlink" title="Prob. C AC自动机+高斯消元 or 矩阵快速幂"></a>Prob. C AC自动机+高斯消元 or 矩阵快速幂</h2><p>将这两个串的 AC 自动机建出来，然后问题就变为类似在这个有向图上（带 fail 链接）随机游走的问题。</p><h2 id="Prob-E-点分治"><a href="#Prob-E-点分治" class="headerlink" title="Prob E. 点分治"></a>Prob E. 点分治</h2><p>不会。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Petrozavodsk-Winter-2018-Carnegie-Mellon-U-Contest&quot;&gt;&lt;a href=&quot;#Petrozavodsk-Winter-2018-Carnegie-Mellon-U-Contest&quot; class=&quot;headerlink&quot; title=&quot;Petrozavodsk Winter-2018. Carnegie Mellon U Contest.&quot;&gt;&lt;/a&gt;Petrozavodsk Winter-2018. Carnegie Mellon U Contest.&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;K&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:44&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4:05&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(0)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(1)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$\mathcal{O}$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$\mathcal{O}$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*10&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+5&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*3&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*2&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;44&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;126&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;74&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;71&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;109&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;85&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;39&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;67&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;8&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;线段树&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;签到&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;矩阵&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;结论&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;点分治&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;最小圆覆盖&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;状压&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;背包&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;4857&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1283&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;916&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;3039&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;923&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;2287&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;p&gt;Dodo_kindergarten 队第一次三人正式训练，不过其实不应当挑选这一场，这一场真是打自闭了 QAQ ，过了签到题就没怎么想出题目了。cyy 和 wzk 一共做出来四道题。这一场说明了我还有许多算法没有做到熟练运用，看来需要努力补充一些短板的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest:  &lt;code&gt;2/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Upsolved &lt;code&gt;6/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved &lt;code&gt;8/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank &lt;code&gt;114/137&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;深刻认识到我数据结构的短板&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
      <category term="Opentrains" scheme="http://yoursite.com/tags/Opentrains/"/>
    
      <category term="最小圆覆盖" scheme="http://yoursite.com/tags/%E6%9C%80%E5%B0%8F%E5%9C%86%E8%A6%86%E7%9B%96/"/>
    
      <category term="结论" scheme="http://yoursite.com/tags/%E7%BB%93%E8%AE%BA/"/>
    
      <category term="背包" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85/"/>
    
      <category term="线段树优化建图" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91%E4%BC%98%E5%8C%96%E5%BB%BA%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>计算几何知识小结</title>
    <link href="http://yoursite.com/2019/04/18/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95%E7%9F%A5%E8%AF%86%E5%B0%8F%E7%BB%93/"/>
    <id>http://yoursite.com/2019/04/18/计算几何知识小结/</id>
    <published>2019-04-18T12:36:46.000Z</published>
    <updated>2019-04-20T17:45:44.301Z</updated>
    
    <content type="html"><![CDATA[<p>还没有完成，先把目前的板子贴上来吧：</p><a id="more"></a><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>): x(xp), y(yp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;<span class="keyword">return</span> sgn(x - rhs.x) == <span class="number">0</span> &amp;&amp; sgn(y - rhs.y) == <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function">Point <span class="title">turn</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123; <span class="keyword">return</span> Point(x*<span class="built_in">cos</span>(rad)-y*<span class="built_in">sin</span>(rad), x*<span class="built_in">sin</span>(rad)+y*<span class="built_in">cos</span>(rad)); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;x, &amp;y); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector x, Vector y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">angle</span><span class="params">(Vector A, Vector B)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">acos</span>(dot(A, B) / length(A) / length(B)); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">LineProjection</span><span class="params">(Point P, Point A, Point B)</span> </span>&#123;</span><br><span class="line">    Vector v = B - A;</span><br><span class="line">    <span class="keyword">return</span> A + v * (dot(P-A, v) / dot(v, v));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Point <span class="title">LineReflection</span><span class="params">(Point P, Point A, Point B)</span> </span>&#123;</span><br><span class="line">    Point proj = LineProjection(P, A, B);</span><br><span class="line">    <span class="keyword">return</span> proj + proj - P;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Clockwise</span><span class="params">(Point O, Point A, Point B)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* Clockwise: -1</span></span><br><span class="line"><span class="comment">       Counterclockwise: 1</span></span><br><span class="line"><span class="comment">       Otherwise: 0</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">return</span> sgn(cross(A - O, B - O));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SegCheck</span><span class="params">(Point a, Point b, Point p)</span> </span>&#123;</span><br><span class="line">    Vector d = b - a, e = p - a;</span><br><span class="line">    <span class="keyword">if</span>(sgn(dot(d, e)) == <span class="number">-1</span>) <span class="built_in">puts</span>(<span class="string">"ONLINE_BACK"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(sgn(length(e) - length(d)) == <span class="number">1</span>) <span class="built_in">puts</span>(<span class="string">"ONLINE_FRONT"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"ON_SEGMENT"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">JudgeLLParOrth</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* 2: parallel</span></span><br><span class="line"><span class="comment">       1: orthogonal</span></span><br><span class="line"><span class="comment">       0: otherwise</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    Vector v = a2 - a1, w = b2 - b1;</span><br><span class="line">    <span class="keyword">if</span>(sgn(cross(v, w)) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(sgn(dot(v, w)) == <span class="number">0</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckSSProperIntersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> c1 = cross(a1 - b1, b2 - b1), c2 = cross(a2 - b1, b2 - b1);</span><br><span class="line">    <span class="keyword">double</span> c3 = cross(b1 - a1, a2 - a1), c4 = cross(b2 - a1, a2 - a1);</span><br><span class="line">    <span class="keyword">return</span> sgn(c1) * sgn(c2) == <span class="number">-1</span> &amp;&amp; sgn(c3) * sgn(c4) == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">OnSeg</span><span class="params">(Point P, Point A, Point B)</span> </span>&#123; <span class="comment">// (A, B)</span></span><br><span class="line">    Vector v = B - P, w = A - P;</span><br><span class="line">    <span class="keyword">if</span>(sgn(cross(v, w)) != <span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> sgn(dot(v, w)) == <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">CheckSSIntersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a1 == b1 || a1 == b2 || a2 == b1 || a2 == b2) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(OnSeg(a1, b1, b2) || OnSeg(a2, b1, b2) || OnSeg(b1, a1, a2) || OnSeg(b2, a1, a2))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> CheckSSProperIntersection(a1, a2, b1, b2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Ensure lines intersect first!!! cross(v, w) != 0</span></span><br><span class="line"><span class="function">Point <span class="title">LLIntersection</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    Vector v = a2 - a1, w = b2 - b1, u = a1 - b1;</span><br><span class="line">    assert(cross(v, w) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> t1 = cross(w, u) / cross(v, w);</span><br><span class="line">    <span class="keyword">return</span> a1 + v * t1;</span><br><span class="line">&#125; <span class="comment">// Line: 2 Points</span></span><br><span class="line"></span><br><span class="line"><span class="function">Point <span class="title">LLIntPV</span><span class="params">(Point P, Vector v, Point Q, Vector w)</span> </span>&#123;</span><br><span class="line">    Vector u = P - Q;</span><br><span class="line">    assert(cross(v, w) != <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">double</span> t = cross(w, u) / cross(v, w);</span><br><span class="line">    <span class="keyword">return</span> P + v * t;</span><br><span class="line">&#125; <span class="comment">// Line: Point + Vector</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PLDist</span><span class="params">(Point P, Point A, Point B)</span> </span>&#123; <span class="comment">// Point-Line</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(cross(B - P, A - P) / length(A - B));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PSDist</span><span class="params">(Point P, Point A, Point B)</span> </span>&#123; <span class="comment">// Point-Segment</span></span><br><span class="line">    <span class="keyword">if</span>(A == B) <span class="keyword">return</span> length(P - A);</span><br><span class="line">    <span class="keyword">if</span>(sgn(dot(A-P, B-A)) == <span class="number">1</span>) <span class="keyword">return</span> length(A - P);</span><br><span class="line">    <span class="keyword">if</span>(sgn(dot(B-P, B-A)) == <span class="number">-1</span>) <span class="keyword">return</span> length(B - P);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(cross(B-P, A-P) / length(A-B));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SSDist</span><span class="params">(Point a1, Point a2, Point b1, Point b2)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// segment - segment</span></span><br><span class="line">    <span class="keyword">if</span>(CheckSSIntersection(a1, a2, b1, b2)) <span class="keyword">return</span> <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">return</span> min(min(PSDist(a1,b1,b2), PSDist(a2,b1,b2)), min(PSDist(b1,a1,a2), PSDist(b2,a1,a2)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// Polygon Operations</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt;Point&gt; Polygon;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">PolygonArea</span><span class="params">(<span class="keyword">const</span> Polygon&amp; p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = p.size();</span><br><span class="line">    <span class="keyword">double</span> tot = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz - <span class="number">1</span>; ++i)</span><br><span class="line">        tot += cross(p[i]-p[<span class="number">0</span>], p[i+<span class="number">1</span>]-p[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">fabs</span>(tot / <span class="number">2.0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Point x;</span><br><span class="line">    Polygon pol;</span><br><span class="line">    <span class="keyword">int</span> q; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q);</span><br><span class="line">    <span class="keyword">while</span>(q--) &#123;</span><br><span class="line">        x.scan();</span><br><span class="line">        pol.push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.1f\n"</span>, PolygonArea(pol));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还没有完成，先把目前的板子贴上来吧：&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="计算几何" scheme="http://yoursite.com/tags/%E8%AE%A1%E7%AE%97%E5%87%A0%E4%BD%95/"/>
    
  </entry>
  
  <entry>
    <title>Google Code Jam Round 1A 翻车记（附题解）</title>
    <link href="http://yoursite.com/2019/04/13/Google-Code-Jam-Round-1A-%E6%B8%B8%E8%AE%B0%EF%BC%88%E9%99%84%E9%A2%98%E8%A7%A3%EF%BC%89/"/>
    <id>http://yoursite.com/2019/04/13/Google-Code-Jam-Round-1A-游记（附题解）/</id>
    <published>2019-04-13T04:19:44.000Z</published>
    <updated>2019-04-20T17:44:08.588Z</updated>
    
    <content type="html"><![CDATA[<p>今天第一次打正式的Google Code Jam比赛，从开场思维混乱，前期血崩，时间过去一大半才写好A题的慌张，到发现B题是智障题的窃喜，再到B题奇怪地TLE、WA，以为读错题的恐惧，到没来得及写完C题的遗憾，再到最后发现过掉A题的人是最少的的信息，这次比赛的心路历程真的是一波三折啊！看来不管前期怎么样，都不要放弃希望啊！在这里就记录一下我的感受吧。</p><p>一些客观结果：</p><ul><li>Rank 942 out of 8440, Score 63 / 100</li><li>T1 <font color="green"><b>Accepted</b></font> (31 / 31, 1 try,  <font color="red">3266 byte</font>)</li><li>T2 <font color="green"><b>Accepted</b></font> (32 / 32, 3 tries, <font color="blue">1919 byte</font>)</li><li>T3 <font color="grey">Not attempted</font> (0 / 37, 0 try) (<font color="green">Upsolved</font>, 1 try,  <font color="blue">1487 byte</font>)</li></ul><a id="more"></a><h1 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h1><p>之前没有看过以前 GCJ 的题目，一看只有三道题，有部分分，感觉有点 OI 赛制的意味啊，那就按顺序开题吧。</p><p>开场看了A题，发现是比较擅长的构造题。模拟了下题意，有一点思路了，但是还没有仔细想。往后瞄了一眼，发现C题好多人都过掉了，读了好几遍题意，结果还是没读懂。这又是字符串题，不算特别擅长。我有点自闭了，最后还是决定开 A 题。</p><p>想了5分钟，基本想出构造的框架了；可是有不少细节。一会我发现小范围需要暴力，一会我发现构造方法需要分奇偶性讨论，常常是我想出来一种解决方案，可是一会儿就被自己 hack 了。中途看了眼榜，发现榜单有 800 页人，可是我错以为是 800 个人了，自认为竞争不激烈，可以随便打。然后就开始休闲敲代码模式，写了改，改了写，不知道弄了多久，终于过自己的样例了，可是也不是多稳。先交一下吧，交上去果然也过 pretest 了。可是一看排名：You are ranked 3890. ？？？什么鬼？这时候我才发现 800 只是页数，我顿时开始慌了。一看当时太休闲了，已经过去 90 分钟了，只剩下 60 分钟解两道题，其中还有一道我读不懂，过 pretest 的题也大概率 FST。算了，这一场就是背，我心想。</p><p>不想看 C 题啊，于是我又迷迷糊糊看了一下 B 题，发现是道交互题。神志不清地想了一下，发现题目给的条件怪多，可是这不就是个 CRT 裸题吗？迅速敲完了代码，交上去，结果 TLE 。发现是调试语句忘删除了，删掉之后信心满满交了一发，结果 WA。这次我可是有点自闭了，我是不是读错题了？慌忙又读了一下题，没问题啊！看了眼代码，发现多组数据，有个数组忘记清空了。唉，我是智障，改了一下就过了。</p><p>看了下表，还有 28 分钟。 C 题应该是不难的吧，那么多人都过了。可是刚开始读题的阴影挥之不去，比赛时间也越来越少。耐下心来仔细读，总算把题目读懂了。还剩下 20 分钟，这题怎么做啊？我想到了一个很靠谱的贪心（本质和 trie 一样），但是中间需要用后缀数组求<code>lcp</code> 。这怎么可能写完？我想到用字符串哈希实现，结果发现那样做可能会炸复杂度。我唯独没有想到直接用 trie 树。只剩 6 分钟了，我突然发现，把字符串翻转之后扔进 trie 树，之后不就是遍历一下 trie 树的智障题了吗？可是实在是来不及写了。想着总要拿到 10 分部分分吧，可是也不会。最后只得在痛苦中迎来比赛的结束。</p><p>刷新了一下，前两道题都过了，可是还是 Rank 1738 。乖乖，连前 1500 都没进，真是状态太差了啊，还要看 Round 1B、Round 1C 的发挥了。唉，真是丢人啊。结果又刷新了一下，发现榜更新 system test 的数据了，排名回到了 942，总算是没崩太惨。看榜发现 C 题是场上通过率最高的题，A 题只有 10% 的人过 system test ！问了问 cyy, wzk 他们也都没有通过 A 题的 system test。就过掉的题目的难度来看，看来也许打得不算太崩？只是时间分配方面问题比较大了。</p><p>经验教训：</p><ul><li>时间分配一定要做好，写代码也要不时看表，不要写得太休闲；</li><li>要相信自己做构造题的能力；</li><li>仔细读题，认真读题，不要读不懂题目就自闭。</li></ul><h1 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h1><h2 id="Prob-A-构造"><a href="#Prob-A-构造" class="headerlink" title="Prob A. 构造"></a>Prob A. 构造</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一个 $n \times m$ 的长方形棋盘，你需要在棋盘中构造出这么一条哈密尔顿路径（注意：不是回路），使得路径上任何相邻两个节点不在同一行、不在同一列，且不在同一对角线上。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>这道题大体上有两类思路。一种是硬核构造型的，另一种是大力随机化搜索型的。我场上想的是构造性的解法。</p><h4 id="构造性解法"><a href="#构造性解法" class="headerlink" title="构造性解法"></a>构造性解法</h4><p>我们主要的构造思路如下图所示：</p><p><img src="construction.png" alt="构造的主要思路"></p><p>我们先按照上图在棋盘上摆 $n$ 个珠子，按顺序依次访问这些点。然后我们我们重复 $m$ 次，每次按从上到下的顺序把某一行中的珠子向右移动一格，如果到了最右边，就把棋子挪回最左边。同时访问新珠子所在的位置。</p><p>读者可以思考一下，这样下去，如果棋盘足够大，那么我们每次相邻访问的位置总是纵坐标差1，横坐标差很多，或者横坐标差1，纵坐标差很多，或者走的是一个日字，都是可行操作。（注意此处的“很多”指的是上图中任何一段黑线的长度）</p><p>首先我们可以翻转棋盘，使得 $n\leq m$ 。事实上原原本本实现上面的想法也仅仅只遗漏了这几种情况：</p><ul><li>$n$ 是偶数，并且 $n=m$ ，这样从最底下是蓝线，访问完蓝线后，从最底下跳到最上面可能会经过斜对角线。</li><li>$n$ 和 $m$ 中存在小于 5 的数，这样上面分析中的“很多”就不多了，可能出现同对角线的情况。</li></ul><p>对于第一种情况，比较难处理，我稍微改变了一下访问珠子的次序，并且当棋子到达最右侧时采用了另一种策略，对剩下的两列棋子分开处理。我的处理方式对于任何偶数 $n$ 都是成立的，不限于 $n=m$ 的情况。细节见代码。</p><p>对于第二种情况，可以发现 $n=2,m\leq 4$ 时无解， $n=3,m=3$ 时无解。剩下的情况基本上都可以用上面的策略完成，除了 $n=4,m=4$  必须手动打表。</p><p>由此我们就讨论清楚了所有可能的情况，实现一下就好了。</p><p>总时间复杂度： $O(nm)$，已达到理论下界。（因为要输出方案）</p><h4 id="搜索策略（待填坑）"><a href="#搜索策略（待填坑）" class="headerlink" title="搜索策略（待填坑）"></a>搜索策略（待填坑）</h4><p>这个图中的哈密尔顿路径理应是非常多的，所以很多选手提交了随机化搜索的代码也得到了通过。</p><h3 id="再谈哈密尔顿问题（待填坑）"><a href="#再谈哈密尔顿问题（待填坑）" class="headerlink" title="再谈哈密尔顿问题（待填坑）"></a>再谈哈密尔顿问题（待填坑）</h3><p>这个问题可以归约到哈密顿回路这一个著名的 NPC 问题，那么这里也拓展一下我所见到的哈密顿回路相关知识吧。</p><p>CYY提到了哈密尔顿回路问题中的 Dirac 定理，内容如下：</p><blockquote><p>设一个无向图中有 $N$ 个节点，若所有节点的度数都大于等于 $N/2$ ，则哈密尔顿回路一定存在。</p></blockquote><p>这个定理在这道题中还是蛮适用的，每个节点和大于 $nm-2n-2m$  个节点连边，在 $n,m$ 都比较大的情况下是可以满足上面的条件的。而 Dirac 定理的证明是构造性的，我们也可以直接得到一条这样的哈密尔顿路径。</p><p>还有一个著名的定理是有关竞赛图的。竞赛图指的是给完全图每条边定向之后得到的有向图。</p><blockquote><ol><li>竞赛图必有哈密尔顿路径</li><li>竞赛图有哈密尔顿回路 $\Leftrightarrow$ 竞赛图强联通</li></ol></blockquote><p><strong>证明：</strong> 先证明（1）。这个证明使用反证法。假如不存在哈密尔顿路径，那么我们一定能够找到这个图的最长路径，记为 $a\to b \to c \cdots \to e$。考虑不在最长路径的 $p$ 点，根据最长的性质，一定不能有 $p\to a, e \to p$ 的边。那么图就如下所示了。可是考虑红色笔画出的边该如何定向呢？无论红边如何定向，一定会存在 $a\to e$ 路径上的一点 $c$ ，使得有这么一条路径 $a\to c\to p\to c’ \to e$ ，从而与最长路的性质相矛盾。如下图所示。</p><p><img src="CompetitionGraph.png" alt="竞赛图必有哈密尔顿路径"></p><p>有关的博文：</p><p><a href="https://blog.csdn.net/a_crazy_czy/article/details/73611366" target="_blank" rel="noopener">竞赛图的兰道定理</a></p><p><a href="https://blog.csdn.net/baidu_36797646/article/details/82883976" target="_blank" rel="noopener">BZOJ 4727: POI2017 竞赛图相关</a></p><p><a href="https://www.xuebuyuan.com/3203762.html" target="_blank" rel="noopener">哈密顿回路相关总结</a></p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, swp;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; ans;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> add(x, y) ans.emplace_back(x, y)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    swp = <span class="literal">false</span>;</span><br><span class="line">    read(n, m);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; nxt(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(n &gt; m) swap(n, m), swp = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span> &amp;&amp; m &lt;= <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">3</span> &amp;&amp; m == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(m == <span class="number">4</span>) &#123;</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">            add(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">4</span>, <span class="number">3</span>);</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">            add(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            add(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">            add(<span class="number">4</span>, <span class="number">4</span>);</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line">            add(<span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">3</span>, <span class="number">3</span>);</span><br><span class="line">            add(<span class="number">4</span>, <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">4</span>);</span><br><span class="line">            add(<span class="number">4</span>, <span class="number">2</span>);</span><br><span class="line">            add(<span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            nxt[<span class="number">1</span>] = nxt[<span class="number">3</span>] = <span class="number">3</span>;</span><br><span class="line">            nxt[<span class="number">2</span>] = nxt[<span class="number">4</span>] = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">                add(<span class="number">1</span>, nxt[<span class="number">1</span>]++);</span><br><span class="line">                add(<span class="number">4</span>, nxt[<span class="number">4</span>]++);</span><br><span class="line">                add(<span class="number">3</span>, nxt[<span class="number">3</span>]++);</span><br><span class="line">                add(<span class="number">2</span>, nxt[<span class="number">2</span>]++);</span><br><span class="line">            &#125;</span><br><span class="line">            add(<span class="number">4</span>, m - <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">3</span>, <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">2</span>, m);</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">            add(<span class="number">4</span>, m);</span><br><span class="line">            add(<span class="number">2</span>, m - <span class="number">1</span>);</span><br><span class="line">            add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            nxt[i] = (i&amp;<span class="number">1</span>) ? <span class="number">1</span> : <span class="number">3</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                add(j, nxt[j]);</span><br><span class="line">                <span class="keyword">if</span>(++nxt[j] == m + <span class="number">1</span>) nxt[j] = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">            nxt[i] = (i &amp; <span class="number">1</span>) ? <span class="number">3</span> : <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m - <span class="number">2</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">                add(j, nxt[j]++);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        add(n - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">        add(n, m - <span class="number">1</span>);</span><br><span class="line">        add(n - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        add(n, m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> r = n - <span class="number">2</span>; r &gt; <span class="number">0</span>; r -= <span class="number">2</span>) &#123;</span><br><span class="line">            add(r, m - <span class="number">1</span>);</span><br><span class="line">            add(r - <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            add(r, m);</span><br><span class="line">            add(r - <span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"POSSIBLE"</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans) &#123;</span><br><span class="line">        <span class="keyword">if</span>(swp) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, g.second, g.first);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, g.first, g.second);</span><br><span class="line">    &#125;</span><br><span class="line">    ans.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; read(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, kase);</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-B-中国剩余定理"><a href="#Prob-B-中国剩余定理" class="headerlink" title="Prob B. 中国剩余定理"></a>Prob B. 中国剩余定理</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>显然，1到18中两两互质的数有 $16, 9, 5, 7, 11, 13, 17$，每次询问相同的18个数 $x$ 即可得到答案关于 $x$ 的余数。我们把前面的7个数都问一遍，然后用中国剩余定理合并即可得到解，并且解是唯一的。</p><p>这题可真的是一个一眼题，而且甚至连中国剩余定理都不需要，直接暴力合并都可以的，因为答案小于 $10^6$。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pr[] = &#123;<span class="number">16</span>, <span class="number">9</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>, <span class="number">17</span>&#125;, rem[<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ll ans = <span class="number">0</span>, M = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">exgcd</span><span class="params">(ll a, ll b, ll&amp; d, ll&amp; x, ll&amp; y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b == <span class="number">0</span>) d = a, x = <span class="number">1</span>, y = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> exgcd(b, a % b, d, y, x), y -= x * (a / b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">mo</span><span class="params">(ll x, ll mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x = -x, x %= mod, x = mod - x;</span><br><span class="line">    <span class="keyword">else</span> x %= mod;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">china</span><span class="params">(ll r, ll m)</span> </span>&#123;</span><br><span class="line">    ll c, t, d, k = r - ans, p;</span><br><span class="line">    exgcd(m, M, d, c, t), p = m / d;</span><br><span class="line">    <span class="keyword">if</span>(k &lt; <span class="number">0</span>) c = -c, t = -t, k = -k;</span><br><span class="line">    assert(k % d == <span class="number">0</span>); <span class="comment">// else there will be no solution</span></span><br><span class="line">    t = mo(t * (k / d), p);</span><br><span class="line">    ans += t * M;</span><br><span class="line">    M *= p;</span><br><span class="line">    ans %= M;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ans = <span class="number">0</span>, M = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">7</span>; ++i) &#123;</span><br><span class="line">        rep(j, <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, pr[i], <span class="string">" \n"</span>[j == <span class="number">18</span>]);</span><br><span class="line">        fflush(<span class="built_in">stdout</span>);</span><br><span class="line">        <span class="keyword">int</span> x;</span><br><span class="line">        rep(j, <span class="number">1</span>) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x), rem[i] += x;</span><br><span class="line">        rem[i] %= pr[i];</span><br><span class="line">        china(rem[i], pr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> verdict; <span class="built_in">cin</span> &gt;&gt; verdict;</span><br><span class="line">    <span class="keyword">return</span> verdict == <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T, n, m; read(T, n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!solve())</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-C-trie-树dp"><a href="#Prob-C-trie-树dp" class="headerlink" title="Prob C. trie 树dp"></a>Prob C. trie 树dp</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>把每个字符串翻转，加到 trie 树中，trie 树节点的 dp 值维护子树中尚未被使用的字符串个数。在末尾位置将 dp 值加 1。题中配对在 trie 上相当于选中一个节点，挑出其子树内 2 个未被使用的字符串。每个节点只能被选一次。这个操作是可以贪心的，直接 dfs 一遍 trie 树，顺便把能够选的节点都选上即可。状态转移方程：<br>$$<br>dp(v) = \sum_{s \in sons_v} dp(s)\\<br>dp(v) = dp(v) - 2 \text{ if } dp(v) \geq 2<br>$$</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100020</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> go[<span class="number">26</span>], dp;</span><br><span class="line">    node() &#123;</span><br><span class="line">        <span class="built_in">memset</span>(go, <span class="number">0</span>, <span class="keyword">sizeof</span> go);</span><br><span class="line">        dp = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; trie[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> tot, ans, n, rt = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">string</span> word[<span class="number">1020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : s) &#123;</span><br><span class="line">        <span class="keyword">int</span> ch = g - <span class="string">'A'</span>;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p].go[ch]) &#123;</span><br><span class="line">            trie[p].go[ch] = ++tot;</span><br><span class="line">            trie[tot] = node();</span><br><span class="line">        &#125;</span><br><span class="line">        p = trie[p].go[ch];</span><br><span class="line">    &#125;</span><br><span class="line">    trie[p].dp = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i) <span class="keyword">if</span>(trie[v].go[i]) &#123;</span><br><span class="line">        dfs(trie[v].go[i]);</span><br><span class="line">        trie[v].dp += trie[ trie[v].go[i] ].dp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v != rt &amp;&amp; trie[v].dp &gt;= <span class="number">2</span>) </span><br><span class="line">        trie[v].dp -= <span class="number">2</span>, ans += <span class="number">2</span>;</span><br><span class="line">    <span class="comment">// printf("dfs at node %d: dp = %d\n", v, trie[v].dp);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    trie[rt] = node();</span><br><span class="line">    ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; word[i];</span><br><span class="line">        reverse(word[i].begin(), word[i].end());</span><br><span class="line">        insert(word[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(rt);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; read(T);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> kase = <span class="number">1</span>; kase &lt;= T; ++kase) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, kase);</span><br><span class="line">        solve();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天第一次打正式的Google Code Jam比赛，从开场思维混乱，前期血崩，时间过去一大半才写好A题的慌张，到发现B题是智障题的窃喜，再到B题奇怪地TLE、WA，以为读错题的恐惧，到没来得及写完C题的遗憾，再到最后发现过掉A题的人是最少的的信息，这次比赛的心路历程真的是一波三折啊！看来不管前期怎么样，都不要放弃希望啊！在这里就记录一下我的感受吧。&lt;/p&gt;
&lt;p&gt;一些客观结果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Rank 942 out of 8440, Score 63 / 100&lt;/li&gt;
&lt;li&gt;T1 &lt;font color=&quot;green&quot;&gt;&lt;b&gt;Accepted&lt;/b&gt;&lt;/font&gt; (31 / 31, 1 try,  &lt;font color=&quot;red&quot;&gt;3266 byte&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;T2 &lt;font color=&quot;green&quot;&gt;&lt;b&gt;Accepted&lt;/b&gt;&lt;/font&gt; (32 / 32, 3 tries, &lt;font color=&quot;blue&quot;&gt;1919 byte&lt;/font&gt;)&lt;/li&gt;
&lt;li&gt;T3 &lt;font color=&quot;grey&quot;&gt;Not attempted&lt;/font&gt; (0 / 37, 0 try) (&lt;font color=&quot;green&quot;&gt;Upsolved&lt;/font&gt;, 1 try,  &lt;font color=&quot;blue&quot;&gt;1487 byte&lt;/font&gt;)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="哈密尔顿路径" scheme="http://yoursite.com/tags/%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E8%B7%AF%E5%BE%84/"/>
    
      <category term="trie" scheme="http://yoursite.com/tags/trie/"/>
    
      <category term="Google Code Jam" scheme="http://yoursite.com/tags/Google-Code-Jam/"/>
    
      <category term="中国剩余定理" scheme="http://yoursite.com/tags/%E4%B8%AD%E5%9B%BD%E5%89%A9%E4%BD%99%E5%AE%9A%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Global Round 2 比赛报告</title>
    <link href="http://yoursite.com/2019/04/06/Codeforces-Global-Round-2-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/04/06/Codeforces-Global-Round-2-比赛报告/</id>
    <published>2019-04-06T11:21:46.000Z</published>
    <updated>2019-04-13T16:22:17.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:07</td><td style="text-align:center">00:17</td><td style="text-align:center">00:26</td><td style="text-align:center">00:45</td><td style="text-align:center">01:02</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"></td><td style="text-align:center">AC</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">3866</td><td style="text-align:center">3372</td><td style="text-align:center">2631</td><td style="text-align:center">1589</td><td style="text-align:center">1054</td><td style="text-align:center">4</td><td style="text-align:center">7</td><td style="text-align:center">5</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">贪心</td><td style="text-align:center">入门</td><td style="text-align:center">思维</td><td style="text-align:center">DP</td><td style="text-align:center">贪心</td><td style="text-align:center">?</td><td style="text-align:center">构造</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center">Easy+</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="red"><b>Hard</b></font></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★★★</td><td style="text-align:center"></td></tr></tbody></table><ul><li>Rank 260 /  3138</li><li>Rating  <font color="orange"><b>2139 Master</b></font>  (<font color="green"><b>+59</b></font>) 总算上橙了哈哈</li><li>不过论做题体验来说，这一场的体验真的不怎么好。。。五个签到题，然后三个剩下的题只有个位数人通过。。。一看到 tourist 花了一个小时才AC掉F题，我瞬间就放弃治疗了。整场比赛就是靠着手速上的橙。</li><li>G题是一道非常好的构造题。</li><li>cyy 小号 rank 264，再随便打一场也要橙了</li></ul><a id="more"></a><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Check-in"><a href="#Check-in" class="headerlink" title="Check-in"></a>Check-in</h2><p>签到题基本上都是一眼题，下面是一句话题解：</p><h3 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h3><p>最远的那两个数中一定有一个在数组的最左侧，或者最右侧。贪心即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5030000</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn], l[maxn], r[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> p = n;</span><br><span class="line">    <span class="keyword">while</span>(a[p] == a[<span class="number">1</span>]) p--;</span><br><span class="line">    ans = max(ans, p - <span class="number">1</span>);</span><br><span class="line">    p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a[p] == a[n]) p++;</span><br><span class="line">    ans = max(ans, n - p);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h3><p>二分答案即可。复杂度 $O(n\log^2 n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>;</span><br><span class="line"><span class="keyword">int</span> n, h, a[maxn], b[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    rep(i, x) b[i] = a[i];</span><br><span class="line">    sort(b + <span class="number">1</span>, b + x + <span class="number">1</span>);</span><br><span class="line">    ll tot = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = x; i &gt; <span class="number">0</span>; i -= <span class="number">2</span>) tot += b[i];</span><br><span class="line">    <span class="keyword">return</span> tot &lt;= h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;h);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">1</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r - <span class="number">1</span>) mid = r;</span><br><span class="line">        <span class="comment">// printf("BS at l = %d, r = %d, mid = %d\n", l, r, mid);</span></span><br><span class="line">        <span class="keyword">if</span>(judge(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h3><p>首先将两个矩阵 $A,B$ 异或起来得到 $A\oplus B$，我们只需要判断能否从 $0$ 矩阵变换到 $A\oplus B$ 即可。那么什么样的矩阵满足条件呢？当且仅当 $A\oplus B$ 的每行、每列均只有偶数个 1。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">555</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn], b[maxn][maxn], n, m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, n) rep(j, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">    rep(i, n) rep(j, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i][j]), a[i][j] ^= b[i][j];</span><br><span class="line"></span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="keyword">int</span> x = <span class="number">0</span>;</span><br><span class="line">        rep(j, m) x ^= a[i][j];</span><br><span class="line">        <span class="keyword">if</span>(x == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rep(j, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> y = <span class="number">0</span>;</span><br><span class="line">        rep(i, n) y ^= a[i][j];</span><br><span class="line">        <span class="keyword">if</span>(y == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h3><p>又是典型的分段线性函数问题。。。总共有两类事件：询问，以及斜率减小1 。按照时间给这些事件排序，然后按着时间线进行模拟即可。复杂度 $O((n+q)\log (n+q))$。当然了，这种做法是离线的，如果预处理斜率变化点，然后放进 <code>set</code> 里即可在线回答询问。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200020</span>;</span><br><span class="line"><span class="keyword">int</span> n, q;</span><br><span class="line">ll a[maxn], ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">event</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> tp;</span><br><span class="line">    ll t;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    event(<span class="keyword">char</span> ch, ll tim, <span class="keyword">int</span> d=<span class="number">0</span>): tp(ch), t(tim), id(d) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> event &amp;e) <span class="keyword">const</span> &#123; </span><br><span class="line">        <span class="keyword">return</span> t &lt; e.t;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">multiset</span>&lt;event&gt; line;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    rep(i, n) read(a[i]);</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        line.emplace(<span class="string">'S'</span>, a[i] - a[i - <span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    read(q);</span><br><span class="line">    rep(i, q) &#123;</span><br><span class="line">        <span class="keyword">int</span> l, r;</span><br><span class="line">        read(l, r);</span><br><span class="line">        line.emplace(<span class="string">'Q'</span>, r - l + <span class="number">1</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll cur = <span class="number">0</span>, sp = n, tim = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : line) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tim &lt; g.t) cur += sp * (g.t - tim), tim = g.t;</span><br><span class="line">        <span class="keyword">if</span>(g.tp == <span class="string">'Q'</span>) ans[g.id] = cur;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g.tp == <span class="string">'S'</span>) sp--;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, q) <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, ans[i], <span class="string">" \n"</span>[i==q]);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-E-贪心"><a href="#Prob-E-贪心" class="headerlink" title="Prob E. 贪心"></a>Prob E. 贪心</h2><p><b>题意</b>：给你边长为 $2^i$ 的边 $a_i$ 条（$0\leq i \leq n$），问最多可以摆出来多少个三角形。每条边最多只能用一次。</p><p><b>题解：</b> 显然，能组成三角形的无序三元组必然长这样： $(2^i,2^j,2^j) \text{ where } i \leq j$</p><p>考虑这样的贪心策略，在考虑长度为 $2^i$ 的边时（简称长边），记录有多少条边长小于 $2^i$  的边（简称短边）还没有用，然后尽量多地形成 (短, 长, 长) 这样的三角形，再之后尽量形成 (长, 长, 长) 这样的三角形，剩下没用完的长边数量加到短边数量里即可。对所有 $i$ 重复这个过程即可完成此题。其实写起来就几行，详细步骤见代码吧。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">303000</span>;</span><br><span class="line">ll a[maxn], n, tot = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    rep(i, n) read(a[i]);</span><br><span class="line">    ll left = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> cons = min(left, a[i] / <span class="number">2</span>);</span><br><span class="line">        tot += cons;</span><br><span class="line">        a[i] -= cons * <span class="number">2</span>;</span><br><span class="line">        left -= cons;</span><br><span class="line">        tot += a[i] / <span class="number">3</span>;</span><br><span class="line">        a[i] %= <span class="number">3</span>;</span><br><span class="line">        left += a[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tot);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-G-构造好题"><a href="#Prob-G-构造好题" class="headerlink" title="Prob G. 构造好题"></a>Prob G. 构造好题</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>你有 $n$ 个攻击力为 $1$ 的士兵，你需要把他们分成 $m$ 个兵团，来攻击 $m$ 个敌人，其中第 $i$ 个敌人的血量为 $hp_i$ 。你的攻击是分轮进行的，每一轮中，你都需要给你的每个兵团确定一个敌人作为目标，不妨设这一兵团共有 $x$ 人，那么作为目标的敌人的血量就会降低 $x​$ 点。一个敌人死亡当且仅当他的血量小于等于0，那么问你至少需要多少轮，才能把所有敌人都杀死，并输出攻击方案。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>每一轮攻击一共对敌人造成 $n$ 点伤害，一个很显然的轮数下界就是：<br>$$<br>ans \geq \left\lceil \frac{ \sum_{i=1}^m hp_i}{n} \right\rceil<br>$$<br>事实上，这个下界也能达到，下面叙述构造方法，感觉真的是脑洞大开。首先，这道题目的限制非常宽松，我们采用的策略有很大的余地，但是过于自由也给我们带来了无从下手的这种困境。我们首先来想一种易于实现的策略，使得问题的限制加强一些，然后来分析其可行性。我们想要有一种分配兵团的方案，使得下面的策略是最优的：</p><ul><li><p>我们按照顺序杀敌，即先击杀1号敌人，再击杀2号敌人…… </p></li><li><p>我们试图按照走马灯的方法对敌人进行攻击，即按照顺序考虑我们的兵团，若某个敌人没有死，则兵团攻击这个敌人；若这个敌人死了，那么兵团攻击下一个敌人。</p></li></ul><p>这两个策略可以描述为下面的代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">    <span class="keyword">while</span>(hp[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        hp[i] -= sz[p % m];</span><br><span class="line">        ans.push_back(i);</span><br><span class="line">        p++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种策略很好实现，可是它什么时候是最优的呢？当且仅当杀死 $1,2,\cdots,m-1$ 这些敌人时，刚好将他们的血量降为0 。设我们兵团的分配方案是第 $i$ 个兵团 $a_i​$ 人，记<br>$$<br>pre_k = \sum_{i=1}^k a_i<br>$$<br>那么，上面的条件就等价于：（ $k \in [1,m-1],p\in [1,m]​$ ）<br>$$<br>\forall k \text{ } \exists p \text{ 使得} \sum_{i=1}^k hp_i \equiv pre_p \pmod n<br>$$<br>这个东西怎么构造？这个东西其实就是随便构造呢。我们要使 $pre$ 数组出现所有 $hp$ 模 $n$ 的前缀和，一个显然的思路就是把 $\sum\limits_{i=1}^k hp_i \pmod n$ 全部求出来，然后排个序，得到 $sum$ 数组，然后就令 $pre_i = sum_i$ 即可 满足上面的条件。再差分一下就可以得到 $a​$ 数组了，至此，我们就构造完毕了，模拟一下上面的走马灯即可得到方案。</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>其实这道题除了下界比较好想之外，剩下的步骤都不好想，但是一旦看完题解，我就觉得原来这么简单。好的构造题正是这样啊！场上A出这道题的人真是神仙。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><p>稍微加了点IO优化，结果居然现在成了 Execution time 榜的榜首2333</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1020000</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, hp[maxn], tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sums, sz, ans;</span><br><span class="line">    read(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        read(hp[i]);</span><br><span class="line">        tot += hp[i];</span><br><span class="line">        <span class="keyword">if</span>(i != m - <span class="number">1</span>) </span><br><span class="line">            sums.push_back(tot % n);</span><br><span class="line">    &#125;</span><br><span class="line">    sums.push_back(<span class="number">0</span>);</span><br><span class="line">    sums.push_back(n);</span><br><span class="line">    sort(sums.begin(), sums.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i + <span class="number">1</span> &lt; <span class="keyword">int</span>(sums.size()); ++i)</span><br><span class="line">        sz.push_back(sums[i + <span class="number">1</span>] - sums[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, p = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(hp[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            hp[i] -= sz[p % m];</span><br><span class="line">            ans.push_back(i);</span><br><span class="line">            p++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(ans.size() % m != <span class="number">0</span>) ans.push_back(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, <span class="keyword">int</span>(ans.size()) / m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        write(sz[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(i+<span class="number">1</span>==m ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(ans.size()); ++i) &#123;</span><br><span class="line">        write(ans[i] + <span class="number">1</span>);</span><br><span class="line">        <span class="built_in">putchar</span>(i%m==m<span class="number">-1</span> ? <span class="string">'\n'</span> : <span class="string">' '</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:07&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:17&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:26&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:02&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3866&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3372&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2631&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1589&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1054&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;入门&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;思维&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DP&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;?&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;构造&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Easy+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;Hard&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Rank 260 /  3138&lt;/li&gt;
&lt;li&gt;Rating  &lt;font color=&quot;orange&quot;&gt;&lt;b&gt;2139 Master&lt;/b&gt;&lt;/font&gt;  (&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+59&lt;/b&gt;&lt;/font&gt;) 总算上橙了哈哈&lt;/li&gt;
&lt;li&gt;不过论做题体验来说，这一场的体验真的不怎么好。。。五个签到题，然后三个剩下的题只有个位数人通过。。。一看到 tourist 花了一个小时才AC掉F题，我瞬间就放弃治疗了。整场比赛就是靠着手速上的橙。&lt;/li&gt;
&lt;li&gt;G题是一道非常好的构造题。&lt;/li&gt;
&lt;li&gt;cyy 小号 rank 264，再随便打一场也要橙了&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
  </entry>
  
  <entry>
    <title>Comet OJ Contest #0 比赛报告</title>
    <link href="http://yoursite.com/2019/03/31/Comet-OJ-Contest-0-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/03/31/Comet-OJ-Contest-0-比赛报告/</id>
    <published>2019-03-31T15:49:15.000Z</published>
    <updated>2019-04-13T14:06:06.980Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:27</td><td style="text-align:center">02:21</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">AC</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+5</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="red"><b>*</b></font></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">312</td><td style="text-align:center">60</td><td style="text-align:center">34</td><td style="text-align:center">9</td><td style="text-align:center">6</td><td style="text-align:center">6</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">贪心</td><td style="text-align:center">概率</td><td style="text-align:center">图论</td><td style="text-align:center">DP</td><td style="text-align:center">?</td><td style="text-align:center">数学</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">948</font></td><td style="text-align:center"><font color="blue">2739</font></td><td style="text-align:center"><font color="blue">2733</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="red">3040</font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="red"><b>Hard</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center">★★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★★★</td></tr></tbody></table><p>这是当时参加Wannafly冬令营时使用的 Comet OJ 第一次举办的比赛，出题人是tangjz，感觉题目质量还挺不错，可以看到出题人、主办方都是挺用心的呢。</p><p>采用的是3小时的ACM赛制，然而罚时还是按照20min算的，A题有点不细心了，结果罚时就上了天 QAQ</p><p>比赛时写出了前两道题，Rank 52 out of 507，感觉海星。cyy也打了，Rank 45。</p><p>B题开始一直担心常数问题，害怕会T，但是这次比赛充分体现出了DP常数之小</p><p><a href="https://www.cometoj.com/contest/34" target="_blank" rel="noopener">比赛链接</a></p><p>UPD1：[2019-04-13] 补掉了F题，更新了F题代码。</p><a id="more"></a><h1 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h1><h2 id="Prob-A-数学，分类讨论"><a href="#Prob-A-数学，分类讨论" class="headerlink" title="Prob A. 数学，分类讨论"></a>Prob A. 数学，分类讨论</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>题意是求下面关于 $(x,y,z)$ 的方程的解的数目，以及对于所有解，求 $\sum\limits_{(x,y,z)}xyz$，参数 $n$ 已给定，无穷则输出 <code>infty</code>：<br>$$<br>\sqrt{x-\sqrt{n}} + \sqrt{y} - \sqrt{z} = 0<br>$$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>当 $n$ 是完全平方数时，答案为 <code>infty</code></li><li>否则，稍作变换即得到： $x-\sqrt{n} = z+y-\sqrt{4yz} \text{                               }(y&lt;z)$<ul><li>如果 $4\nmid n​$，则无解；</li><li>否则，枚举 $n/4$ 的每个因子 $d$（要求 $d\times d&lt;n/4$），则 $(d+\frac nd, d, \frac nd)$ 就是一组解，累加答案即可。</li></ul></li></ul><p>需要注意的一点是，这道题卡常数，不能用 <code>long long</code>，必须用 <code>unsigned int</code> 。</p><p>复杂度 $O(T\sqrt{n})$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> n, tot, mul = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = mul = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n == <span class="number">0</span>) &#123; <span class="built_in">puts</span>(<span class="string">"infty"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(ll v = <span class="built_in">sqrt</span>(n - <span class="number">1</span>); v * v &lt;= n; ++v) </span><br><span class="line">        <span class="keyword">if</span>(v * v == n) &#123; <span class="built_in">puts</span>(<span class="string">"infty"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">4</span> != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"0 0"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n /= <span class="number">4</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">unsigned</span> y = <span class="number">1</span>; y * y &lt;= n; ++y)  <span class="keyword">if</span>(n % y == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> z = n / y, x = y + z;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">44722</span> &amp;&amp; x * x &lt; n) <span class="keyword">continue</span>;</span><br><span class="line">        tot++;</span><br><span class="line">        mul = mul +  (<span class="number">1L</span>L * x * n % MOD);</span><br><span class="line">        mul %= MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%u %u\n"</span>, tot, mul);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> T; <span class="built_in">scanf</span>(<span class="string">"%u"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-B-概率，DP"><a href="#Prob-B-概率，DP" class="headerlink" title="Prob B. 概率，DP"></a>Prob B. 概率，DP</h2><p>这道题的DP转移是很显然的，但是细节略多。具体细节见代码吧。</p><p>复杂度 $O(\sum n^2m + nk)$</p><p>Bonus1：据说有 $O(nm\log n+n\log k) ​$ 的做法？不太会。</p><p>Bonus2：据说可以不用 $\sum n \leq1000, \sum m\leq 1000$ 的条件，cyy提了一个维护关于 $p, q$ 多项式的做法</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">505</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>);&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>)  x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv100 = inv(<span class="number">100</span>);</span><br><span class="line"><span class="keyword">int</span> dp[<span class="number">2</span>][maxn][maxn], n, m, k, p, q, r;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    read(n, m, k, p, q);</span><br><span class="line">    p = muln(p, inv100);</span><br><span class="line">    q = muln(q, inv100);</span><br><span class="line">    r = mo(<span class="number">1</span> + MOD-q + MOD-p);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> t = <span class="number">2</span>; t &lt;= m; ++t) &#123;</span><br><span class="line">        <span class="keyword">auto</span> c = dp[t &amp; <span class="number">1</span>], o = dp[(t<span class="number">-1</span>) &amp; <span class="number">1</span>];</span><br><span class="line">        c[<span class="number">1</span>][<span class="number">0</span>] = muln(o[<span class="number">1</span>][<span class="number">0</span>], r);</span><br><span class="line">        <span class="keyword">int</span> lim = min(t, n);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(t &lt;= n) &#123;</span><br><span class="line">            c[lim][<span class="number">0</span>] = muln(o[lim<span class="number">-1</span>][<span class="number">0</span>], p);</span><br><span class="line">            c[lim][lim<span class="number">-1</span>] = muln(o[lim<span class="number">-1</span>][lim<span class="number">-2</span>], q);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            c[lim][<span class="number">0</span>] = mo(o[lim][<span class="number">0</span>] + muln(o[lim<span class="number">-1</span>][<span class="number">0</span>], p));</span><br><span class="line">            c[lim][lim<span class="number">-1</span>] = mo(o[lim][lim<span class="number">-1</span>] + muln(o[lim<span class="number">-1</span>][lim<span class="number">-2</span>], q));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">2</span>; l &lt; lim; ++l) &#123;</span><br><span class="line">            c[l][<span class="number">0</span>] = mo(mo(muln(r, o[l][<span class="number">0</span>]) + muln(p, o[l<span class="number">-1</span>][<span class="number">0</span>]))) + muln(p, o[l][<span class="number">1</span>]);</span><br><span class="line">            c[l][l<span class="number">-1</span>] = mo(mo(muln(r, o[l][l<span class="number">-1</span>]) + muln(q, o[l<span class="number">-1</span>][l<span class="number">-2</span>])) + muln(q, o[l][l<span class="number">-2</span>]));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> v = <span class="number">1</span>; v &lt; l<span class="number">-1</span>; ++v) &#123;</span><br><span class="line">                c[l][v] = mo(mo(muln(r, o[l][v]) + muln(p, o[l][v+<span class="number">1</span>])) + muln(q, o[l][v<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, (*c)[<span class="number">505</span>] = dp[m &amp; <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; ++j) f = mo(f + c[i][j]);</span><br><span class="line">        ans = mo(ans + muln(qpow(i, k), f));</span><br><span class="line">    &#125;</span><br><span class="line">    ans = muln(ans, qpow(<span class="number">100</span>, m - <span class="number">1</span>));</span><br><span class="line">    write(ans), <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; read(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-C-图论，并查集，BCC"><a href="#Prob-C-图论，并查集，BCC" class="headerlink" title="Prob C. 图论，并查集，BCC"></a>Prob C. 图论，并查集，BCC</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>题意可以转化为下面的等价形式：</p><blockquote><p>在一个逐步加边的图中，问每一次加边之后，图中各个边双联通分量有多少对点两两可达。</p></blockquote><p>显然需要这么搞：</p><ul><li>用并查集维护连通性，如果加的边不在连通块里，则合并联通块，这很容易。</li><li>对于每个连通块，维护边双联通分量。这不可避免地需要解决合并两个边双联通分量的问题。</li></ul><p>到这一步就是这道题的难点了。究竟怎么合并边双呢？</p><p>一种想法，cyy提出这就是LCT进行动态缩点的裸题。可惜我不会LCT啊QAQ</p><p>实际上，标准做法十分清新自然。我们只需要把边以时间为权值求一下最小生成森林，然后再并查集暴力合并边双就好了。因为有了最小生成森林，树的形态就不会发生变化，直接暴力就可以了。</p><p>实现上需要注意这几个问题：</p><ul><li>如何用并查集暴力合并边双？可以注意到，边双在图中也是组成一棵树的。而任何一条非树边在边双树上都对应一条链，直接使用暴力求LCA的方法往上跳，边跳边缩就可以了，如边双图中的 <code>v</code> 跳到父节点 <code>pa[v]</code> 时，将 <code>v</code> 的信息合并到 <code>pa[v]</code> 上即可。</li><li>有关按秩合并。合并边双时，如果每次都是 <code>v</code> 合并到 <code>pa[v]</code> 上，复杂度可能会退化（因为数据毒瘤）。按秩合并在这道题其实不是特别自然，实现起来需要小心。（我没有按秩合并，加了个读入优化，1966ms/4000ms通过的）</li></ul><p>如果仔细实现，这道题的时间复杂度是 $O(n\alpha(n)+m)$</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><p>(106 lines, 2733 byte)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2002000</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mst[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; e;</span><br><span class="line"><span class="keyword">int</span> n, m, _x, _y, intree[maxn], fa[maxn], dep[maxn];</span><br><span class="line"></span><br><span class="line">ll ans, tot;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dsu</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> pa[maxn], sz[maxn];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">            pa[i] = i;</span><br><span class="line">            sz[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x == pa[x]) <span class="keyword">return</span> x;</span><br><span class="line">        <span class="keyword">return</span> pa[x] = find(pa[x]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> son, <span class="keyword">int</span> fat)</span> </span>&#123;</span><br><span class="line">        son = find(son), fat = find(fat);</span><br><span class="line">        <span class="keyword">if</span>(son == fat) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        ans -= <span class="number">1L</span>L * sz[son] * (sz[son] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        ans -= <span class="number">1L</span>L * sz[fat] * (sz[fat] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        sz[fat] += sz[son];</span><br><span class="line">        sz[son] = <span class="number">0</span>;</span><br><span class="line">        pa[son] = fat;</span><br><span class="line">        ans += <span class="number">1L</span>L * sz[fat] * (sz[fat] - <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> depth, <span class="keyword">int</span> fath)</span> </span>&#123;</span><br><span class="line">    fa[v] = fath, dep[v] = depth;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : mst[v]) <span class="keyword">if</span>(g != fath)</span><br><span class="line">        dfs(g, depth + <span class="number">1</span>, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">jump</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x = s.find(x), y = s.find(y);</span><br><span class="line">    <span class="keyword">while</span>(x != y) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[x] &lt; dep[y]) swap(x, y);</span><br><span class="line">        <span class="keyword">int</span> to = s.find(fa[x]);</span><br><span class="line">        assert(s.merge(x, to));</span><br><span class="line">        x = to;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, m);</span><br><span class="line">    s.init(n);</span><br><span class="line">    e.clear(); e.emplace_back(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">    rep(i, n) mst[i].clear();</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        read(_x, _y);</span><br><span class="line">        e.emplace_back(_x, _y);</span><br><span class="line">        <span class="keyword">if</span>(s.merge(_x, _y)) &#123;</span><br><span class="line">            intree[i] = <span class="literal">true</span>;</span><br><span class="line">            mst[_x].push_back(_y);</span><br><span class="line">            mst[_y].push_back(_x);</span><br><span class="line">        &#125; <span class="keyword">else</span> intree[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">20</span>));</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(!fa[i]) dfs(i, <span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    s.init(n);</span><br><span class="line">    ans = tot = <span class="number">0</span>;</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!intree[i]) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = e[i].first, y = e[i].second;</span><br><span class="line">            jump(x, y);</span><br><span class="line">        &#125;</span><br><span class="line">        tot ^= ans * i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, tot);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; read(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-F-数学，几何，状压dp"><a href="#Prob-F-数学，几何，状压dp" class="headerlink" title="Prob F. 数学，几何，状压dp"></a>Prob F. 数学，几何，状压dp</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>小象同学有 $n$ 根木棍。他想用其中的一些木棍摆成一些多边形的形状，使得这些多边形面积的乘积尽量大，你可以帮帮他吗？</p><p>这里要求每根木棍至多在一个多边形中被使用，这也意味着有些木棍可能不被使用。此外，在每个多边形中，不能存在两根木棍位于同一条直线上，换句话说，多边形的每条边应该对应恰好一根木棍。</p><p>注意，摆出的每个多边形应该由不严格相交的边组成，且多边形面积应该严格大于 $0$。若不能摆出任何一个多边形，则视多边形面积的乘积为 $0$。</p><p>$$<br>n\leq 12<br>$$</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>首先很容易看出，如果我们能够解决给出 $n$ 条边，求出这 $n$ 条边能围出多边形的最大面积，那么我们就预处理出所有边的子集，然后再枚举子集的子集状压 dp 即可完成此题。而这个问题怎么做呢？我们介绍两个结论：</p><p>首先是 $n$ 边形存在的条件，这个还算比较显然：<br>$$<br>\sum_{i=1}^n a_i &gt; 2 \times \max_{1\leq i\leq n}a_i<br>$$<br>而要使这个 $n​$ 边形面积最大，我们有下面的结论：</p><blockquote><p>面积最大的多边形是凸多边形，且是圆内接多边形，且这个圆的半径是唯一确定的。</p></blockquote><p><strong>证明</strong>： </p><p>这个结论可以用调整法得到，不妨尝试画一个半径为 $\frac 12 \max\{a_1,a_2,\cdots,a_m\}$ 的圆，将多边形的边依次对应到圆周上。那么：若多边形覆盖的周长总和超过一个圆周，则意味着半径不够大，通过增大半径可以得到圆心在多边形内的圆满足条件；若周长总和没有达到一个圆周，分两种情况考虑：那么也意味着半径不够大，但通过增大半径得到的圆对应的圆心会在多边形外部。</p><p>在这种构造多边形的方法里，多边形的面积等于圆的面积减去 $m$ 个弓型区域的面积。不妨留下这些弓型<br>区域并尝试改变多边形的形状，通过这样的调整可以枚举到这个边长集合对应的所有可能的凸多边形形<br>状。与此同时，圆被改变为周长固定的闭合图形，而在二维空间里，周长固定的闭合图形中面积最大的<br>就是圆，因此多边形面积最大时一定能够画出这样的圆，使得多边形的点都在圆周上。那么剩下的工作<br>便是二分确定唯一的半径 $R$，然后算出相应的多边形面积。</p><p><strong>注意：这个证明抄自tls题解，但是部分内容是有问题的！！！正确的调整方式请见代码！明天会更新正确证明</strong></p><p>其实这个多边形的边的顺序也是可以随意调换的。根据上面的证明方法，这个圆形的半径同样也是唯一确定的，使用二分搜索模拟上面的调整过程即可实现。</p><p>时间复杂度 $O(2^n \log \epsilon \cdot n + 3^n)$</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>这道题是很妙的一道题！感觉这个结论很具有普遍意义！</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = (<span class="number">1</span> &lt;&lt; <span class="number">12</span>) + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">double</span> eps = <span class="number">1e-9</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">double</span> PI = <span class="number">3.1415926535897932384626L</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">20</span>], full, fa[maxs];</span><br><span class="line"><span class="keyword">bool</span> valid[maxs];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">double</span> dp[maxs], area[maxs];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; way[maxs];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">calc</span><span class="params">(<span class="keyword">int</span> state)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, sz = e.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(state &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            e.push_back(a[i]);</span><br><span class="line">            tot += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    sz = e.size();</span><br><span class="line">    <span class="keyword">if</span>(tot &lt;= e.back() * <span class="number">2</span>) &#123;</span><br><span class="line">        valid[state] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    valid[state] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">bool</span> half = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> TooLarge = [&amp;](<span class="keyword">long</span> <span class="keyword">double</span> R) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> theta = <span class="number">0.0L</span>, f = R*R*<span class="number">2.0L</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; ++i)</span><br><span class="line">            theta += <span class="built_in">acos</span>((f - <span class="number">1.0L</span>*e[i]*e[i]) / f);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> last = <span class="built_in">acos</span>((f - <span class="number">1.0L</span>*e[sz<span class="number">-1</span>]*e[sz<span class="number">-1</span>]) / f);</span><br><span class="line">        <span class="keyword">if</span>(theta &lt;= PI) &#123; </span><br><span class="line">            half = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> theta - last &gt; <span class="number">0.0L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            half = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> theta + last &lt; <span class="number">2.0L</span> * PI;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> l = (<span class="keyword">long</span> <span class="keyword">double</span>)e.back() / <span class="number">2.0L</span>, r = <span class="number">10000</span>;</span><br><span class="line">    rep(i, <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> mid = (l + r) / <span class="number">2.0L</span>;</span><br><span class="line">        <span class="keyword">if</span>(TooLarge(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    TooLarge(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> sq = <span class="number">0.0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> p = (r + r + e[i]) / <span class="number">2.0L</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> triangle = sqrtl(p * (p-e[i])) * (p-r);</span><br><span class="line">        <span class="keyword">if</span>(i == sz - <span class="number">1</span> &amp;&amp; half) sq -= triangle;</span><br><span class="line">        <span class="keyword">else</span> sq += triangle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sq;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a, a + n);</span><br><span class="line">    full = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt;= full; ++S)</span><br><span class="line">        area[S] = calc(S);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> bestdp = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">int</span> choice = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt;= full; ++S) &#123;</span><br><span class="line">        dp[S] = area[S], fa[S] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> T = (S - <span class="number">1</span>) &amp; S; T; T = (T - <span class="number">1</span>) &amp; S) <span class="keyword">if</span>(valid[T]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[S] + eps &lt; dp[T] * dp[T ^ S]) &#123;</span><br><span class="line">                dp[S] = area[T] * dp[T ^ S];</span><br><span class="line">                fa[S] = S ^ T;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dp[S] &gt; bestdp + eps) &#123;</span><br><span class="line">            bestdp = dp[S];</span><br><span class="line">            choice = S;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.12Lf\n"</span>, bestdp);</span><br><span class="line">    <span class="keyword">int</span> S = choice, tmp = choice, cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(tmp) tmp = fa[tmp], cnt++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(S) &#123;</span><br><span class="line">        <span class="keyword">int</span> cho = S ^ fa[S];</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; polygon;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            <span class="keyword">if</span>(cho &gt;&gt; i &amp; <span class="number">1</span>) polygon.push_back(a[i]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, <span class="keyword">int</span>(polygon.size()));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : polygon) <span class="built_in">printf</span>(<span class="string">" %d"</span>, g);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">        S = fa[S];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="官方题解"><a href="#官方题解" class="headerlink" title="官方题解"></a>官方题解</h2><p><a href="https://yang2002.github.io/2019/03/31/Comet-OJ-Contest-0-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/cometoj_tutorial.pdf" target="_blank" rel="noopener">题解下载链接</a></p><div class="row">    <embed src="cometoj_tutorial.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:27&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;02:21&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+5&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;312&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;60&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;34&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;概率&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;图论&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DP&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;?&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;数学&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;948&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;2739&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;2733&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;3040&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;Hard&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★★&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这是当时参加Wannafly冬令营时使用的 Comet OJ 第一次举办的比赛，出题人是tangjz，感觉题目质量还挺不错，可以看到出题人、主办方都是挺用心的呢。&lt;/p&gt;
&lt;p&gt;采用的是3小时的ACM赛制，然而罚时还是按照20min算的，A题有点不细心了，结果罚时就上了天 QAQ&lt;/p&gt;
&lt;p&gt;比赛时写出了前两道题，Rank 52 out of 507，感觉海星。cyy也打了，Rank 45。&lt;/p&gt;
&lt;p&gt;B题开始一直担心常数问题，害怕会T，但是这次比赛充分体现出了DP常数之小&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cometoj.com/contest/34&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;UPD1：[2019-04-13] 补掉了F题，更新了F题代码。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="概率与期望" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/"/>
    
      <category term="Comet OJ" scheme="http://yoursite.com/tags/Comet-OJ/"/>
    
      <category term="边双联通分量" scheme="http://yoursite.com/tags/%E8%BE%B9%E5%8F%8C%E8%81%94%E9%80%9A%E5%88%86%E9%87%8F/"/>
    
      <category term="数学结论" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E7%BB%93%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder ExaWizards 2019 比赛报告</title>
    <link href="http://yoursite.com/2019/03/31/AtCoder-ExaWizards-2019-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/03/31/AtCoder-ExaWizards-2019-比赛报告/</id>
    <published>2019-03-31T15:48:51.000Z</published>
    <updated>2019-04-05T16:51:05.809Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:01</td><td style="text-align:center">00:03</td><td style="text-align:center"><font color="red">(0)</font></td><td style="text-align:center">01:15</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">3132</td><td style="text-align:center">3081</td><td style="text-align:center">469</td><td style="text-align:center">227</td><td style="text-align:center">134</td><td style="text-align:center">14</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">入门</td><td style="text-align:center">入门</td><td style="text-align:center">思维</td><td style="text-align:center">DP</td><td style="text-align:center">概率</td><td style="text-align:center">?</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="green">Easy-</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★★</td><td style="text-align:center">★★</td><td style="text-align:center">★★</td><td style="text-align:center"></td></tr></tbody></table><ul><li>Rank 245 /  3138</li><li>Performance 2073，感觉海星</li><li>Rating 1442 (<font color="green"><b>+254</b></font>)  <font color="cyan"><b>Specialist</b></font></li><li>再次感受到 AtCoder 的凶残，AB就是入门题，然后两题和三题之间的难度鸿沟简直无敌</li><li>看来我是打不破AtCoder比赛过不了C题的魔咒了。。。D都AC了，C题还不会做</li><li>D题我的DP复杂度不是最优秀的，但是因为常数小，也通过了。</li><li>E题是挺简单的一道概率题，场上没看，有点可惜了。</li></ul><a id="more"></a><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Prob-C-思维"><a href="#Prob-C-思维" class="headerlink" title="Prob C. 思维"></a>Prob C. 思维</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>一个核心的观察就是，无论怎么喊口令，人之间的相对顺序是不改变的。因此只需要维护最左边和最右边未出界的人的编号就可以了，换句话说，逆着时间序，并且反着处理口令，设最左边出界处有一个人，就是看这个人最远能到哪；最右边有个人，看他最左能到哪。然后减一下就好了。</p><p>时间复杂度 $O(n+q)$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, lb, rb;</span><br><span class="line"><span class="keyword">char</span> s[maxn], t[maxn], d[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d\n%s\n"</span>, &amp;n, &amp;q, s + <span class="number">1</span>);</span><br><span class="line">    lb = <span class="number">0</span>, rb = n + <span class="number">1</span>; <span class="comment">// (lb, rb) available</span></span><br><span class="line">    rep(i, q) <span class="built_in">scanf</span>(<span class="string">"%c %c\n"</span>, &amp;t[i], &amp;d[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = q; i ; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[lb+<span class="number">1</span>]==t[i] &amp;&amp; d[i]==<span class="string">'L'</span>) lb++;</span><br><span class="line">        <span class="keyword">if</span>(s[rb<span class="number">-1</span>]==t[i] &amp;&amp; d[i]==<span class="string">'R'</span>) rb--;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(s[lb]==t[i] &amp;&amp; d[i]==<span class="string">'R'</span>) lb--;</span><br><span class="line">        <span class="keyword">if</span>(s[rb]==t[i] &amp;&amp; d[i]==<span class="string">'L'</span>) rb++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, rb - lb - <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-D-dp，好题"><a href="#Prob-D-dp，好题" class="headerlink" title="Prob D. dp，好题"></a>Prob D. dp，好题</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>你有 $n$ 个大小不超过 $1\cdot 10^5$ 的模数，以及一个不超过 $1\cdot 10^5$ 的数 $x$ 。你现在考虑这 $n$ 个模数的所有 $n!$ 中排列 $p_1,p_2,\cdots,p_n$，求 $x\bmod p_1\bmod p_2\cdots\bmod p_n$ 的和。即：</p><h3 id="Observation"><a href="#Observation" class="headerlink" title="Observation"></a>Observation</h3><p>核心观察是当 $x$ 模一个小数之后，模大数会变得没有效果。因此这启发我们把模数数组从大到小排序。令 $dp[p][v]$ 为考虑过 $a[1],a[2],\cdots,a[p]$ 这些模数之后， $x$ 变为 $v$ 的方案数。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>考虑直接暴力实现上述过程。</p><p>刷表法，直接朴素枚举每种状态下一步放在哪里。预处理阶乘之后，复杂度 $O(n^2m)$，不是特别好写。稍微加了一个优化，就是不考虑无需计算的状态，然后就过了。（458 ms）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"><span class="keyword">int</span> n, s, a[<span class="number">202</span>], dp[<span class="number">202</span>][<span class="number">102000</span>], fac[<span class="number">222</span>] = &#123;<span class="number">1</span>&#125;, ifac[<span class="number">222</span>] = &#123;<span class="number">1</span>&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; valid[<span class="number">202</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;102000&gt; vis[<span class="number">202</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">P</span><span class="params">(<span class="keyword">int</span> N, <span class="keyword">int</span> M)</span> </span>&#123; <span class="keyword">return</span> muln(fac[N], ifac[N-M]); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;s);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">200</span>; ++i) &#123;</span><br><span class="line">        fac[i] = muln(fac[i - <span class="number">1</span>], i);</span><br><span class="line">        ifac[i] = inv(fac[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    dp[<span class="number">0</span>][s] = <span class="number">1</span>;</span><br><span class="line">    valid[<span class="number">0</span>].push_back(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : valid[i]) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = i + <span class="number">1</span>; k &lt;= n; ++k) &#123;</span><br><span class="line">                dp[k][j % a[k]] += muln(dp[i][j], P(n-i<span class="number">-1</span>, k-i<span class="number">-1</span>));</span><br><span class="line">                dp[k][j % a[k]] %= MOD;</span><br><span class="line">                <span class="keyword">if</span>(!vis[k][j%a[k]]) &#123;</span><br><span class="line">                    vis[k][j%a[k]] = <span class="literal">true</span>;</span><br><span class="line">                    valid[k].push_back(j % a[k]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= s; ++i) res = (res + <span class="number">1L</span>L * i * dp[n][i] % MOD) % MOD;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-E-概率，数学"><a href="#Prob-E-概率，数学" class="headerlink" title="Prob E. 概率，数学"></a>Prob E. 概率，数学</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type int</span></span><br><span class="line"><span class="keyword">const</span> Type MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">namespace</span> ModOp &#123;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Type <span class="title">mo</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MF</span> &#123;</span></span><br><span class="line">        Type v;</span><br><span class="line">        MF(Type x = <span class="number">0</span>): v(mo(x)) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">Type</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> + (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v + f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v - f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> * (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">1L</span>L * v * f.v % MOD; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> / (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v / f.v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - () <span class="keyword">const</span> &#123; <span class="keyword">return</span> MOD - v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &gt;&gt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;&gt; idx; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;&lt; idx; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v == f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v != f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out, MF f) &#123; <span class="keyword">return</span> out &lt;&lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, MF f) &#123; <span class="keyword">return</span> in &gt;&gt; f.v; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v) != <span class="number">-1</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"%d"</span>, v); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">qpow</span><span class="params">(T x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    T ret = T(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> ModOp::MF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>, N = <span class="number">200000</span>;</span><br><span class="line">MF fac[maxn], ifac[maxn], onlyb[maxn], onlyw[maxn];</span><br><span class="line"><span class="function">MF <span class="title">C</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; y) <span class="keyword">return</span> MF(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> fac[x] * ifac[y] * ifac[x - y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> b, w;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = MF(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        fac[i] = fac[i - <span class="number">1</span>] * MF(i);</span><br><span class="line">        ifac[i] = qpow(fac[i], MOD - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;b, &amp;w);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= b + w; ++i) &#123;</span><br><span class="line">        onlyb[i] = onlyb[i - <span class="number">1</span>] + C(i<span class="number">-1</span>, w<span class="number">-1</span>) * qpow(MF(<span class="number">2</span>), MOD<span class="number">-1</span>-i);</span><br><span class="line">        onlyw[i] = onlyw[i - <span class="number">1</span>] + C(i<span class="number">-1</span>, b<span class="number">-1</span>) * qpow(MF(<span class="number">2</span>), MOD<span class="number">-1</span>-i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; b + w; ++i) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; (MF(<span class="number">1</span>) + onlyb[i] - onlyw[i]) * qpow(MF(<span class="number">2</span>), MOD - <span class="number">2</span>) &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:01&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:03&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(0)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:15&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3132&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3081&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;469&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;227&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;134&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;入门&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;入门&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;思维&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DP&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;概率&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;?&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Rank 245 /  3138&lt;/li&gt;
&lt;li&gt;Performance 2073，感觉海星&lt;/li&gt;
&lt;li&gt;Rating 1442 (&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+254&lt;/b&gt;&lt;/font&gt;)  &lt;font color=&quot;cyan&quot;&gt;&lt;b&gt;Specialist&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;再次感受到 AtCoder 的凶残，AB就是入门题，然后两题和三题之间的难度鸿沟简直无敌&lt;/li&gt;
&lt;li&gt;看来我是打不破AtCoder比赛过不了C题的魔咒了。。。D都AC了，C题还不会做&lt;/li&gt;
&lt;li&gt;D题我的DP复杂度不是最优秀的，但是因为常数小，也通过了。&lt;/li&gt;
&lt;li&gt;E题是挺简单的一道概率题，场上没看，有点可惜了。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="AtCoder" scheme="http://yoursite.com/tags/AtCoder/"/>
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="概率" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Grand Contest 032 比赛总结</title>
    <link href="http://yoursite.com/2019/03/26/AtCoder-Grand-Contest-032-%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/03/26/AtCoder-Grand-Contest-032-比赛总结/</id>
    <published>2019-03-26T01:09:33.000Z</published>
    <updated>2019-04-21T15:58:45.003Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><h2 id="Status"><a href="#Status" class="headerlink" title="Status"></a>Status</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:13</td><td style="text-align:center">00:57</td><td style="text-align:center"><font color="red">(2)</font></td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">*2</td><td style="text-align:center">*</td><td style="text-align:center">*</td><td style="text-align:center">*</td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">1222</td><td style="text-align:center">894</td><td style="text-align:center">197</td><td style="text-align:center">111</td><td style="text-align:center">21</td><td style="text-align:center">4</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">贪心</td><td style="text-align:center">构造</td><td style="text-align:center">图论</td><td style="text-align:center">DP</td><td style="text-align:center">二分</td><td style="text-align:center">概率</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="green">Easy</font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue"><b>Mid+</b></font></td><td style="text-align:center"><font color="blue"><b>Mid+</b></font></td><td style="text-align:center"><font color="red"><b>Hard</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center">★★</td><td style="text-align:center">★★</td><td style="text-align:center">★★★★</td></tr></tbody></table><ul><li>Rank 413 /  1645</li><li>Upsolved <code>6/6</code>，题目已经全部补完。</li><li>Performance 1849，打炸了啊</li><li>Rating 1188 (+368), <font color="green"><b>Pupil</b></font></li><li>C题有挺多小情况的，没在场上写出来，挺可惜的。</li><li>D题是一步很有趣的模型转化</li><li>F题是概率期望的超级好题。</li></ul><p>这次比赛AtCoder的官方题解是真的良心！我会在博文末尾附上官方题解的PDF的，可以对照阅读。</p><p>P.S. 以后题解Overview的表格里面会附带推荐程度、代码难度</p><p>[UPD 2019.4.21] 补掉了F题，题解将会单独写一篇博客。</p><a id="more"></a><p><a href="https://blog.csdn.net/qq_39972971/article/details/88824698" target="_blank" rel="noopener">cz_xuyixuan的题解</a></p><p><a href="https://blog.csdn.net/corsica6/article/details/88926902" target="_blank" rel="noopener">ccosi的题解</a></p><p><a href="https://www.guokr.com/question/468732/" target="_blank" rel="noopener">F题果壳网上的优质回答</a></p><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><p>开场看了A题，马上想到了贪心的正确性，13分钟1A了。</p><p>之后看了B题，发现是比较擅长的构造，但是这么一个挺简单的题却让我懵逼了老半天，快到1小时的时候才A掉，花的时间有点多了。</p><p>C题开始看了没什么思路，顺便把D也看了，感觉就是一个DP，但是有C题挡着，又静不下心来想。仔细分析了一下，发现是可做的，讨论了几种情况，交上去却还是WA了。比赛本来就快要结束了，结果发现有一种讨论写挂了，可是要改也来不及了，于是就GG了。</p><h1 id="Tutorial"><a href="#Tutorial" class="headerlink" title="Tutorial"></a>Tutorial</h1><h2 id="Prob-A-贪心"><a href="#Prob-A-贪心" class="headerlink" title="Prob. A 贪心"></a>Prob. A 贪心</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>贪心策略是：我们寻找最右边的能被移走的球。如果找不到，则一定无解；否则，我们就把这个球移走。显然，如果我们不这么干，最右边的球将无法被移走。</p><p>时间复杂度：$O(n^3)$，稍加优化即可 $O(n^2)$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">13000</span>;</span><br><span class="line"><span class="keyword">int</span> n, _x;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">extend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = a.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = sz - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i] == i + <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt; sz - <span class="number">1</span>; ++j)</span><br><span class="line">                swap(a[j], a[j + <span class="number">1</span>]);</span><br><span class="line">            a.pop_back();</span><br><span class="line">            ans.push_back(i + <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_x), a.push_back(_x);</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(!extend()) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ans.begin(), ans.end());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, g);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-B-构造"><a href="#Prob-B-构造" class="headerlink" title="Prob. B 构造"></a>Prob. B 构造</h2><h3 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h3><p>你需要构造这样一个 $n$ 个顶点，顶点标号分别是 $1,2,\cdots,n$ 的图，满足下面的条件：</p><ul><li>这个图是连通图</li><li>对于每个顶点来说，它相邻所有顶点的标号加起来的值是相等的。</li></ul><h3 id="Thinking"><a href="#Thinking" class="headerlink" title="Thinking"></a>Thinking</h3><p>感觉还是我一直想通过构造小情况的方案，从而归纳出通用的构造方案。构造4条边的方案时，我构造出了蝴蝶形，发现它是一个正则图（即每个点度数都恰好相等），由此找到了归纳构造顶点数为 $4n$ 的方法。可是还有很多情况构造不出来呢！我就陷入了自闭状态。仔细看看这种归纳构造的图的性质吧，结果我发现，我构造的就是完全二分图。这么做的思想是把顶点分成两堆，这两堆点的权值之和相同。这个思想完全可以推广！我们可以把顶点分成内部点的权值之和相同的 $m$ 堆，然后每一个点都和与它不在同一堆的所有点都进行连线。这启发我们根据顶点数的奇偶性，进行如下的构造：</p><ul><li>当n是奇数时，分成这么 $(n+1)/2$ 组：{1,n-1}, {2,n-2}, …, {(n-1)/2,(n+1)/2}, {n}</li><li>当n是偶数时，分成这么 $n/2$ 组：{1, n}, {2, n-1}, …, {n/2, n/2 + 1}</li></ul><p>时间复杂度 $O(n)$</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; gp[<span class="number">300</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">if</span>(n &amp; <span class="number">1</span>) gp[++tot].push_back(n), n--;</span><br><span class="line">    <span class="keyword">int</span> hf = n / <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= hf; ++i) &#123;</span><br><span class="line">        gp[++tot].push_back(i);</span><br><span class="line">        gp[tot].push_back(n + <span class="number">1</span> - i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt; pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; &gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= tot; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> u : gp[i]) <span class="keyword">for</span>(<span class="keyword">auto</span> v : gp[j])</span><br><span class="line">                ans.emplace_back(u, v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans) <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, g.first, g.second);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-C-分类讨论，欧拉回路"><a href="#Prob-C-分类讨论，欧拉回路" class="headerlink" title="Prob. C 分类讨论，欧拉回路"></a>Prob. C 分类讨论，欧拉回路</h2><h3 id="Statement-1"><a href="#Statement-1" class="headerlink" title="Statement"></a>Statement</h3><p>你需要判断这件事情：</p><p>给定一个无向连通简单图，是否可以将它的边集划分为三个部分，使得每一部分都能组成图中的一条欧拉回路？（这里的组成欧拉回路是指顶点可以重复经过，但是边只能经过一次）</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><ul><li>首先根据每个点度数是否都是偶数，判断这个图存不存在一个欧拉回路，答案是 <code>No</code><ul><li>然后，如果存在度数大于4的点，那么一定存在至少三条欧拉回路，答案是 <code>Yes</code></li></ul></li><li>现在我们只需要讨论只含有度数为2或4的图了。<ul><li>如果度数为4的顶点超过3个，那么答案是 <code>Yes</code></li><li>如果度数为4的顶点恰为2个，这个情况就比较特殊了。把度数为2的点缩起来，我们需要找到这两个顶点之间路径条数 $x$，这两个顶点的自环个数 $y$，判断 $x/2+y$ 和3的大小关系。</li><li>如果度数为4的点不超过1个，那么一定最多 2 条欧拉回路，答案是<code>No</code></li></ul></li></ul><p>时间复杂度 $O(n)$。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, _x, _y, deg[maxn], cnt;</span><br><span class="line"><span class="keyword">int</span> u = <span class="number">-1</span>, v = <span class="number">-1</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[a]) <span class="keyword">if</span>(g != fa) &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[g] == <span class="number">2</span>) dfs(g, a);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g == u) cnt += <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(g == v) cnt += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> assert(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, m);</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        read(_x, _y);</span><br><span class="line">        deg[_x]++;</span><br><span class="line">        deg[_y]++;</span><br><span class="line">        G[_x].push_back(_y);</span><br><span class="line">        G[_y].push_back(_x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[i] &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(deg[i] &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> ok = <span class="number">0</span>;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(deg[i] == <span class="number">4</span>) ok++;</span><br><span class="line">    <span class="keyword">if</span>(ok == <span class="number">0</span>) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ok &gt; <span class="number">2</span>) &#123; <span class="built_in">puts</span>(<span class="string">"Yes"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(ok == <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        rep(i, n) <span class="keyword">if</span>(deg[i] == <span class="number">4</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(u == <span class="number">-1</span>) u = i;</span><br><span class="line">            <span class="keyword">else</span> v = i;</span><br><span class="line">        &#125;</span><br><span class="line">        dfs(u, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">if</span>(cnt &gt; <span class="number">5</span>) <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-D-DP"><a href="#Prob-D-DP" class="headerlink" title="Prob. D DP"></a>Prob. D DP</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>这道题的第一步就非常不好想啊！这个思想还是非常有意思的：我们可以认为每个点坐标可以移动到任何实数，而我们根据初末状态来决定花费：如果点落在原位置左边，那么花费B；落在右边花费A；落在中间无花费。</p><p>发现了这个等价转化之后，问题就变得非常简单。我们按照 $1,2,\cdots,n$ 的顺序进行dp，那么每个数移动到的新位置就是递增的。设 $dp[i][j]$  表示已经考虑过 $1,2,\cdots,i$ 这么些数，且 $i$ 这个数放在了 $[j-1,j)$ 这个区间里的最小花费，那么有：<br>$$<br>dp[i+1][j] = \begin{cases}<br>dp[i][j] &amp; j = f[i+1]\\<br>dp[i][j]+A &amp; j&gt;f[i+1]\\<br>dp[i][j]+B &amp; j &lt; f[i+1]<br>\end{cases}<br>$$<br>时间复杂度 $O(n^2)$。</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5500</span>;</span><br><span class="line">ll dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> n, A, B, p[maxn], f[maxn];</span><br><span class="line"><span class="comment">// A: right, B: left</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(ll&amp; x, ll y)</span> </span>&#123; x = min(x, y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;A, &amp;B);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]), f[p[i]] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">memset</span>(dp[<span class="number">0</span>], <span class="number">0</span>, <span class="keyword">sizeof</span>(dp[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;    </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) dp[i][j] = min(dp[i][j<span class="number">-1</span>], dp[i][j]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j) &#123; <span class="comment">// [0, j)</span></span><br><span class="line">            <span class="keyword">if</span>(j == f[i+<span class="number">1</span>]) upd(dp[i+<span class="number">1</span>][j], dp[i][j]);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &gt; f[i+<span class="number">1</span>]) upd(dp[i+<span class="number">1</span>][j], dp[i][j] + A);</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j &lt; f[i+<span class="number">1</span>]) upd(dp[i+<span class="number">1</span>][j], dp[i][j] + B);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) dp[n][i] = min(dp[n][i<span class="number">-1</span>], dp[n][i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[n][n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-E-二分，贪心，思维"><a href="#Prob-E-二分，贪心，思维" class="headerlink" title="Prob E. 二分，贪心，思维"></a>Prob E. 二分，贪心，思维</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你 $M$ 和 $2n$ 个数 $a_1,a_2\cdots,a_{2n}$ ，你需要把这 $2n$ 个数配成 $n$ 对 $(x_i,y_i) \text{ for }i=1,2,\cdots,n$，使得下面的数取最小值：<br>$$<br>\max_{1\leq i\leq n}\left[(x_i+y_i)\bmod M\right]<br>$$</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>见官方题解吧，官方题解真的很清楚。</p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>;</span><br><span class="line">ll a[maxn], n, m;</span><br><span class="line">ll ans = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    assert((n - x) % <span class="number">2</span> == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = x + <span class="number">1</span>, r = n; l &lt; r; l++, r--) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[l] + a[r] &lt; m) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        res = max(res, a[l] + a[r] - m);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> l = <span class="number">1</span>, r = x; l &lt; r; l++, r--) &#123;</span><br><span class="line">        res = max(res, a[l] + a[r]);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = min(ans, res);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    n &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = n;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>((n - mid) &amp; <span class="number">1</span>) mid--;</span><br><span class="line">        <span class="keyword">if</span>(judge(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    judge(l);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-F-概率期望，超级好题"><a href="#Prob-F-概率期望，超级好题" class="headerlink" title="Prob F. 概率期望，超级好题"></a>Prob F. 概率期望，超级好题</h2><p>这道题我会专门写题解，链接<a href="[http://yang2002.github.io/2019/04/21/%E4%BB%8EAGC032F%E8%B0%88%E4%B8%80%E7%B1%BB%E6%A6%82%E7%8E%87%E6%9C%9F%E6%9C%9B%E9%97%AE%E9%A2%98/](http://localhost:4000/2019/04/21/从AGC032F谈一类概率期望问题/">在这里</a>)。这道题的结论是：<br>$$<br>ans = \sum_{i=1}^m \frac{1}{3^i \cdot n(n-i+1)}<br>$$<br><a href="https://www.guokr.com/question/468732/" target="_blank" rel="noopener">F题果壳网上的优质回答</a></p><p><a href="http://clatisus.com/2015-2016 Petrozavodsk Winter Training Camp, Moscow SU Trinity Contest" target="_blank" rel="noopener">2015-2016 Petrozavodsk Winter Training Camp, Moscow SU Trinity Contest</a></p><p>代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>, maxn = <span class="number">1020000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x  * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"><span class="keyword">int</span> n, ans, i3 = inv(<span class="number">3</span>), in, p3 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    in = inv(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        p3 = muln(p3, i3);</span><br><span class="line">        ans += muln(p3, muln(in, inv(n - i + <span class="number">1</span>)));</span><br><span class="line">        <span class="keyword">if</span>(ans &gt;= MOD) ans -= MOD; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附录：官方题解"><a href="#附录：官方题解" class="headerlink" title="附录：官方题解"></a>附录：官方题解</h1><p><a href="https://yang2002.github.io/2019/03/26/AtCoder-Grand-Contest-032-%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/AGC032-Editorial.pdf" target="_blank" rel="noopener">题解下载链接</a></p><div class="row">    <embed src="AGC032-Editorial.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;h2 id=&quot;Status&quot;&gt;&lt;a href=&quot;#Status&quot; class=&quot;headerlink&quot; title=&quot;Status&quot;&gt;&lt;/a&gt;Status&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:13&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:57&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(2)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1222&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;894&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;197&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;111&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;21&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;构造&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;图论&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;DP&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;二分&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;概率&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;&lt;b&gt;Mid+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;&lt;b&gt;Mid+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;Hard&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★★★&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Rank 413 /  1645&lt;/li&gt;
&lt;li&gt;Upsolved &lt;code&gt;6/6&lt;/code&gt;，题目已经全部补完。&lt;/li&gt;
&lt;li&gt;Performance 1849，打炸了啊&lt;/li&gt;
&lt;li&gt;Rating 1188 (+368), &lt;font color=&quot;green&quot;&gt;&lt;b&gt;Pupil&lt;/b&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;C题有挺多小情况的，没在场上写出来，挺可惜的。&lt;/li&gt;
&lt;li&gt;D题是一步很有趣的模型转化&lt;/li&gt;
&lt;li&gt;F题是概率期望的超级好题。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次比赛AtCoder的官方题解是真的良心！我会在博文末尾附上官方题解的PDF的，可以对照阅读。&lt;/p&gt;
&lt;p&gt;P.S. 以后题解Overview的表格里面会附带推荐程度、代码难度&lt;/p&gt;
&lt;p&gt;[UPD 2019.4.21] 补掉了F题，题解将会单独写一篇博客。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="AtCoder" scheme="http://yoursite.com/tags/AtCoder/"/>
    
      <category term="思维" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4/"/>
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
      <category term="贪心" scheme="http://yoursite.com/tags/%E8%B4%AA%E5%BF%83/"/>
    
      <category term="欧拉回路" scheme="http://yoursite.com/tags/%E6%AC%A7%E6%8B%89%E5%9B%9E%E8%B7%AF/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="概率与期望" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E4%B8%8E%E6%9C%9F%E6%9C%9B/"/>
    
  </entry>
  
  <entry>
    <title>数论之旅1：同余方程</title>
    <link href="http://yoursite.com/2019/03/19/%E6%95%B0%E8%AE%BA%E4%B9%8B%E6%97%85%E4%B9%8B%E5%90%8C%E4%BD%99%E6%96%B9%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/19/数论之旅之同余方程/</id>
    <published>2019-03-19T11:13:14.000Z</published>
    <updated>2019-03-23T11:37:03.079Z</updated>
    
    <content type="html"><![CDATA[<p>最近我一直在刷潘承洞、潘承彪的《初等数论》，感觉还是学到了不少东西呢。从现在我就来做一个数论之旅系列专题笔记吧，顺便也记录一下我的学习历程。</p><p>这一次笔记对应的是《初等数论》第四章同余方程 4.5 到 4.9 的内容，主要介绍<strong>二次剩余理论，包括欧拉判别法，勒让德符号，二次互反律，雅克比符号</strong>等，以及高次同余方程简介，给出了 $n$ 次剩余的判别公式。</p><p>在开始之前约定一下我的记号吧。未经说明的任何字母都代表自然数，小写字母 $p$ 始终代表奇素数，而大写的 $P​$ 则不一定。</p><a id="more"></a><h1 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h1><h2 id="知识与定理"><a href="#知识与定理" class="headerlink" title="知识与定理"></a>知识与定理</h2><p>首先我们最初是想要解决二次同余方程 $ax^2+bx+c\equiv 0\pmod p$ 。我们经过配方等操作之后，可以发现这种方程化简之后唯一不平凡的形式就是 $x^2\equiv d \pmod p$ 这个样子。这个形式看似简单，不就是模意义下开根号么，可是里面藏着不少玄机。我们先给出一些定义：</p><p>模素数的二次剩余、二次非剩余的定义：</p><ul><li>若关于 $x$ 的同余方程 $x^2\equiv d \pmod p$ 有解（$p\nmid d$），则称 $d$ 是模 $p$ 的二次剩余；</li><li>否则，称 $d$ 是模 $p$ 的二次非剩余。</li></ul><p>注意：我们一般不谈 $\pmod 2$  的二次剩余，也不谈 $0$ 是不是二次剩余。</p><p>显然，$\pmod p$ 的二次剩余一共有 $\frac{p-1}{2}$ 个，且方程 $x^2\equiv d \pmod p$ 要么无解，要么恰好有两个解。</p><h3 id="欧拉判别法"><a href="#欧拉判别法" class="headerlink" title="欧拉判别法"></a>欧拉判别法</h3><blockquote><p>设素数 $p&gt;2, p\nmid d$ ，那么，$d$ 是模 $p$ 的二次剩余的充分必要条件是：<br>$$<br>d^{(p-1)/2} \equiv 1 \pmod p<br>$$<br>$d$ 是模 $p$ 的二次非剩余的充分必要条件是：<br>$$<br>d^{(p-1)/2} \equiv -1 \pmod p<br>$$</p></blockquote><p>这个定理是一个比较重要的定理，我们可以轻易在 $O(\log p)$ 的时间内计算出一个数是不是二次剩余，而在大部分ACM竞赛中对于二次剩余也只需要了解这么多。这个地方我暂时不给出证明，以后提到的原根之后，我们将给出一种统一的证明方式，这种证法同时能证明之后提到的 $n$ 次剩余的结论。</p><p>由欧拉判别法，根据其只有-1，1这两种取值特点，结合乘方的性质，我们可以很轻易地发现下面的性质：</p><ul><li>二次剩余 $\times$ 二次剩余 = 二次剩余</li><li>二次剩余 $\times$ 二次非剩余 = 二次非剩余</li><li>二次非剩余 $\times$ 二次非剩余 = 二次剩余</li></ul><p>模 $p​$ 意义下，这种二次剩余的关系满足一种积性性质！那么，我们就引入一种一种完全积性函数来表示二次剩余吧，由此勒让德符号应运而生。</p><h3 id="勒让德符号"><a href="#勒让德符号" class="headerlink" title="勒让德符号"></a>勒让德符号</h3><blockquote><p>定义整变量 $d$ 的函数（ $p$ 是素数）<br>$$<br>\left(\frac{d}{p}\right) =<br>\begin{cases}<br>1 &amp; \text{d是模p的二次剩余} \\<br>-1 &amp; \text{d是模p的二次非剩余}\\<br>0 &amp; p\mid d<br>\end{cases}<br>$$<br>我们把 $\left(\frac{d}{p}\right)​$ 称为模 $p​$ 的勒让德符号。</p></blockquote><p>勒让德符号满足下面的性质:</p><ul><li>$\left(\frac dp \right) = \left( \frac{p+d}{p}\right)$ ；即：勒让德符号有周期性。</li><li>$\left(\frac{d}{p}\right) \equiv d^{(p-1)/2} \pmod p$ 这是因为欧拉判别法</li><li>$\left(\frac{dc}{p}\right) = \left(\frac{d}{p}\right) \left(\frac{c}{p}\right)$</li></ul><p>有了第一、第三点，我们称勒让德符号是模 $p$ 的Dirichlet特征，勒让德符号因此具有良好的性质；而有了第二点，我们可以方便地使用快速幂来计算勒让德符号。</p><p>二次剩余这么就完全解决了吗？从理论上讲，还有很多非常优美的性质没有挖掘呢！下面我们就引出初等数论最重要的成果之一：高斯的二次互反律。首先我们介绍高斯引理：</p><h3 id="高斯引理"><a href="#高斯引理" class="headerlink" title="高斯引理"></a>高斯引理</h3><blockquote><p>设 $p \nmid d$；再设 $1\leq j \leq (p-1)/2$，令<br>$$<br>t_i \equiv jd \pmod p,\text{  } 0 &lt; t_j &lt; p<br>$$<br>以 $n$ 表示这 $(p-1)/2$ 个 $t_i$ 中大于 $p/2$ 的数的个数，那么：<br>$$<br>\left(\frac{d}{p}\right) = (-1)^n<br>$$<br>事实上，当 $\gcd(d,2p)=1$ 时，我们还有 $n$ 的精确表达式：<br>$$<br>n = \sum_{i=1}^{(p-1)/2} \left[\frac{jd}{p}\right]<br>$$</p></blockquote><p>这个定理还是蛮有用的，有了高斯引理，我们就可以解决一部分勒让德符号计算的问题了：（读者可以自己验证）</p><ul><li>$\left( \frac{1}{p} \right) \equiv 1$ 这个根据定义显然；</li><li>$\left( \frac{-1}{p} \right) \equiv (-1)^{\frac{p-1}{2}}$  根据定义显然，$4k+1$ 型素数-1是二次剩余；</li><li>$\left( \frac{2}{p} \right) \equiv (-1)^{\frac{p^2-1}{8}}$ 用高斯引理易得。这说明对于 $8k\pm 1$ 型素数 $2$ 是二次剩余；</li></ul><p>那么如何证明呢？高斯引理的证明是挺精妙的，我们只证明前一半部分。我们考虑 $t_i$ 的乘积，一方面：<br>$$<br>\prod_{i=1}^{(p-1)/2} t_i = d^{(p-1)/2} \prod_{i=1}^{(p-1)/2} i<br>$$<br>另一方面，把 $t_i$ 中所有大于 $(p-1)/2$ 的数 $r$ 换成 $p - r$ ，即可使这些 $t_i$ 形成 $1,2,\cdots,(p-1)/2$ 的一个排列，这个过程中一共有 $n$ 个数被调换，因此乘积中会出现 $(-1)^n$ 的因子。由此：<br>$$<br>\prod_{i=1}^{(p-1)/2} t_i = (-1)^n \prod_{i=1}^{(p-1)/2} i<br>$$<br>综合上面两个式子，即可得到这个定理。</p><p>如果稍微进行一些分析，就可以得到 $n​$ 的表达形式了，这里不再展开。可是我们能够注意到， $n​$ 的形式不是类欧几里得算法的形式么？我们自然要考虑它的几何意义。如下图，这个值就是阴影三角形 $\triangle OCB​$ 内部格点的数目。为什么说是内部呢？很好证明，这个三角形斜边上不会出现格点。</p><p><img src="gauss.png" alt="Gauss引理的几何意义"></p><h3 id="二次互反律"><a href="#二次互反律" class="headerlink" title="二次互反律"></a>二次互反律</h3><p>在上面的图片里面，我们不禁要问还有没有别的几何意义。我们观察 $\triangle OCB​$ ，这个三角形就是 $\left(\frac{p}{d}\right)​$ 啊！（注意我们之前约定过 $d​$ 是奇数）。那么这两个三角形的格点数目之和正好就是整个矩形的格点数目 $\frac{p-1}{2} \cdot \frac{d-1}{2}​$ ！由此我们就证明了二次互反律：</p><blockquote><p>设 $p,q​$ 为奇素数，$p\neq q​$ ，则有：<br>$$<br>\left(\frac qp\right) \cdot \left( \frac pq \right)  = (-1)^{\frac{p-1}{2} \cdot \frac{q-1}{2}}<br>$$</p></blockquote><p>二次互反律的理论价值和实用价值都很高，可以证明很多命题，下面举几个《初等数论》上的例题吧，读者可以想一想怎么解决，之后可能会更新解答。</p><ul><li>证明有无穷多个 $8k+1​$ 型质数</li><li>求以 $11​$ 为其二次剩余的所有奇素数 $p​$</li><li>证明：若$\left(\frac dp\right) = -1​$ ，则 $p​$ 必然不能表示为 $x^2-dy^2​$  的形式。</li></ul><p>我们再说一说二次互反律的另一个重要价值——计算勒让德符号。有了二次互反律，我们可以设计一种类欧几里得算法！回想我们是如何使用欧几里得算法求最大公约数的：</p><ul><li>我们知道 $\gcd(a,0)=a​$ 这一种平凡情况</li><li>否则，利用 $\gcd(a,b) = \gcd(b,a\%b)$ ，我们可以将问题规模缩小一半，从而让问题可以化为平凡情况</li></ul><p>对于勒让德符号的计算，我们不也可以这样吗？我们有这么几个条件：</p><ul><li>当勒让德符号上面的数 $d=1,2 \text{ or } -1​$  时，可以直接给出答案；</li><li>否则，根据互反律，我们可以交换上下两个数，$O(1)$ 计算那个多出来的 $(-1)^{\frac {p-1}{2} \cdot \frac{q-1}2}$ 因子，然后用Legendre符号的周期性进行取模，使得问题规模缩小一半。</li></ul><p>这不是挺完美的吗？别高兴得太早！别忘记，勒让德符号要求符号下面的数 $p$ 可要是质数！正因为这一点，互反律成立需要 $p,q​$ 是奇素数才可以！这样才能保证勒让德符号有意义！这可麻烦了，这样的话，就是计算个勒让德符号，还要必须将数分解质因数！分解质因数可不是个简单的事情，当数比较大的时候这个开销是花不起的。那么我们怎么办呢？我们可以拓展勒让德符号的定义，我们来定义雅克比符号：</p><h3 id="雅克比符号"><a href="#雅克比符号" class="headerlink" title="雅克比符号"></a>雅克比符号</h3><blockquote><p>设奇数 $P&gt;1​$，$P=p_1p_2\cdots p_s​$ ，则定义雅克比符号为：<br>$$<br>\left( \frac dP \right) = \prod_{i-1}^{s} \left(\frac d{p_i}\right)<br>$$<br>其中乘积项中的符号是勒让德符号。</p></blockquote><p>可以验证，雅克比符号满足勒让德符号的一切性质，并且满足互反律，因此可以辅助计算勒让德符号。</p><p>可是有一点必须强调：雅克比符号 $\left( \frac dP \right)=1​$ 绝不保证 $x^2\equiv d \pmod P​$ 一定有解！例如：$\left(\frac 2 {3599}\right) = 1​$ ，可是 $x^2\equiv 2 \pmod {3599}​$ 无解！ </p><p>其实雅可比符号还有拓展，叫做Kronecker符号，甚至还可以拓展到有理数范围，叫做Hilbert符号。这里给出维基百科的链接吧 <a href="https://en.wikipedia.org/wiki/Legendre_symbol" target="_blank" rel="noopener">Legendre</a>，此处不再详细说明了。（<del>其实是因为我也不会</del>）</p><p>下面是一个雅克比符号的模板。使用二次互反律计算，复杂度 $O(\log \min \{a,n\})​$ 。Accepted on <a href="https://cn.vjudge.net/problem/HDU-3589" target="_blank" rel="noopener">HDU3589</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Jacobi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    a %= n;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span> || (a%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; n%<span class="number">2</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">2</span>) <span class="keyword">return</span> (((n&amp;<span class="number">7</span>) == <span class="number">1</span>) || ((n&amp;<span class="number">7</span>) == <span class="number">7</span>)) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>((a &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> Jacobi(<span class="number">2</span>, n) * Jacobi(a / <span class="number">2</span>, n);</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> Jacobi(a, <span class="number">2</span>) * Jacobi(a, n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> sgn = ((a - <span class="number">1</span>) / <span class="number">2</span> * (n - <span class="number">1</span>) / <span class="number">2</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Jacobi(n, a) * (sgn ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Cipolla算法"><a href="#Cipolla算法" class="headerlink" title="Cipolla算法"></a>Cipolla算法</h2><p>上面主要是在讲如何判断二次剩余存不存在的问题，可是如果知道存在了，到底应当怎样构造呢？Cipolla算法即可解决这个问题。这个算法感觉数学背景还是蛮深厚的，是一个挺有趣的算法。</p><p>推荐博客 <a href="https://blog.csdn.net/a_crazy_czy/article/details/51959546" target="_blank" rel="noopener">czy</a> ，下面内容是从他的博客上抄的。</p><p><img src="c1.jpg" alt="czy1"></p><p><img src="c2.png" alt="czy2"></p><p><img src="c3.png" alt="czy3"></p><p>模板题： <a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1132" target="_blank" rel="noopener">Timus 1132</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type int</span></span><br><span class="line"><span class="keyword">namespace</span> ModOp &#123;</span><br><span class="line">    Type MOD;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Type <span class="title">mo</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MF</span> &#123;</span></span><br><span class="line">        Type v;</span><br><span class="line">        MF(Type x = <span class="number">0</span>): v(mo(x)) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">Type</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> + (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v + f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v - f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> * (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">1L</span>L * v * f.v % MOD; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> / (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v / f.v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - () <span class="keyword">const</span> &#123; <span class="keyword">return</span> MOD - v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &gt;&gt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;&gt; idx; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;&lt; idx; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v == f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v != f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out, MF f) &#123; <span class="keyword">return</span> out &lt;&lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, MF f) &#123; <span class="keyword">return</span> in &gt;&gt; f.v; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v) != <span class="number">-1</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"%d"</span>, v); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">qpow</span><span class="params">(T x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    T ret = T(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> ModOp::MF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> qres &#123;</span><br><span class="line">    MF a, n;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">        MF x, y; <span class="comment">// x+yw</span></span><br><span class="line">        F(MF _a = <span class="number">0</span>, MF _b = <span class="number">0</span>): x(_a), y(_b) &#123; &#125;</span><br><span class="line">        F <span class="keyword">operator</span> + (F f2) <span class="keyword">const</span> &#123; <span class="keyword">return</span> F(x + f2.x, y + f2.y); &#125;</span><br><span class="line">        F <span class="keyword">operator</span> * (F f2) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> F(x*f2.x + y*f2.y*(a*a-n), x*f2.y+y*f2.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">MF <span class="title">Legendre</span><span class="params">(MF d)</span> </span>&#123; <span class="keyword">return</span> qpow(d, (p<span class="number">-1</span>)/<span class="number">2</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Cipolla</span><span class="params">(<span class="keyword">int</span> qn, <span class="keyword">int</span> qp)</span> </span>&#123; <span class="comment">// p is a prime, gcd(n, p) = 1</span></span><br><span class="line">        qn %= qp;</span><br><span class="line">        <span class="keyword">if</span>(qp == <span class="number">2</span> &amp;&amp; qn == <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        ModOp::MOD = p = qp; n = qn;</span><br><span class="line">        <span class="keyword">if</span>(Legendre(n) != MF(<span class="number">1</span>)) &#123; <span class="built_in">puts</span>(<span class="string">"No root"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        a = rng() % p;</span><br><span class="line">        <span class="keyword">while</span>(Legendre(a * a - n) != MF(<span class="number">-1</span>)) a = rng() % p;</span><br><span class="line"></span><br><span class="line">        F w(a, 1), res = qpow(w, (p + 1) / 2);</span><br><span class="line">        MF ans = res.x, ans2 = -ans;</span><br><span class="line">        <span class="keyword">if</span>(ans &gt; ans2) swap(ans, ans2);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span> &lt;&lt; ans2 &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p>题解允许我先咕一下QAQ</p><h3 id="CF1091G-New-Year-and-the-Factorisation-Collaboration"><a href="#CF1091G-New-Year-and-the-Factorisation-Collaboration" class="headerlink" title="[CF1091G] New Year and the Factorisation Collaboration"></a>[CF1091G] New Year and the Factorisation Collaboration</h3><p> 蛮有意思的CF题，在Goodbye 2018里出的。</p><h3 id="BZOJ1406-AHOI2007-密码箱"><a href="#BZOJ1406-AHOI2007-密码箱" class="headerlink" title="BZOJ1406 [AHOI2007]密码箱"></a>BZOJ1406 [AHOI2007]密码箱</h3><p>题意：求下面同余方程的所有解：$(n\leq 2\cdot 10^9)$<br>$$<br>x^2\equiv 1 \pmod n<br>$$<br>解法：</p><p>对于方程 $x^2\equiv 1 \pmod{p^\alpha}​$ ，只需要进行分类讨论，然后Hensel引理升幂。对于任意模数的情况，只需要再用CRT合并。</p><h3 id="SCOI2018-Numazu的蜜柑"><a href="#SCOI2018-Numazu的蜜柑" class="headerlink" title="[SCOI2018] Numazu的蜜柑"></a>[SCOI2018] Numazu的蜜柑</h3><h1 id="模素数的高次同余方程"><a href="#模素数的高次同余方程" class="headerlink" title="模素数的高次同余方程"></a>模素数的高次同余方程</h1><h2 id="模意义下的因式定理"><a href="#模意义下的因式定理" class="headerlink" title="模意义下的因式定理"></a>模意义下的因式定理</h2><p>现在我们要解决更加困难的问题了：给定整系数多项式 $f(x)$，求解 $f(x)\equiv 0 \pmod p$ 。对于实数域，有因式定理，即如果 $f(x)$ 有根 $c$，则 $f(x)$ 有因式 $(x-c)$。对于模意义下有没有类似性质呢？答案是肯定的。</p><blockquote><p>设 $p\nmid a_n$ ，若 $n$ 次同余方程 $f(x) \equiv 0 \pmod p$ 有 $k$ 个不同的解 $x\equiv c_1,\cdots,c_k \pmod p$ ，则一定存在唯一一对整系数多项式 $g_k(x), r_k(x)$，使得：<br>$$<br>f(x) = (x-c_1)\cdots(x-c_k)g_k(x) + p \cdot r_k(x)<br>$$</p></blockquote><p> 这个定理还有一种等价表述，即Lagrange定理：</p><blockquote><p>$f(x) \equiv 0 \pmod p$ 的解数 $k \leq \min(n,p)$</p></blockquote><p>结合上面定理，我们可以得到一个强有力的结论，即判别 $n$ 次方程恰有 $n$ 个解的方法：</p><blockquote><p>设 $a_n=1$ ，那么 $f(x) \equiv 0 \pmod p$ 的解数等于 $n$ 的充分必要条件是：存在整系数多项式$q,r$ ，且$r$ 次数小于 $n$，使得：<br>$$<br>x^p-x = f(x)q(x) + p\cdot r(x)<br>$$</p></blockquote><h2 id="n-次剩余"><a href="#n-次剩余" class="headerlink" title="$n$ 次剩余"></a>$n$ 次剩余</h2><p>由此，我们就具有了解决 $n$ 次剩余的理论基础。我们称 $x^n\equiv a \pmod p (p\nmid a)$ 为二项同余方程，而如果这个方程有解，则称 $a$ 为模 $p$ 的 $n$ 次剩余，否则为 $n$ 次非剩余。可以利用原根证明下面两个定理：</p><blockquote><p>若 $n\mid p-1$ ，则 $x^n\equiv a \pmod p (p\nmid a)$ 的充要条件是：<br>$$<br>a^{(p-1)/n} \equiv 1 \pmod p<br>$$</p></blockquote><blockquote><p>若 $n\nmid p-1$ ，令 $k=\gcd(n,p-1)$ 则 $x^n\equiv a \pmod p (p\nmid a)$ 的充要条件是：$x^k\equiv a \pmod p $ 有解，且解数相同。即有解的充分必要条件是：<br>$$<br>a^{(p-1)/k} \equiv 1 \pmod p<br>$$</p></blockquote><p>这样我们就找到了欧拉判别法的推广！我们也可以快速解决判断 $n​$ 次剩余的问题了！可是还有没有类似勒让德符号的定义了呢，有没有互反律之类的东西了呢？在自然数范围内是没有了，如果使用代数数论的观点来看，应该还是有的，可是超出了我们的讨论范围。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近我一直在刷潘承洞、潘承彪的《初等数论》，感觉还是学到了不少东西呢。从现在我就来做一个数论之旅系列专题笔记吧，顺便也记录一下我的学习历程。&lt;/p&gt;
&lt;p&gt;这一次笔记对应的是《初等数论》第四章同余方程 4.5 到 4.9 的内容，主要介绍&lt;strong&gt;二次剩余理论，包括欧拉判别法，勒让德符号，二次互反律，雅克比符号&lt;/strong&gt;等，以及高次同余方程简介，给出了 $n$ 次剩余的判别公式。&lt;/p&gt;
&lt;p&gt;在开始之前约定一下我的记号吧。未经说明的任何字母都代表自然数，小写字母 $p$ 始终代表奇素数，而大写的 $P​$ 则不一定。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="二次剩余" scheme="http://yoursite.com/tags/%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    
      <category term="n次剩余" scheme="http://yoursite.com/tags/n%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    
      <category term="数论之旅系列" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA%E4%B9%8B%E6%97%85%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Grand Contest 031 比赛总结</title>
    <link href="http://yoursite.com/2019/03/17/Atcoder-Grand-Contest-031-%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/03/17/Atcoder-Grand-Contest-031-比赛总结/</id>
    <published>2019-03-17T03:10:19.000Z</published>
    <updated>2019-04-13T15:45:50.266Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:05</td><td style="text-align:center">00:17</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">*2</td><td style="text-align:center">*</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">1536</td><td style="text-align:center">993</td><td style="text-align:center">246</td><td style="text-align:center">54</td><td style="text-align:center">9</td><td style="text-align:center">5</td></tr></tbody></table><ul><li>Rank 358 out of 1925, performance 2020</li><li>Rating 820, became <font color="green"><strong>Pupil</strong></font></li><li>比赛中卡在 C  题上了，和cyy想出了做法，可是比赛中没来得及写完，挺可惜的</li><li>C题是挺有趣的一道构造题，相当于是超立方体中询问任意两点是否存在哈密尔顿路径。</li><li>D题是类似于斐波那契数列的置换序列，找到规律之后其实挺简单的，感觉可能有更高深的知识背景</li></ul><p><font color="red"><strong>nocriz</strong> </font> 太强了！过了 C 题，Rank 167</p><a id="more"></a><h1 id="Prob-A-签到"><a href="#Prob-A-签到" class="headerlink" title="Prob A. 签到"></a>Prob A. 签到</h1><p>答案就是 (每种字母出现次数+1) 乘起来，然后再减一。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, ans = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">300000</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%s"</span>, &amp;n, s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt[s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : cnt) &#123;</span><br><span class="line">        ans = <span class="number">1L</span>L * ans * (g.second + <span class="number">1</span>) % <span class="number">1000000007</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-B-简单dp"><a href="#Prob-B-简单dp" class="headerlink" title="Prob B. 简单dp"></a>Prob B. 简单dp</h1><p>首先，我们把字符串中连续相同字母缩成一个，即把 “aaaabbaaaaa” 缩成 “aba”，这样相邻字母就互不相同了。</p><p>考虑 $dp[r]$ 表示子串 $s[1,r]$ 的答案，我们只需要枚举最后一个字母 $s[r]$ 的选择。有两种转移：</p><ul><li>$s[r]$ 不参与染色，那么贡献是 $dp[r-1]$</li><li>$s[r]$ 与 $s<a href="c&lt;r">c</a>$ 同色，染好之后，只需要染前面 $s[1,c-1]$ 这个子串，贡献就是 $dp[c-1]$</li></ul><p>把每种颜色的贡献用数组存起来就可以 $O(1)$ 完成转移了。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxn], tot, n, dp[maxn], sum_occ[maxn], _x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) &#123;    </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;_x);</span><br><span class="line">        <span class="keyword">if</span>(_x == c[tot]) <span class="keyword">continue</span>;</span><br><span class="line">        c[++tot] = _x;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        dp[i] = (dp[i - <span class="number">1</span>] + sum_occ[c[i]]) % MOD;</span><br><span class="line">        sum_occ[c[i]] = (dp[i - <span class="number">1</span>] + sum_occ[c[i]]) % MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[tot] &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-C-构造，格雷码，好题"><a href="#Prob-C-构造，格雷码，好题" class="headerlink" title="Prob C. 构造，格雷码，好题"></a>Prob C. 构造，格雷码，好题</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给出 $n, A, B$ 三个数，问存不存在 $0,1,\cdots,2^n-1$  的一个排列 $p$ ，使得：</p><ul><li>$p_0=A$ ，即第一项是A。</li><li>$p_{2^n-1} = B$，即第二项是B。</li><li>$\text{popcount}(p_i \oplus p_{i+1}) = 1, \forall i \in [0,2^n-1)$ ，即相邻两个数二进制表示只差一位。</li></ul><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>这道题感觉结论还是挺吸引人的，构造方法是不太寻常的归纳，用到了格雷码的相关知识，而且它还有超立方体哈密尔顿路径的构造这么一个非常有趣的背景，是一道挺不错的题目。</p><h3 id="超立方体哈密尔顿路径"><a href="#超立方体哈密尔顿路径" class="headerlink" title="超立方体哈密尔顿路径"></a>超立方体哈密尔顿路径</h3><p>首先讲一下这个问题和超立方体哈密尔顿路径的关系，虽然这一点在解决这道题中倒是没有起到太大的作用。</p><p>如果仔细观察题中所说的由 $0,1,2,\cdots,2^n-1$ 作为顶点，二进制表示仅仅相差以为的两个数连边，这样构成的图其实就是超立方体。构造方式是这样的：</p><ul><li>零维立方体是一个孤立的点</li><li>$k+1$ 维立方体是这样构造的：<ul><li>首先，画出两个 $k$ 维立方体</li><li>然后，将这两个 $k$ 维立方体对应顶点连上线即可。</li></ul></li></ul><p><img src="1dcube.png" alt="1维立方体"><img src="2dcube.png" alt="2维立方体"><img src="3dcube.png" alt="3维立方体"></p><p>于是，问题就化成了从超立方体顶点 $A$ 走到顶点 $B$，存不存在一条哈密尔顿路径，如果存在就请构造出来。对于这个问题，说不定一些启发式算法可以通过？</p><h3 id="一种构造"><a href="#一种构造" class="headerlink" title="一种构造"></a>一种构造</h3><p>首先，我们只需要考虑从 $0$ 走到 $A\oplus B$ 的情况，而中间会经过 $2^n-1$ 次某个二进制位翻转的操作，因此 $A\oplus B$ 的二进制位数为偶数时，答案一定是不可以。那么为奇数时，是否就一定可以了呢？</p><p>事实上，确实是这样的。</p><h4 id="Gray-函数"><a href="#Gray-函数" class="headerlink" title="Gray 函数"></a>Gray 函数</h4><p>我们首先描述一种 $A=\underbrace{000\cdots 0}_{k\text{ zeros}}$ , $B=1\underbrace{00\cdots 0} _ {k-1 \text{ zeros}}$ 的不重不漏的构造，这种构造使用了数学归纳法，本质上就是格雷码的构造过程：</p><ul><li>首先，根据归纳假设，我们选定后 $k-1$ 位，可以将 $000\cdots 0$ 变为 $010\cdots 0$ ；</li><li>然后，我们把第一位改变，即：变为 $110\cdots 0$ </li><li>再之后，我们再选定后 $k-1$ 位，使用和第一步完全一样的翻转方法，即可得到 $100\cdots 0$ ，可以发现，在整个过程中，每一个数都已经出现过了。</li></ul><h4 id="硬核构造"><a href="#硬核构造" class="headerlink" title="硬核构造"></a>硬核构造</h4><p>下面的构造就比较硬核了，很多步骤相互嵌套，但是规模在逐步缩小，因此是正确的。</p><p>我们上面现在解决了 $A$与 $B$ 相差1位的情形，要解决一般的情形，即：<br>$$<br>A=\underbrace{000\cdots 0} _ {k\text{ zeros}}, B=\underbrace{111\cdots1} _ {m\text{ ones}} \underbrace{000\cdots 0} _ {k-m \text{ zeros}}<br>$$</p><p>我们将其记为：<code>mono(ones, zeros)</code></p><ul><li><p>首先，我们声称，解决从 $\underbrace{000\cdots 0} _ {m\text{ zeros}}$ 到 $\underbrace{111\cdots 1} _ {m\text{ ones}}$  的问题即可完成上述过程。我们这么进行操作：假如我们已经有一个操作序列 $op_1,op_2,\cdots,op_{2^m-1}$ 能够完成从全0到全1的变化，那么在每进行一次操作 $op_i$ 之后，我们都跑一遍后 $k-m$ 位的格雷码，将其第一位修改，后 $k-m-1$ 位不变。经过这样的操作，如果前面全0到全1能够遍历前k位所有可能情况，那么后面的格雷码操作将可以保证我们总的方案是正确的。</p></li><li><p>第二步就是解决从 $\underbrace{000\cdots 0} _ {m\text{ zeros}}$ 到 $\underbrace{111\cdots 1} _ {m\text{ ones}}$ 的过程。</p><ul><li>我们先将其后 $m-1$ 位跑一遍格雷码，变成 $010\cdots 0​$ </li><li>然后把第一位改变，变为 $110\cdots 0$ </li><li>这一步，我们对后面的 $m-1$ 位递归调用 <code>mono(m-2, 1)</code> ，使得后 $m-2$ 位改变，而第2位不变，并且遍历完后 $m-1$ 位的所有情况。这样，我们就完成了总的构造。</li></ul></li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>, A, B, n, dif;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">gray</span><span class="params">(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pos, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; care)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> sz = pos.size();</span><br><span class="line">    <span class="keyword">if</span>(sz == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> fr = pos.front();</span><br><span class="line">    pos.pop_front();</span><br><span class="line">    gray(pos, care);</span><br><span class="line"></span><br><span class="line">    gray(care, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    cur ^= (<span class="number">1</span> &lt;&lt; fr);</span><br><span class="line">    ans.push_back(cur ^ A);</span><br><span class="line"></span><br><span class="line">    gray(pos, care);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mono</span><span class="params">(<span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; ones, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; care)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ones.size() == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ones.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        care.push_front(ones.front());</span><br><span class="line">        gray(care, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> fr = ones.front();</span><br><span class="line">    ones.pop_front();</span><br><span class="line">    gray(ones, care);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> se = ones.front();</span><br><span class="line"></span><br><span class="line">    gray(care, <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    cur ^= (<span class="number">1</span> &lt;&lt; fr);</span><br><span class="line">    ans.push_back(cur ^ A);</span><br><span class="line">    care.push_back(se);</span><br><span class="line">    ones.pop_front();</span><br><span class="line">    mono(ones, care);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; cg, ncg;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dif &gt;&gt; i &amp; <span class="number">1</span>) cg.push_back(i);</span><br><span class="line">        <span class="keyword">else</span> ncg.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    mono(cg, ncg);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> vis[<span class="number">1</span>&lt;&lt;<span class="number">18</span>];</span><br><span class="line"><span class="keyword">int</span> last ;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; A &gt;&gt; B;</span><br><span class="line">    dif = A ^ B;</span><br><span class="line">    <span class="keyword">if</span>(__builtin_popcount(dif) &amp; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"YES"</span>);</span><br><span class="line">        ans.push_back(cur ^ A);</span><br><span class="line">        solve();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans) <span class="built_in">printf</span>(<span class="string">"%d "</span>, g);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"NO"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-D-置换，找规律"><a href="#Prob-D-置换，找规律" class="headerlink" title="Prob D. 置换，找规律"></a>Prob D. 置换，找规律</h1><h2 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h2><p>给你一个置换序列的前两项 $a_1=p,a_2=q$ ，之后的置换这么定义：</p><p>记第 $a_k$ 个置换的之前的 $a_{k-2}=m,a_{k-1}=n$ ，则 $a_k$  的第 $m[i]$ 项 $a_k[m[i]] = n[i]$</p><p>之后询问第 $q$ 个置换是多少。</p><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>这道题蛮乱搞的，写出前10项左右可以发现规律，然后就没了。规律在代码中写得很明确。</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">permutation</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    permutation(<span class="keyword">int</span> N = <span class="number">0</span>): sz(N), a(N + <span class="number">10</span>) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)  a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * msg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, msg);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; sz) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> a[idx]; &#125;</span><br><span class="line">    permutation <span class="keyword">operator</span> * (permutation rhs) &#123;</span><br><span class="line">        <span class="function">permutation <span class="title">res</span><span class="params">(sz)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)</span><br><span class="line">            res[i] = a[rhs[i]];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; _vis(sz + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        rep(i, sz) _vis[a[i]] = <span class="literal">true</span>;</span><br><span class="line">        rep(i, sz) <span class="keyword">if</span>(!_vis[i]) &#123; <span class="built_in">puts</span>(<span class="string">"NO!NOT A PERMUTATION!"</span>); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">decomp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; _vis(sz + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        ll ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) <span class="keyword">if</span>(!_vis[i]) &#123;</span><br><span class="line">            ll len = <span class="number">0</span>, c = i;</span><br><span class="line">            <span class="keyword">while</span>(!_vis[c]) &#123;</span><br><span class="line">                _vis[c] = <span class="literal">true</span>;</span><br><span class="line">                len++;</span><br><span class="line">                c = a[c];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans == <span class="number">-1</span>) ans = len;</span><br><span class="line">            <span class="keyword">else</span> ans = ans * (len / __gcd(ans, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">permutation <span class="title">inverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">permutation <span class="title">rev</span><span class="params">(sz)</span></span>;</span><br><span class="line">        rep(i, sz) rev[a[i]] = i;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">permutation <span class="title">qpow</span><span class="params">(permutation p, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="function">permutation <span class="title">t</span><span class="params">(p.sz)</span></span>;</span><br><span class="line">    t.identity();</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, p = p * p)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) t = t * p;</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line">    <span class="keyword">int</span> period = (k - <span class="number">1</span>) / <span class="number">6</span>, left = k - <span class="number">6</span> * period;</span><br><span class="line">    permutation p(n), q(n), pi(n), qi(n), res(n), A(n), B(n), qpqp(n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;q[i]);</span><br><span class="line">    pi = p.inverse();</span><br><span class="line">    qi = q.inverse();</span><br><span class="line">    qpqp = q * pi * qi * p;</span><br><span class="line">    res.identity();</span><br><span class="line"></span><br><span class="line">    A = qpow(qpqp, period);</span><br><span class="line">    <span class="keyword">switch</span>(left) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">1</span>: B = p; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">2</span>: B = q; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">3</span>: B = q * pi; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">4</span>: B = q * pi * qi; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">5</span>: B = q * pi * qi * p * qi; <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">6</span>: B = q * pi * qi * p * p * qi; <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    res = A * B * A.inverse();</span><br><span class="line">    res.show(<span class="string">""</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:05&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:17&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1536&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;993&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;246&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;54&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;9&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;Rank 358 out of 1925, performance 2020&lt;/li&gt;
&lt;li&gt;Rating 820, became &lt;font color=&quot;green&quot;&gt;&lt;strong&gt;Pupil&lt;/strong&gt;&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;比赛中卡在 C  题上了，和cyy想出了做法，可是比赛中没来得及写完，挺可惜的&lt;/li&gt;
&lt;li&gt;C题是挺有趣的一道构造题，相当于是超立方体中询问任意两点是否存在哈密尔顿路径。&lt;/li&gt;
&lt;li&gt;D题是类似于斐波那契数列的置换序列，找到规律之后其实挺简单的，感觉可能有更高深的知识背景&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;nocriz&lt;/strong&gt; &lt;/font&gt; 太强了！过了 C 题，Rank 167&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="AtCoder" scheme="http://yoursite.com/tags/AtCoder/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="格雷码" scheme="http://yoursite.com/tags/%E6%A0%BC%E9%9B%B7%E7%A0%81/"/>
    
      <category term="置换" scheme="http://yoursite.com/tags/%E7%BD%AE%E6%8D%A2/"/>
    
      <category term="哈密尔顿路径" scheme="http://yoursite.com/tags/%E5%93%88%E5%AF%86%E5%B0%94%E9%A1%BF%E8%B7%AF%E5%BE%84/"/>
    
  </entry>
  
  <entry>
    <title>p进数 (p-adic) 、牛顿迭代与Hensel引理</title>
    <link href="http://yoursite.com/2019/03/10/p%E8%BF%9B%E6%95%B0-p-adic-%E4%B8%8EHensel%E5%BC%95%E7%90%86/"/>
    <id>http://yoursite.com/2019/03/10/p进数-p-adic-与Hensel引理/</id>
    <published>2019-03-10T00:54:49.000Z</published>
    <updated>2019-04-05T16:45:03.696Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你敢相信 $\sum\limits^{\infty}_{i=0}2^i = -1$ 吗？数论中一个长相奇怪的定理到底有什么直观意义？牛顿迭代法作为常用的数值方法，和p进数又会有什么联系？</p></blockquote><p>上面的几个问题似乎毫不相关，我当时分别听说这几个知识的时候也没有发现它们之间的联系。可是这几天偶然了解到有关p进数（p-adic）的一套理论，我顿时感觉如同醍醐灌顶：换一种角度看问题，它们之间的联系居然如此简单明了！下面我就来介绍一下我认识的这几个知识的联系吧。</p><p>这一块内容有很多涉及代数数论甚至泛函分析的相关内容，我都没有太深入的了解，可能会出不少问题，也希望大家能给我进行一些补充吧。</p><a id="more"></a><h1 id="TL-DR"><a href="#TL-DR" class="headerlink" title="TL;DR"></a>TL;DR</h1><p>（Too long; Don’t read）</p><p>（这是简述，<del>看完简述剩下的就可以不看了</del>）</p><p>简而言之，这篇文章数论中一个形式古怪的提高模数次数的定理（Hensel定理，2.1中有定义描述与证明）说起，目的是阐明它的直观意义，即说明与牛顿迭代法的相似性：</p><ul><li><p>一方面，从定理形式的表面出发，这个定理的变形之后和牛顿迭代法是极为相似的</p></li><li><p>另一方面，从更深层次的意义来说，它解决的问题是在p进度量下用有理数逼近多项式的零点的过程。</p></li></ul><p>第一点在2.2会有解释，而第二点则更为关键。本质上说，牛顿迭代法那样在绝对值度量下用有理数估计多项式零点，用的是是从数位高的地方向数位低的地方逼近的方法，即类似$1,1.4,1.41,1.414,\cdots$ 的过程。可是Hensel定理是从恰恰相反的方向逼近的，即从数位低的地方向数位高的地方递进的，如在7-adic下逼近 $\sqrt{2}$，则逼近的数列是这样的： $\{3, (13)_7, (213)_7,\cdots\}​$ 。</p><p>这么做靠谱吗？怎么感觉都没有任何收敛的感觉呢，简直玄学！可是你为什么说这个数列不收敛？你会说，因为相邻两项之间的距离，即差的绝对值，越来越大了呗。但是你说的这个距离为什么就是差的绝对值？如果我巧妙定义另一套距离，说不定我就可以说这个数列是逐步收敛的了。这就引出了一套有趣的数学理论，即p进度量和p进数 。</p><ul><li><p>首先，我们定义了有理数集上一种独特的范数和距离</p></li><li><p>然后，我们引入完备的概念。在绝对值度量下，比如数列$1,1.4,1.41,1.414,\cdots$  ，这个数列存在极限（因为单调有界），并且数列每一项都是有理数，但是这个极限就不在有理数集里。因此我们称有理数集是不完备的，称这样的数列就是在对无理数进行逼近。</p></li><li><p>从这个观点来看， Hensel引理相当于在p进度量下，给出了用有理数逼近多项式零点的数列的构造。</p></li><li><p>牛顿迭代法给出了在绝对值度量下用有理数逼近多项式零点的数列的构造。</p></li></ul><p>因此从目的的角度看来，牛顿迭代和Hensel引理是在不同度量下，解决同一个问题，因此形式相似。这可真的是殊途同归啊！这不得不赞叹数学的魅力了。</p><p>P.S. 强烈推荐3blue1brown的这个视频，讲的是p进数：<a href="https://www.bilibili.com/video/av3509556" target="_blank" rel="noopener">3blue1brown的视频</a> 非常直观易懂，让大家瞬间能对p进数有个概念。可以先看视频，再看本文。</p><h1 id="Hensel引理"><a href="#Hensel引理" class="headerlink" title="Hensel引理"></a>Hensel引理</h1><p>一切的一切，都要从潘承洞、潘承彪《初等数论》第186页的一个定理说起。（第四章第四节）</p><p>如果你求出了一个整系数多项式同余方程 $f(x)\equiv 0 \pmod p$ 的一些解 $x\equiv c_1,c_2,\cdots\pmod p$ ，但是我要求你再求出 $\mod {p^2}$ 的解，你该怎么做呢？直接重新求一遍？太麻烦了吧！有什么简单方法吗？这个定理给出了答案。只是。。。这个定理的形式有点诡异，无法直观理解：</p><h2 id="定理的描述与证明"><a href="#定理的描述与证明" class="headerlink" title="定理的描述与证明"></a>定理的描述与证明</h2><h3 id="定理描述"><a href="#定理描述" class="headerlink" title="定理描述"></a>定理描述</h3><p><strong>定理</strong> 设 $p$ 是素数，整系数多项式 $f(x)=a_n x^n+a_{n-1}x^{n-1} +\cdots + a_1x+a_0,   n \geq 2$ ；再设整数$\alpha \geq 2$， $c$ 是同余方程 $f(x) \equiv 0 \pmod {p^{\alpha-1}}$ 的解，那么，同余方程 $f(x) \equiv 0 \pmod{p^\alpha}$ 满足 $x\equiv c\pmod{p^{\alpha-1}}$ 的解是形式一定是$x\equiv c+y_j p^{\alpha - 1}, j=1,2,\cdots, l$ ，这里$y\equiv y_1,\cdots,y_l \pmod p$ 是关于 $y$ 的一次同余方程：<br>$$<br>f’(c) \cdot y\equiv -f(c) \cdot p^{1-\alpha} \pmod p \tag{1}<br>$$<br>的全部解，其中 $f’(x)$ 即表示 $f(x)​$ 的导函数。</p><p>（这个定理据说是代数数论重要定理Hensel引理的初等描述。）</p><h3 id="一些解释与思考"><a href="#一些解释与思考" class="headerlink" title="一些解释与思考"></a>一些解释与思考</h3><p>这个定理好诡异啊！到底是什么意思呢？我们一步一步来。首先 $x\equiv c\pmod{p^{\alpha-1}}$ 这个解在模数升幂之后的形式一定是 $x\equiv c+y p^{\alpha - 1} \pmod{p^\alpha}$ ，这一点可以理解，因为如果把 $x$ 写成 $p$ 进制数，那么 $x$ 的后$\alpha - 1$ 位（从个位开始数）已经确定为 $c$ ，只有第 $\alpha$ 位这一个位置可以任取，不妨设这一位的数是 $y $，( $0\leq y&lt; p$ )，则解的形式就是 $x\equiv c+y\cdot p^{\alpha  -1}$ 。</p><p>可能有同学会问：为什么拓展之后的解形式中 $y$ 还要分这么多种？这是因为同余方程 (1) 是一次同余方程，根据 $f’(c)$ 和 $-f(c)\cdot p^{1-\alpha}$ 是否模 $p$ 余 $0$ 进行讨论的话，可能有一个解，可能无解，也可能任何 $0\leq y&lt;n$ 的数都是解，即：拓展之后可能有 $0,1$  或 $p​$ 个解，这么写是一种不失一般性的写法。</p><p>然后。。。就到了最鬼畜的(1)式了。这里怎么莫名出现了导数？为什么它的形式如此诡异？二潘在书里也给出了一个初等的证明，但同样无法让人感受这个定理的直观意义。</p><h3 id="定理证明"><a href="#定理证明" class="headerlink" title="定理证明"></a>定理证明</h3><p><strong>证明</strong>  将拓展之后的解的形式 $x\equiv c+y_j p^{\alpha - 1}$ 代入方程 $f(x) \equiv 0 \pmod{p^{\alpha}}$ ：<br>$$<br>\begin{align}<br>f(x) &amp; \equiv &amp;  a_n(c+p^{\alpha-1}y)^n + a_{n-1} (c+p^{\alpha-1}y)^{n-1} +\cdots+a_0\\<br> &amp; \equiv &amp; f(c)+p^{\alpha-1}f’(c)y+A_2p^{2(\alpha-1)}<br>y^2+\cdots+A_n p^{n(\alpha-1)}y^n\ <br>&amp; \equiv &amp; 0 \pmod {p^\alpha}<br>\end{align}<br>$$<br>其中 $A_2, A_3,\cdots,A_n$ 是整数，由于 $\alpha \geq 2$ ，从上式可知 $f(x) \equiv 0 \pmod{p^{\alpha}}$ 等价于：<br>$$<br>p^{\alpha-1} f’(c) y \equiv -f(c) \pmod{p^\alpha}<br>$$<br>由于 $f(c)$ 是 $p^{\alpha-1}$ 的倍数（因为 $f(c)\equiv 0 \pmod {p^{\alpha-1}}$），所以两边同时除以 $p^{\alpha - 1}$ 即可得到我们要证明的式子。</p><p><strong>评论</strong> 说实话。。。这个证明也挺平凡的，并没有给我对于定理的直观感受。那么下面我们就从直观感觉出发，探究这个定理究竟是在解决什么问题。</p><h2 id="与牛顿迭代法形式上的相似之处"><a href="#与牛顿迭代法形式上的相似之处" class="headerlink" title="与牛顿迭代法形式上的相似之处"></a>与牛顿迭代法形式上的相似之处</h2><p>其实，式 (1) 和牛顿迭代法本质是完全相同的。</p><p>先做一个约定，这里的牛顿迭代法为了和Hensel引理相对应，采用非常狭义的定义。要求初始值为有理数，而求零点的函数也是多项式函数，这样迭代的每一步也都是有理数了。</p><p>我们知道，在求连续函数 $f(x)$ 的零点时，牛顿迭代法的递推公式是：<br>$$<br>c’ = c - \frac{f(c)}{f’(c)} \tag{2}<br>$$<br>而我们的式 (1)  也可以写作（假设只有一个拓展后的解）：<br>$$<br>c’ \equiv c-\big(\frac{f(c)/p^{k-1}}{f’(c)} \bmod p\big) \cdot p^{k-1} \pmod{p^k}<br>$$<br>如果不严格地把取模号全部丢弃，我们会发现这个式子和 (2) 是完全一样的。事实上，在同余运算下因为有取模操作，式 (1) 已经做到和牛顿迭代保持最大程度的相似了。</p><p>那么我们来考虑这两者在目的上有什么相似之处：牛顿迭代实际上在不断逼近一个使得函数值为0的点，这里的“逼近”指的是迭代值和真实值的距离（即差的绝对值）逐渐缩小，是一个收敛的过程；而Hensel引理的让幂次升高的迭代是否也是在”逼近“某个数呢？不过这里的逼近好像会导致迭代值之间差的绝对值越来越大，这个过程是还能是收敛的吗？</p><p>事实上，这就引出了有理数的另一种度量：$p$ 进度量（或 $p$ 进赋值）。</p><h1 id="p-进数"><a href="#p-进数" class="headerlink" title="$p$ 进数"></a>$p$ 进数</h1><h2 id="p-进制数"><a href="#p-进制数" class="headerlink" title="$p$ 进制数"></a>$p$ 进制数</h2><p>首先明确一点的是 $p$ 进数中的 $p$ ，指的是素数，因为素数情况下的性质比较优雅。</p><p>什么是 $p​$ 进数（p-adic）？我们先从 $p​$ 进制数一步一步说起。</p><p>我们都熟悉十进制数，我们可以类似十进制表示法那样，写出 $p$ 进制数的形式：<br>$$<br>\begin{align}<br>x&amp;=&amp;\cdots\alpha_i \alpha_{i-1}\cdots\alpha_1\alpha_0.\alpha_{-1}\cdots\alpha_{-k+1}\alpha_{-k}\\<br>&amp; = &amp; \cdots + \alpha_i p^i+\cdots + \alpha_1p +\alpha_0 + \frac{\alpha_{-1}}{p} + \cdots\frac {\alpha_{-k}}{p_k}<br>\end{align}<br>$$<br>一些常见的结论就是，一个分母是 $p$ 的整数幂的分数在 $p$ 进制下为有限小数；其他有理数一定会是循环小数，无理数则是无限不循环小数。</p><p>在我们通常的认识中，如果 $x$ 是正数，那么 $x$ 小数点左边的数位越多，这个数就会越大（称为范数越大）。但是这一点是为什么呢？像刚才的问题，那我能不能定义右数字越多，这个数越大呢？</p><p>为了探寻上面数论定理的意义，我们采用这种反着来定义范数的方法，可是我们还需要做一些准备工作，即我的这种定义需要满足距离的性质。</p><h2 id="范数与度量"><a href="#范数与度量" class="headerlink" title="范数与度量"></a>范数与度量</h2><p>范数是绝对值概念的推广。由上面的例子看出，范数也是需要公理化的。那么范数需要有哪些性质呢？</p><blockquote><p>若 $X$ 是数域上的线性空间，泛函 $\left| \cdot \right|:X \rightarrow R$ 满足：</p><p>(1) 正定性：$\left|x\right|\geq0$，且  $\left|x\right|=0\Leftrightarrow x=0$；</p><p>(2) 正齐次性： $\left|cx\right|=|c|\left|x\right|$;</p><p>(3) 次可加性（三角不等式）：$\left|x+y\right|\leq \left|x\right|+\left|y\right|$ ；</p><p>那么，$\left|\cdot\right|$  称为 $X$ 上的一个范数。</p></blockquote><p>我们定义 $v_p(x)=\max \{\alpha \in N: p^\alpha  \mid x  \} $，则 $|x|_p = p^{-v_p(x)}$ 就可以作为正整数域 $N^*$ 的一个范数（注意指数上的符号！这就是上面小数点后数字越多，数越大的体现）。这个概念还可以推广到有理数域 $\mathbb{Q}$。定义 $|\frac ab|_p = \frac{|a|_p}{|b|_p}$ 即可。</p><p>有了范数的概念，定义距离就是很显然的了。$d(x,y)=\left|x-y\right|$ 。</p><p>例如，$p=3​$ 时<br>$$<br>d(5, \frac 59) = p^{-v_p(\frac {40}{9})}=p^{-2}=\frac 19<br>$$</p><p>$$<br>d(6,735) = p^{-v(729)} = p^{-6} = \frac{1}{729}<br>$$</p><p>因此，最开头说的这个式子在2-adic的左边就不再是那么不可理解了：<br>$$<br>\sum_{i=0}^\infty 2^i = -1<br>$$</p><p>在绝对值度量下，我们认为“越来越小”的数组成的级数可能收敛，可是在这里不也一样吗？在2-adic下，$2^i$ 随着 $i$ 的增大，不就是在减小吗？还有一个问题，右边为什么是 $-1$？这就要思考在 2-adic 下怎么表示负数了。 这确实又引出了问题。</p><p>和绝对值度量一样，我们从大到小考虑这个p进数的每一位进行近似。这里要注意，$p$ 是比 $p^2$ 大的，因此从大到小就是对应这一个升幂的过程。</p><p>以 $x=-1$ 的表示为例，首先考虑第0位。这一位应当满足：<br>$$<br>x\equiv -1 \pmod 2<br>$$<br>显然这一位是1。然后考虑第一位后这个数一定是 $1+t\cdot2$形式的，那么：<br>$$<br>1+t\cdot 2\equiv -1 \pmod {2^2}<br>$$<br>由此， $t\equiv 1 \pmod 2$ 。那么考虑第二位。这个数现在变成了 $1+2+t\cdot2^2$形式，然后我们要解：<br>$$<br>1+2+t\cdot 2^2\equiv -1 \pmod{2^3}<br>$$<br>逐渐进行下去，我们发现这里的每一位都是 $1$ ，因此 $-1$ 在2-adic下的表示就是 $\sum\limits_{i=0}^\infty 2^i$</p><p>这个例子是不是很有启发性？这个过程是不是和上面的定理很相似？</p><p>像这样，我们可以利用p进度量求得 p-adic 下所有的有理数 $\frac ab​$ 的表示。我们只需要将方程 $bx\equiv a\pmod{p^k}​$  不断用类似的过程升幂，而升幂的过程就是一个渐进的过程。</p><h2 id="有理数域的完备化"><a href="#有理数域的完备化" class="headerlink" title="有理数域的完备化"></a>有理数域的完备化</h2><p>还有更疯狂的呢！如果我对 $x^2\equiv 2\pmod {7^k}$ 不断升幂，那我又能得到什么呢？我甚至能得到 $\sqrt{2}$ 在7-adic下的表示！这可是一件了不起的事情！我们的p进度量可没办法处理无理数啊！在无理数中怎么谈 $v_p(x)$ 这个函数呢？可是无理数就这样能够在p进数中出现了。</p><p>实际上这种过程就是一个将有理数域完备化的过程。</p><p>设 $x_n$ 是距离空间 $X$ 中的点列，如果对于任意的 $\epsilon&gt;0$，存在自然数 $N$，当 $m,n&gt;N$ 时，$|x_n−x_m|&lt;\epsilon$，称 $\{x_n\}$ 是一个 Cauchy 列。</p><p>完备空间或者完备度量空间是具有下述性质的空间：<strong>空间中的任何柯西序列都收敛在该空间之内</strong>。</p><p>有理数集就不是完备的，因为在绝对值度量下， $\sqrt{2}​$ 的有限位小数表示 $\{1,1.4,1.41,1.414,1.4142,\cdots\}​$ 是一个柯西序列，但是其极限 $\sqrt{2}​$ 不在有理数集内；而我们的例子相当于说在7-adic度量下的序列 $\{3, (13)_7, (213)_7\}​$ 也是一个柯西序列，但是极限 $\sqrt{2}​$ 不在有理数集中。</p><p>将不完备集合中添加元素使之完备的过程称为完备化。所有将有理数集按照绝对值完备化，即可得到实数集；而按照p进赋值完备化就得到了p进数。</p><h2 id="殊途同归！"><a href="#殊途同归！" class="headerlink" title="殊途同归！"></a>殊途同归！</h2><p>现在我们可以讨论最开始的定理的意义了。总结一下：</p><ul><li>首先，我们定义了一种与绝对值恰恰相反的范数：p进赋值</li><li>由此，我们也定义了有理数集的两种不同的距离</li><li>然后，我们发现，对于这两种距离，有理数集都不是完备的，都能存在柯西序列，使得序列的极限不在有理数集中。</li><li>按照绝对值距离，有理数集拓展为了实数集；按照p进赋值，有理数集完备化为p进数集。</li></ul><p>我们上面说有理数集直接就“完备化”了，可是还没说到底怎么趋近一个这样的无理数呢。考虑特殊的情况：对于整系数多项式零点的寻找。正好，相对应的，两种度量方式给出了两种逼近方式：</p><ul><li>绝对值度量给出了牛顿迭代法，逐渐使得答案精确的小数点位数增多。</li><li>p进度量给出了Hensel引理，逐渐给答案升幂。</li></ul><p>因此，解决的问题都相同，解决的方式也相同。在截然不同的两种度量下，它们最终的公式居然能够完全一致，这不得不赞叹数学的魅力了。</p><h1 id="注"><a href="#注" class="headerlink" title="注"></a>注</h1><ol><li>事实上，在有理数域上定义范数只有上面两种本质不同的不平凡定义方式。这个结论成为奥斯特洛夫斯基定理（<a href="https://en.wikipedia.org/wiki/Ostrowski%27s_theorem" target="_blank" rel="noopener">Ostrowski’s theorem</a>）</li><li>实际上由于p 进数是完备的，甚至可以继续在p进数上定义微积分！</li></ol><h2 id="还未搞清楚的问题"><a href="#还未搞清楚的问题" class="headerlink" title="还未搞清楚的问题"></a>还未搞清楚的问题</h2><ol><li>牛顿迭代法的几何意义是切线，可是Hensel引理有没有几何意义呢？</li><li>网上有人说LTE引理（升幂引理）和 p 进数有关系，有什么关系呢？</li><li>Hensel定理的代数数论表述如何理解？</li><li>都说p进数集是被实数集所包含的，这是为什么？哪些实数不能被p进估计？</li></ol><h2 id="相关推荐"><a href="#相关推荐" class="headerlink" title="相关推荐"></a>相关推荐</h2><p>推荐的视频资料：</p><p><a href="https://www.bilibili.com/video/av3509556" target="_blank" rel="noopener">3blue1brown的视频</a> （这个在开头已经推荐过了）很清晰易懂，非常有启发性。</p><p><a href="https://www.youtube.com/watch?v=gsg1x6mxVIA" target="_blank" rel="noopener">Hensel引理与p-adic（youtube）</a> 这个视频专业性更强一些，和本文的内容更是息息相关。这个视频的uploader，<a href="https://www.youtube.com/channel/UCErLELnXehsJ7ycW4OJgfQQ" target="_blank" rel="noopener">Harpreet Bedi</a> 是个专业数学知识的科普作者，他上传的视频往往是有关深刻的数学知识的。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你敢相信 $\sum\limits^{\infty}_{i=0}2^i = -1$ 吗？数论中一个长相奇怪的定理到底有什么直观意义？牛顿迭代法作为常用的数值方法，和p进数又会有什么联系？&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的几个问题似乎毫不相关，我当时分别听说这几个知识的时候也没有发现它们之间的联系。可是这几天偶然了解到有关p进数（p-adic）的一套理论，我顿时感觉如同醍醐灌顶：换一种角度看问题，它们之间的联系居然如此简单明了！下面我就来介绍一下我认识的这几个知识的联系吧。&lt;/p&gt;
&lt;p&gt;这一块内容有很多涉及代数数论甚至泛函分析的相关内容，我都没有太深入的了解，可能会出不少问题，也希望大家能给我进行一些补充吧。&lt;/p&gt;
    
    </summary>
    
      <category term="数学" scheme="http://yoursite.com/categories/%E6%95%B0%E5%AD%A6/"/>
    
    
      <category term="p-adic" scheme="http://yoursite.com/tags/p-adic/"/>
    
      <category term="数论" scheme="http://yoursite.com/tags/%E6%95%B0%E8%AE%BA/"/>
    
      <category term="牛顿迭代法" scheme="http://yoursite.com/tags/%E7%89%9B%E9%A1%BF%E8%BF%AD%E4%BB%A3%E6%B3%95/"/>
    
      <category term="数学分析" scheme="http://yoursite.com/tags/%E6%95%B0%E5%AD%A6%E5%88%86%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 10378 解题报告</title>
    <link href="http://yoursite.com/2019/03/06/Opentrains-10378-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/03/06/Opentrains-10378-解题报告/</id>
    <published>2019-03-06T14:11:38.000Z</published>
    <updated>2019-03-08T15:16:09.519Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Urals"><a href="#XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Urals" class="headerlink" title="XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Urals"></a>XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Urals</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th><th style="text-align:center">L</th><th style="text-align:center">M</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">0:34</td><td style="text-align:center">3:56</td><td style="text-align:center">1:37</td><td style="text-align:center">—-</td><td style="text-align:center">—-</td><td style="text-align:center">—-</td><td style="text-align:center">0:23</td><td style="text-align:center">3:03</td><td style="text-align:center">—-</td><td style="text-align:center">—-</td><td style="text-align:center">2:29</td><td style="text-align:center">—-</td><td style="text-align:center">—-</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><font color="green"><strong>AC</strong></font></td><td style="text-align:center"><font color="green"><strong>AC</strong></font></td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><font color="green">OK</font></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><strong>AC</strong></font></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong>TLE</strong></td><td style="text-align:center"><strong>AC</strong></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><strong><font color="green">+2</font></strong></td><td style="text-align:center"><strong><font color="green">+2</font></strong></td><td style="text-align:center"><strong><font color="green">+3</font></strong></td><td style="text-align:center"><strong><font color="red">*1</font></strong></td><td style="text-align:center"><strong><font color="red">*3</font></strong></td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="green">+1</font></strong></td><td style="text-align:center"><font color="green">+3</font></td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="red">*2</font></strong></td><td style="text-align:center"><strong><font color="green">+</font></strong></td><td style="text-align:center"><strong>*9</strong></td><td style="text-align:center"><strong>*</strong></td></tr><tr><td style="text-align:left">Total AC</td><td style="text-align:center">183</td><td style="text-align:center">131</td><td style="text-align:center">138</td><td style="text-align:center">88</td><td style="text-align:center">45</td><td style="text-align:center">3</td><td style="text-align:center">146</td><td style="text-align:center">120</td><td style="text-align:center">11</td><td style="text-align:center">116</td><td style="text-align:center">139</td><td style="text-align:center">45</td><td style="text-align:center">47</td></tr></tbody></table><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010378" target="_blank" rel="noopener">比赛链接</a></p><p><a href="http://www.cnblogs.com/clrs97/p/7524291.html" target="_blank" rel="noopener">Claris的题解</a></p><p>dirt $60\%​$ 啊，还是要提高代码准确性啊。</p><p>总览：</p><ul><li>Solved 6 out of 13</li><li>Upsolved 11 out of 13</li><li>Rank 108 out of 202 （击败 $46.53\%​$ ）</li><li>这场比赛动态规划涉及较多</li><li>C是二分加多重背包</li><li>D是bitset优化完全背包的dp，比赛时被这道题卡了。</li><li>K是一个有趣的构造</li><li>L 题状压dp卡常数！</li><li>M题必须手写高精度！</li></ul><a id="more"></a><p>踩过的坑点：</p><ul><li>A：仅仅有一个环并不构成苹果！WA * 2</li><li>B：少判断h之和是否相等。WA * 2</li><li>C：数组越界，玄学输出。WA * 3</li></ul><h2 id="Prob-A-图的遍历"><a href="#Prob-A-图的遍历" class="headerlink" title="Prob. A 图的遍历"></a>Prob. A 图的遍历</h2><p>模拟题意即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">120</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m, fa[maxn], _x, _y, has = <span class="literal">false</span>, father[maxn], dep[maxn], deg[maxn];</span><br><span class="line">pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; cyc;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x == fa[x] ? x : fa[x] = find(fa[x]); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fath)</span> </span>&#123;</span><br><span class="line">    father[v] = fath;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g != fath) </span><br><span class="line">            dfs(g, v), dep[g] = dep[v] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> incyc[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">if</span>(n != m) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    rep(i, n) fa[i] = i;</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;_x, &amp;_y);</span><br><span class="line">        <span class="keyword">if</span>(find(_x) == find(_y)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(has) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> has = <span class="literal">true</span>, cyc = &#123;_x, _y&#125;, deg[_x]++, deg[_y]++;;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            deg[_x]++, deg[_y]++;</span><br><span class="line">            G[_x].push_back(_y);</span><br><span class="line">            G[_y].push_back(_x);</span><br><span class="line">            fa[find(_x)] = find(_y);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> u = cyc.first, v = cyc.second, cnt = <span class="number">2</span>;</span><br><span class="line">    incyc[u] = incyc[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(u != v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dep[u] &gt; dep[v]) swap(u, v);</span><br><span class="line">        <span class="keyword">if</span>(dep[u] == dep[v]) &#123;</span><br><span class="line">            u = father[u];</span><br><span class="line">            incyc[u] = <span class="number">1</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(dep[u] &lt; dep[v]) &#123;</span><br><span class="line">            v = father[v];</span><br><span class="line">            incyc[v] = <span class="number">1</span>;</span><br><span class="line">            cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(cnt == n + <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(!incyc[i]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[i] &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[i] &gt; <span class="number">3</span>) &#123; </span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>); </span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-B-排序"><a href="#Prob-B-排序" class="headerlink" title="Prob. B 排序"></a>Prob. B 排序</h2><p>由题意，对于一个图表 $G$ 的一系列区间 $[l_1,r_1-1],[l_2,r_2-1],\cdots,[l_n,r_n-1]​$ ，我们得到的是一系列下面的等式：<br>$$<br>a[l_i,r_i-1] = h_i<br>$$<br>利用前缀和，令 $pre_h[i] = \sum\limits_{j=1}^{i} h[i]$ ， $pre_a[i] = \sum\limits_{j=1}^{i} a[i]$则条件转化为：<br>$$<br>pre_a[r_i-1]=pre_h[i]<br>$$<br>即：针对 $pre_a$ 的一系列等式。把两个图表对应的等式求出，排序，然后判断是否矛盾即可。</p><p><strong><font color="red">注意</font></strong>：必须判断两个图表 $h$ 数组的和相等！当时没注意这一点，然后玄学WA了好久。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">lim</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> x, ylim;</span><br><span class="line">    <span class="comment">// sum(1, x) = ylim</span></span><br><span class="line">    lim(<span class="keyword">int</span> _x = <span class="number">0</span>, <span class="keyword">int</span> _y = <span class="number">0</span>) : x(_x), ylim(_y) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> lim&amp; lm) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; lm.x || (x==lm.x &amp;&amp; ylim&lt;lm.ylim);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;lim&gt; t;</span><br><span class="line"><span class="keyword">int</span> k1, b1, s1, k2, b2, s2, h1[maxn], h2[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(k1, b1, s1);</span><br><span class="line">    rep(i, k1) read(h1[i]);</span><br><span class="line"></span><br><span class="line">    read(k2, b2, s2);</span><br><span class="line">    rep(i, k2) read(h2[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> c1 = b1 - <span class="number">1</span>, c2 = b2 - <span class="number">1</span>;</span><br><span class="line">    t.emplace_back(c1, <span class="number">0</span>);</span><br><span class="line">    t.emplace_back(c2, <span class="number">0</span>);</span><br><span class="line">    rep(i, k1) &#123;</span><br><span class="line">        c1 += s1;</span><br><span class="line">        h1[i] += h1[i - <span class="number">1</span>];</span><br><span class="line">        t.emplace_back(c1, h1[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, k2) &#123;</span><br><span class="line">        c2 += s2;</span><br><span class="line">        h2[i] += h2[i - <span class="number">1</span>];</span><br><span class="line">        t.emplace_back(c2, h2[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(h1[k1] != h2[k2]) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    </span><br><span class="line">    sort(t.begin(), t.end());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cx = <span class="number">-1000</span>, cy = <span class="number">-1000</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : t) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g.x == cx) &#123;</span><br><span class="line">            <span class="keyword">if</span>(g.ylim != cy) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(g.ylim &lt; cy) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">            cy = g.ylim;</span><br><span class="line">            cx = g.x;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-C-二分，多重背包"><a href="#Prob-C-二分，多重背包" class="headerlink" title="Prob. C 二分，多重背包"></a>Prob. C 二分，多重背包</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><ul><li>首先，可以二分答案，将问题变为判定性问题。</li><li>这个判定性问题是什么呢？假设我们在检查答案 $x$ ，对于每种物品，有价值 $m_i$，我们可以选择 $0$或$1,\cdots, \lfloor\frac{c_i}{x}\rfloor$个，问能否选出一些物品，使得总价值在区间 $[mn, mx]$  的范围内。</li><li>这个问题就是多重背包问题，只需要使用二进制拆分或者单调队列即可解决。（这里实现的是二进制拆分）</li></ul><p>坑点：二分上界 $r$ 别设小了，当时WA了一次。</p><p>时间复杂度： $O(10000 \cdot \log (1e6) \cdot \log c)$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">55</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, mn, mx, m[maxn], c[maxn];</span><br><span class="line"><span class="keyword">bool</span> dp[<span class="number">900</span>][<span class="number">20020</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; weight; weight.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> has = c[i] / x;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(has &gt;= p) &#123;</span><br><span class="line">            has -= p;</span><br><span class="line">            <span class="keyword">if</span>(<span class="number">1L</span>L * p * m[i] &gt;= <span class="number">10000</span>) &#123;</span><br><span class="line">                p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            weight.push_back(p * m[i]);</span><br><span class="line">            p &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(<span class="number">1L</span>L * has * m[i] &lt;= <span class="number">10000</span> &amp;&amp; has)</span><br><span class="line">            weight.push_back(has * m[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> len = weight.size() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(dp[i], dp[i - <span class="number">1</span>], <span class="keyword">sizeof</span>(dp[i]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = weight[i]; j &lt;= <span class="number">10000</span>; ++j)</span><br><span class="line">            dp[i][j] |= dp[i - <span class="number">1</span>][j - weight[i]];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = mn; i &lt;= mx; ++i)</span><br><span class="line">        <span class="keyword">if</span>(dp[len][i]) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;n, &amp;mn, &amp;mx);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;m[i], &amp;c[i]);</span><br><span class="line">    <span class="keyword">int</span> l = <span class="number">0</span>, r = <span class="number">2000000</span>;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l == r - <span class="number">1</span>) mid = r;</span><br><span class="line">        <span class="keyword">if</span>(judge(mid)) l = mid;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, l);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-G-折半搜索"><a href="#Prob-G-折半搜索" class="headerlink" title="Prob. G 折半搜索"></a>Prob. G 折半搜索</h2><p>搜一半，放进map；再搜另一半，在map里查询。</p><p>Thinking &amp; Code by sl</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> maxn 20000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,a,b;</span><br><span class="line">ll c[maxn];</span><br><span class="line"><span class="built_in">map</span>&lt;ll,ll&gt; d;</span><br><span class="line">ll ans=<span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(ll i,ll j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==n/<span class="number">2</span>)&#123;d[j]++;<span class="keyword">return</span>;&#125;</span><br><span class="line">    dfs1(i+<span class="number">1</span>,j+c[i]);</span><br><span class="line">    dfs1(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(ll i,ll j)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(i==n)&#123;ans+=d[-j];<span class="keyword">return</span>;&#125;</span><br><span class="line">    dfs2(i+<span class="number">1</span>,j+c[i]);</span><br><span class="line">    dfs2(i+<span class="number">1</span>,j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;a&gt;&gt;b;</span><br><span class="line"><span class="keyword">for</span>(ll i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">ll cnt1,cnt2;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;cnt1&gt;&gt;cnt2;</span><br><span class="line">c[i]=cnt1*b-cnt2*a;</span><br><span class="line">&#125;</span><br><span class="line">dfs1(<span class="number">0</span>,<span class="number">0</span>);</span><br><span class="line">dfs2(n/<span class="number">2</span>,<span class="number">0</span>) ;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-H-暴力？"><a href="#Prob-H-暴力？" class="headerlink" title="Prob. H 暴力？"></a>Prob. H 暴力？</h2><p>Thinking &amp; Code By sl，明天再仔细看看</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">50000</span>;</span><br><span class="line"><span class="keyword">int</span> n,m,i,j,k,ans[maxn],ask[maxn],b[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;a[maxn];</span><br><span class="line"><span class="keyword">bool</span> w[<span class="number">67108865</span>+<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">char</span> s[<span class="number">1000</span>];</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>,s);</span><br><span class="line">    <span class="keyword">int</span> t=<span class="number">0</span>,len=<span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;len;i++)t|=<span class="number">1</span>&lt;&lt;(s[i]-<span class="string">'a'</span>);</span><br><span class="line">    <span class="keyword">return</span> t;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t=<span class="number">1</span>;t&lt;=k;t++)&#123;</span><br><span class="line">            <span class="keyword">int</span> p=get();</span><br><span class="line">            a[i].push_back(p);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    ans[i]=<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=m;i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;k;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)b[j]=get();</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=b[j];i;i=(i<span class="number">-1</span>)&amp;b[j])</span><br><span class="line">w[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)&#123;</span><br><span class="line">            <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> x=<span class="number">0</span>;x&lt;a[j].size();x++)</span><br><span class="line"><span class="keyword">if</span>(w[a[j][x]]) t++;</span><br><span class="line">            <span class="keyword">if</span>(t&gt;ask[j])&#123;ask[j]=t;ans[j]=i;&#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=k;j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=b[j];i;i=(i<span class="number">-1</span>)&amp;b[j])w[i]=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-K-构造"><a href="#Prob-K-构造" class="headerlink" title="Prob. K 构造"></a>Prob. K 构造</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>要求你构造一个 $n$ 条边的简单多边形，使得顶点都是整点，且每条边的长度都是整数。（ $n\leq 30$ ）</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>个人认为这道题的构造还是非常精妙的。首先我们构造这样的一个三角形：</p><p><img src="triangle.png" alt="构造的三角形"></p><p>我们可以发现，这个三角形是个直角三角形，且三边长都是整数。其斜边中线也是整数。由此，我们可以拼出一列平行四边形，而每个平行四边形四个顶点和中心点都是可以选取的。如下图所示，就展示了九边形的构造方法；类似地可以构造其他情况。</p><p><img src="construction.png" alt="构造九边形"></p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span> </span><br><span class="line">    <span class="keyword">int</span> x, y; </span><br><span class="line">    Point(<span class="keyword">int</span> _ = <span class="number">0</span>, <span class="keyword">int</span> __ = <span class="number">0</span>): x(_), y(__) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; pt) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x + pt.x, y + pt.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">Point up[maxn], low[maxn], mid[maxn], dev;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Point pt)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, pt.x, pt.y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    up[<span class="number">0</span>] = Point(<span class="number">-30</span>, <span class="number">40</span>);</span><br><span class="line">    mid[<span class="number">0</span>] = Point(<span class="number">33</span>, <span class="number">56</span>);</span><br><span class="line">    low[<span class="number">0</span>] = Point(<span class="number">96</span>, <span class="number">72</span>);</span><br><span class="line">    dev = Point(<span class="number">96</span>, <span class="number">72</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">48</span>; ++i) &#123;</span><br><span class="line">        up[i] = up[i - <span class="number">1</span>] + dev;</span><br><span class="line">        mid[i] = mid[i - <span class="number">1</span>] + dev;</span><br><span class="line">        low[i] = low[i - <span class="number">1</span>] + dev;</span><br><span class="line">    &#125;</span><br><span class="line">    n -= <span class="number">2</span>;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"0 0"</span>);</span><br><span class="line">    print(up[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            n -= <span class="number">2</span>;</span><br><span class="line">            print(mid[i - <span class="number">1</span>]);</span><br><span class="line">            print(up[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">2</span>) &#123;</span><br><span class="line">            print(up[i]);</span><br><span class="line">            print(low[i - <span class="number">1</span>]);</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">            print(low[i - <span class="number">1</span>]);</span><br><span class="line">            n = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="赛后补题"><a href="#赛后补题" class="headerlink" title="赛后补题"></a>赛后补题</h1><h2 id="Prob-D-DP-bitset"><a href="#Prob-D-DP-bitset" class="headerlink" title="Prob D. DP, bitset"></a>Prob D. DP, bitset</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>设计状态为 $dp[w][S][C]$，表示宽为 $w$，面积为 $S$，周长为 $C$ 的情况是否可行。为了构造方案，还需记录转移方案数组 $fa[S][C]$ 表示面积为 $S$，周长为 $C​$ 的时应当选哪一个矩形。</p><p>转移就是枚举矩形的长 $l​$ 的过程，注意每一种矩形都可能出现无限次，因此是个完全背包。采用刷表法，那么转移方程就是：<br>$$<br>dp[w-1][S][C]  \rightarrow dp[w][S][C] \tag{1}<br>$$</p><p>$$<br>dp[w][S][C] \rightarrow dp[w][S+ l\cdot w][C+2\cdot(l+w)]     \forall l \in [w,1000] \tag{2}<br>$$<br>在状态转移的过程中更新 $fa$ 数组。但是这么做状态数 $\Theta(\sqrt{S} \cdot S \cdot C)$ ，由于调和级数，转移复杂度均摊下来是 $\Theta(\log n)$ ，总的的复杂度是 $O(\sqrt{S} \cdot S \cdot C \cdot \log S)$ ，无论时间和空间都是比较吃紧的。因此还需要进行优化：</p><ul><li>滚动数组。使用滚动数组可以使空间复杂度降至 $S\cdot C$ ，并且使得代码变得更加简洁；</li><li>bitset优化。注意到转移式 $(2)$ 中对于周长 $C$ 这一维的更新来说， $S,l,w$ 都是确定的，因此这一维只是一个错位意义下的按位或，使用bitset后复杂度除以 $w$ ，可以通过。但是，还有一个问题： $fa$ 数组该如何更新？如果暴力判断哪些状态被更新到，那么复杂度降低的 $w$ 将前功尽弃。实际上，我们用更新后的 bitset异或更新前的，求出哪些位置被更新，然后用bitset自带的<code>_Find_first()</code> 和 <code>_Find_next()</code>函数把这些位置更新，即可继续保持复杂度除以 $w$。这种操作感觉还是第一次在比赛时使用。</li></ul><p>下面列出bitset这两个不太常用的函数的一些性质吧：<a href="https://codeforces.com/blog/entry/43718" target="_blank" rel="noopener">点这里是介绍这两个函数的博客</a></p><ul><li>时间复杂度 $O(\frac nw)$</li><li>如果找不到1，则返回 <code>bitset.size()</code>。</li></ul><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line">pii fa[<span class="number">1020</span>][<span class="number">4040</span>];</span><br><span class="line"><span class="built_in">bitset</span>&lt;4040&gt; dp[<span class="number">1020</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> w = <span class="number">1</span>; w * w &lt;= <span class="number">1000</span>; ++w) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> s = <span class="number">0</span>; s &lt;= <span class="number">1000</span>; ++s) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> l = w; s + w*l &lt;= <span class="number">1000</span>; ++l) &#123;</span><br><span class="line">                <span class="keyword">auto</span> nb = (dp[s]&lt;&lt;(<span class="number">2</span>*(w+l))) | dp[s+w*l];</span><br><span class="line">                <span class="keyword">auto</span> gg = nb ^ dp[s + w*l];</span><br><span class="line">                <span class="keyword">int</span> p = gg._Find_first();</span><br><span class="line">                dp[s + w*l] = nb;</span><br><span class="line">                <span class="keyword">while</span>(p != gg.size()) &#123;</span><br><span class="line">                    fa[s + (w * l)][p] = &#123;w, l&#125;;</span><br><span class="line">                    p = gg._Find_next(p);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="keyword">int</span> S, C;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;S, &amp;C);</span><br><span class="line">        <span class="keyword">if</span>(fa[S][C].first == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">vector</span>&lt;pii&gt; ans;</span><br><span class="line">            <span class="keyword">while</span>(S &amp;&amp; C) &#123;</span><br><span class="line">                <span class="keyword">auto</span> g = fa[S][C];</span><br><span class="line">                ans.push_back(fa[S][C]);</span><br><span class="line">                S -= g.first * g.second;</span><br><span class="line">                C -= (g.first + g.second) * <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, ans[i].first, ans[i].second);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-J-最短路，贪心"><a href="#Prob-J-最短路，贪心" class="headerlink" title="Prob. J 最短路，贪心"></a>Prob. J 最短路，贪心</h2><p>由于在每个地方都可以进行等待，因此一定是越早到达某个位置越好。预处理出每一时刻走某条边最短花费，然后直接求最短路即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2030</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">code</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">isupper</span>(ch)) <span class="keyword">return</span> ch - <span class="string">'A'</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> ch - <span class="string">'a'</span> + <span class="number">1</span> + <span class="number">26</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">priority_queue&lt; pii, <span class="built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; pq;</span><br><span class="line"><span class="keyword">char</span> str[<span class="number">10</span>], G[maxn][maxn];</span><br><span class="line">ll d[maxn], w[<span class="number">66</span>][maxn];</span><br><span class="line"></span><br><span class="line">ll n, m, s;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">jump</span> &#123;</span></span><br><span class="line">    ll a, b, c, d, id;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> iid)</span> </span>&#123; </span><br><span class="line">        id = iid;</span><br><span class="line">        read(a, b, c, d);</span><br><span class="line">        <span class="built_in">memset</span>(w[id], <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(w[id]));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; c; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; c; ++j)</span><br><span class="line">                w[id][i] = min(w[id][i], go(i+j)+j);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">go</span><span class="params">(ll ss)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ((a * ss + b) % c) + d;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; jp[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    read(n, m, s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str), jp[code(str[<span class="number">0</span>])].get(code(str[<span class="number">0</span>]));</span><br><span class="line">    </span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, G[i] + <span class="number">1</span>);</span><br><span class="line">    pq.emplace(s, <span class="number">1</span>);</span><br><span class="line">    d[<span class="number">1</span>] = s;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> tp = pq.top(); pq.pop();</span><br><span class="line">        ll no = tp.second, di = tp.first;</span><br><span class="line">        <span class="keyword">if</span>(d[no] != di) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(G[no][i] != <span class="string">'.'</span>) &#123;</span><br><span class="line">            ll tm = w[code(G[no][i])][di % jp[code(G[no][i])].c];</span><br><span class="line">            <span class="keyword">if</span>(tm + d[no] &lt; d[i]) &#123;</span><br><span class="line">                d[i] = tm + d[no];</span><br><span class="line">                pq.emplace(tm + d[no], i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(d[n] == INF) <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, d[n] - d[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-E-交互，构造"><a href="#Prob-E-交互，构造" class="headerlink" title="Prob. E 交互，构造"></a>Prob. E 交互，构造</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>一共有六个骰子，每个骰子每一面上都有一个字符串，你可以选择一个骰子进行投掷，系统会随机返回这一次投掷的结果，然后你需要把投掷结果的字符串合理拼接，组成一个合法的恒成立的式子。（你最多可以投掷 $1000$ 次）</p><p>这六个骰子的描述如下：</p><ul><li>Type 1: = &lt; &gt; != &lt;= &gt;=</li><li>Type 2: 4 + - ( ( )</li><li>Type 3: 0 / / / 8 +</li><li>Type 4: 2 3 4 5 - )</li><li>Type 5: + - * / 1 9</li><li>Type 6: 6 7 + - ( )</li></ul><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>每个询问到的字符都必须用到，这个条件有些棘手。很容易想到利用 $0\cdot x=0$ 的性质，可是怎么用呢？这要根据比较运算的不同分类讨论。我们有下面的策略：</p><ul><li>首先问出两个0，一个2，”+”, “-“, “*” 符号各问出一个。</li><li>然后不断询问第二个骰子和第四个骰子，保证以下两个条件均满足：<ul><li>首先，括号至少出现一对，并且左右括号数量相等</li><li>其次，非零数字的出现次数比运算符的出现次数多不少于5次</li></ul></li></ul><p>如果这两点满足了，那么我们这样构造方案：</p><ul><li>首先确定比较运算符的左边，如果运算符是”&gt;”，则让左边是0+2；如果是”&lt;”或”!=”，则让左边是0-2。</li><li>然后右边是类似 0*(()) 的形式。右边括号里的数只需要在剩下的数字中插入没用完的运算符即可。</li></ul><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; cnt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> goal;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">nzcount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> ch = <span class="string">'1'</span>; ch &lt;= <span class="string">'9'</span>; ++ch) &#123;</span><br><span class="line">        <span class="built_in">string</span> s = <span class="string">""</span>; s += ch;</span><br><span class="line">        ret += cnt[s];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgncount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> cnt[<span class="string">"+"</span>] + cnt[<span class="string">"-"</span>] + cnt[<span class="string">"*"</span>] + cnt[<span class="string">"/"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> tp)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; tp &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span>.flush();</span><br><span class="line">    <span class="built_in">string</span> ret;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; ret;</span><br><span class="line">    cnt[ret]++;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Try</span><span class="params">(<span class="built_in">string</span> s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(cnt[s] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; s;</span><br><span class="line">        cnt[s]--;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    goal = query(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(cnt[<span class="string">"0"</span>] &lt; <span class="number">2</span>) query(<span class="number">3</span>);</span><br><span class="line">    <span class="keyword">while</span>(cnt[<span class="string">"2"</span>] == <span class="number">0</span> || cnt[<span class="string">"-"</span>] == <span class="number">0</span>) query(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">while</span>(cnt[<span class="string">"*"</span>] == <span class="number">0</span> || cnt[<span class="string">"+"</span>] == <span class="number">0</span>) query(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> c = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">while</span>(c) &#123;</span><br><span class="line">        c = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">while</span>(nzcount() &lt; sgncount() + <span class="number">5</span> || cnt[<span class="string">")"</span>] &lt; cnt[<span class="string">"("</span>]) &#123;</span><br><span class="line">            query(<span class="number">4</span>);</span><br><span class="line">            c = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">while</span>(cnt[<span class="string">"("</span>] &lt; cnt[<span class="string">")"</span>] || cnt[<span class="string">"("</span>] == <span class="number">0</span> || cnt[<span class="string">")"</span>] == <span class="number">0</span>) &#123;</span><br><span class="line">            query(<span class="number">2</span>);</span><br><span class="line">            c = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line"></span><br><span class="line">    assert(Try(<span class="string">"0"</span>));</span><br><span class="line">    <span class="keyword">if</span>(goal == <span class="string">"&gt;"</span>) &#123;</span><br><span class="line">        Try(<span class="string">"+"</span>);</span><br><span class="line">        Try(<span class="string">"2"</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(goal == <span class="string">"&lt;"</span> || goal == <span class="string">"!="</span>) &#123;</span><br><span class="line">        Try(<span class="string">"-"</span>);</span><br><span class="line">        Try(<span class="string">"2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    assert(Try(goal));</span><br><span class="line">    assert(Try(<span class="string">"0"</span>));</span><br><span class="line">    assert(Try(<span class="string">"*"</span>));</span><br><span class="line">    <span class="keyword">while</span>(Try(<span class="string">"("</span>)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="keyword">while</span>(sgncount() + nzcount()) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; ++i)</span><br><span class="line">            <span class="keyword">if</span>(Try(to_string(i))) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span>(Try(<span class="string">"+"</span>) || Try(<span class="string">"-"</span>) || Try(<span class="string">"*"</span>) || Try(<span class="string">"/"</span>))</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(Try(<span class="string">")"</span>)) <span class="keyword">continue</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    <span class="built_in">cout</span>.flush();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-L-状压dp，卡常数"><a href="#Prob-L-状压dp，卡常数" class="headerlink" title="Prob. L 状压dp，卡常数"></a>Prob. L 状压dp，卡常数</h2><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>首先，同一行或同一列边界上如果是箱子，且字母不同，则会使答案加倍；把这些加倍的因子处理出来，我们就可以把箱子视作相同了。</p><p>令 $dp[row][col][mask][k]$ 表示考虑到第 $row$ 行，第 $col$ 列，第 $i$ 列剩余未填数量为 $mask$ 三进制表示下第 $i$ 位，第 $row$ 行还剩 $k$ 个没有填，则枚举在这一个的行动即可转移。</p><p>必须使用滚动数组优化内存，而这样的复杂度是 $O(n^2 3^{n+1})$ 的，实际上还是会TLE on test 20。。。所以我哕了。Claris的代码也会TLE。</p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><p>这份代码会TLE on test 20。。。也没招了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-O3"</span>, <span class="meta-string">"-Ofast"</span>, <span class="meta-string">"-finline"</span>, <span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">20</span>][<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> n, m, rc[<span class="number">20</span>], cc[<span class="number">20</span>];</span><br><span class="line">ll p3[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> bin[<span class="number">1600000</span>];</span><br><span class="line">ll ans, dp[<span class="number">2</span>][<span class="number">1600000</span>][<span class="number">3</span>], fac = <span class="number">1</span>, msk, full;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> tri, <span class="keyword">int</span> pos)</span> </span>&#123; <span class="keyword">return</span> tri / p3[pos] % <span class="number">3</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">precalc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p3[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">23</span>; ++i) p3[i] = p3[i - <span class="number">1</span>] * <span class="number">3L</span>L;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; p3[<span class="number">13</span>]; ++i)</span><br><span class="line">        bin[i] = (bin[i / <span class="number">3</span>] &lt;&lt; <span class="number">1</span>) + (i % <span class="number">3</span> != <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    precalc();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = n + <span class="number">2</span>, full = p3[n];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">auto</span> check = [&amp;](<span class="keyword">char</span> a, <span class="keyword">char</span> b) &#123; </span><br><span class="line">        <span class="keyword">if</span>(a != <span class="string">'#'</span> &amp;&amp; b != <span class="string">'#'</span> &amp;&amp; a != b) fac &lt;&lt;= <span class="number">1</span>; </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        check(s[<span class="number">0</span>][i], s[m<span class="number">-1</span>][i]);</span><br><span class="line">        check(s[i][<span class="number">0</span>], s[i][m<span class="number">-1</span>]);</span><br><span class="line">        cc[i] += (s[<span class="number">0</span>][i] != <span class="string">'#'</span>) + (s[m<span class="number">-1</span>][i] != <span class="string">'#'</span>);</span><br><span class="line">        rc[i] += (s[i][<span class="number">0</span>] != <span class="string">'#'</span>) + (s[i][m<span class="number">-1</span>] != <span class="string">'#'</span>);</span><br><span class="line">        msk += p3[i<span class="number">-1</span>] * (cc[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    dp[<span class="number">0</span>][msk][<span class="number">0</span>] = fac;</span><br><span class="line">    <span class="keyword">bool</span> e = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> row = <span class="number">1</span>; row &lt;= n; ++row) &#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp[e ^ <span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (dp[e ^ <span class="number">1</span>][<span class="number">0</span>]) * (msk + <span class="number">3</span>));</span><br><span class="line">        e ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> rrr = rc[row];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt;= msk; ++S)</span><br><span class="line">            dp[e][S][rrr] = dp[e^<span class="number">1</span>][S][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> col = <span class="number">0</span>; col &lt; n; ++col) <span class="keyword">if</span>(s[row][col+<span class="number">1</span>] == <span class="string">'.'</span>) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(dp[e ^ <span class="number">1</span>], <span class="number">0</span>, <span class="keyword">sizeof</span> (dp[e ^ <span class="number">1</span>][<span class="number">0</span>]) * (msk + <span class="number">3</span>));</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt;= msk; ++S) &#123;</span><br><span class="line">                ll* now = dp[e][S], *gg = dp[e^<span class="number">1</span>][S];</span><br><span class="line">                <span class="keyword">if</span>(rrr==<span class="number">1</span>) gg[<span class="number">0</span>] += now[<span class="number">1</span>];</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(rrr==<span class="number">2</span>) &#123;</span><br><span class="line">                    gg[<span class="number">0</span>] += now[<span class="number">1</span>];</span><br><span class="line">                    gg[<span class="number">1</span>] += now[<span class="number">2</span>];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(bin[S] &gt;&gt; col &amp; <span class="number">1</span>) &#123;</span><br><span class="line">                    gg = dp[e^<span class="number">1</span>][S-p3[col]];</span><br><span class="line">                    <span class="keyword">if</span>(rrr==<span class="number">0</span>) gg[<span class="number">0</span>] += now[<span class="number">0</span>];</span><br><span class="line">                    <span class="keyword">else</span> <span class="keyword">if</span>(rrr==<span class="number">1</span>) &#123;</span><br><span class="line">                        gg[<span class="number">0</span>] += now[<span class="number">0</span>];</span><br><span class="line">                        gg[<span class="number">1</span>] += now[<span class="number">1</span>];</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(rrr == <span class="number">2</span>) &#123;</span><br><span class="line">                        gg[<span class="number">0</span>] += now[<span class="number">0</span>];</span><br><span class="line">                        gg[<span class="number">1</span>] += now[<span class="number">1</span>];</span><br><span class="line">                        gg[<span class="number">2</span>] += now[<span class="number">2</span>];</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            e ^= <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, dp[e][<span class="number">0</span>][<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Prob-M-高精度，树dp"><a href="#Prob-M-高精度，树dp" class="headerlink" title="Prob. M 高精度，树dp"></a>Prob. M 高精度，树dp</h3><p>显然的树dp。。。但要用高精度就很烦。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> __int128 lll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">10000010</span>, M = <span class="number">50</span>;</span><br><span class="line"><span class="keyword">const</span> ll MO = <span class="number">1000000000000000000U</span>LL;</span><br><span class="line"><span class="keyword">int</span> n, i;</span><br><span class="line"><span class="keyword">char</span> a[N];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">P</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ll v[<span class="number">3</span>];</span><br><span class="line">    P() &#123; v[<span class="number">0</span>] = v[<span class="number">1</span>] = v[<span class="number">2</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    P <span class="keyword">operator</span>+(<span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        P c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            c.v[i] = v[i];</span><br><span class="line">        c.v[<span class="number">0</span>] += b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (c.v[i] &gt;= MO)</span><br><span class="line">            &#123;</span><br><span class="line">                c.v[i + <span class="number">1</span>] += c.v[i] / MO;</span><br><span class="line">                c.v[i] -= MO;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    P <span class="keyword">operator</span>+(<span class="keyword">const</span> P &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        P c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            c.v[i] = v[i] + b.v[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (c.v[i] &gt;= MO)</span><br><span class="line">            &#123;</span><br><span class="line">                c.v[i + <span class="number">1</span>] += c.v[i] / MO;</span><br><span class="line">                c.v[i] -= MO;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    P <span class="keyword">operator</span>*(<span class="keyword">int</span> b)</span><br><span class="line">    &#123;</span><br><span class="line">        P c;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            c.v[i] = v[i] * b;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            c.v[i + <span class="number">1</span>] += c.v[i] / MO, c.v[i] %= MO;</span><br><span class="line">        c.v[<span class="number">2</span>] %= MO;</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    P <span class="keyword">operator</span>*(<span class="keyword">const</span> P &amp;b)</span><br><span class="line">    &#123;</span><br><span class="line">        P c;</span><br><span class="line">        <span class="keyword">static</span> lll f[<span class="number">3</span>];</span><br><span class="line">        f[<span class="number">0</span>] = f[<span class="number">1</span>] = f[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (v[i])</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; i + j &lt; <span class="number">3</span>; j++)</span><br><span class="line">                    <span class="keyword">if</span> (b.v[j])</span><br><span class="line">                        f[i + j] += (lll)v[i] * b.v[j];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">            <span class="keyword">if</span> (f[i] &gt;= MO)</span><br><span class="line">                f[i + <span class="number">1</span>] += f[i] / MO, f[i] %= MO;</span><br><span class="line">        <span class="keyword">if</span> (f[<span class="number">2</span>] &gt;= MO)</span><br><span class="line">            f[<span class="number">2</span>] %= MO;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            c.v[i] = f[i];</span><br><span class="line">        <span class="keyword">return</span> c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">const</span> P &amp;b)</span></span></span><br><span class="line"><span class="function">    </span>&#123; <span class="comment">//max=</span></span><br><span class="line">        <span class="keyword">int</span> i;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">2</span>; ~i; i--)</span><br><span class="line">            <span class="keyword">if</span> (b.v[i] != v[i])</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (i &lt; <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">if</span> (b.v[i] &lt; v[i])</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)</span><br><span class="line">            v[i] = b.v[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">while</span> (i &amp;&amp; !v[i])</span><br><span class="line">            i--;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%llu"</span>, v[i]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = i - <span class="number">1</span>; ~j; j--)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%018llu"</span>, v[j]);</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; f[M], g[M], p[M], ans, ff, gg, mx[M];</span><br><span class="line"><span class="keyword">int</span> d[M];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> seed, base;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    f[k] = g[k] = mx[k] = P();</span><br><span class="line">    d[k] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> y = x &lt;&lt; <span class="number">1</span> | i;</span><br><span class="line">        <span class="keyword">if</span> (y &gt; n)</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        dfs(y, k + <span class="number">1</span>);</span><br><span class="line">        ff = (f[k + <span class="number">1</span>] * <span class="number">10</span>) + ((<span class="keyword">int</span>)a[y]);</span><br><span class="line">        gg = g[k + <span class="number">1</span>] + (p[d[k + <span class="number">1</span>]] * ((<span class="keyword">int</span>)a[y]));</span><br><span class="line">        mx[k].up((ff * p[d[k]]) + g[k]);</span><br><span class="line">        mx[k].up((f[k] * p[d[k + <span class="number">1</span>] + <span class="number">1</span>]) + gg);</span><br><span class="line">        f[k].up(ff);</span><br><span class="line">        g[k].up(gg);</span><br><span class="line">        d[k] = max(d[k], d[k + <span class="number">1</span>] + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ans = ans + mx[k];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%u"</span>, &amp;n, &amp;seed);</span><br><span class="line">    base = (<span class="number">1U</span> &lt;&lt; <span class="number">31</span>) - <span class="number">1</span>;</span><br><span class="line">    p[<span class="number">0</span>].v[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; M; i++)</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] * <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] = ((seed &amp; base) &gt;&gt; <span class="number">16</span>) % <span class="number">9</span> + <span class="number">1</span>;</span><br><span class="line">        seed = seed * <span class="number">1103515245</span> + <span class="number">12345</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    ans.write();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Urals&quot;&gt;&lt;a href=&quot;#XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Urals&quot; class=&quot;headerlink&quot; title=&quot;XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Urals&quot;&gt;&lt;/a&gt;XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Urals&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;K&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;L&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;M&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:34&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3:56&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:37&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:23&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3:03&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2:29&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;—-&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;AC&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;AC&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;AC&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;TLE&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;AC&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+3&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;*1&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;*3&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+1&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;+3&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;*2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;*9&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;*&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Total AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;183&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;131&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;138&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;88&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;146&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;120&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;116&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;139&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;47&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010378&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.cnblogs.com/clrs97/p/7524291.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Claris的题解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;dirt $60\%​$ 啊，还是要提高代码准确性啊。&lt;/p&gt;
&lt;p&gt;总览：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved 6 out of 13&lt;/li&gt;
&lt;li&gt;Upsolved 11 out of 13&lt;/li&gt;
&lt;li&gt;Rank 108 out of 202 （击败 $46.53\%​$ ）&lt;/li&gt;
&lt;li&gt;这场比赛动态规划涉及较多&lt;/li&gt;
&lt;li&gt;C是二分加多重背包&lt;/li&gt;
&lt;li&gt;D是bitset优化完全背包的dp，比赛时被这道题卡了。&lt;/li&gt;
&lt;li&gt;K是一个有趣的构造&lt;/li&gt;
&lt;li&gt;L 题状压dp卡常数！&lt;/li&gt;
&lt;li&gt;M题必须手写高精度！&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
      <category term="Opentrains" scheme="http://yoursite.com/tags/Opentrains/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="背包问题" scheme="http://yoursite.com/tags/%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    
      <category term="最短路" scheme="http://yoursite.com/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="bitset" scheme="http://yoursite.com/tags/bitset/"/>
    
      <category term="折半搜索" scheme="http://yoursite.com/tags/%E6%8A%98%E5%8D%8A%E6%90%9C%E7%B4%A2/"/>
    
  </entry>
  
  <entry>
    <title>代码模板库</title>
    <link href="http://yoursite.com/2019/03/05/%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF%E5%BA%93/"/>
    <id>http://yoursite.com/2019/03/05/代码模板库/</id>
    <published>2019-03-05T13:14:58.000Z</published>
    <updated>2019-04-27T12:26:22.890Z</updated>
    
    <content type="html"><![CDATA[<p>常用算法的模板~</p><a id="more"></a><h1 id="对拍"><a href="#对拍" class="headerlink" title="对拍"></a>对拍</h1><h2 id="传统题对拍"><a href="#传统题对拍" class="headerlink" title="传统题对拍"></a>传统题对拍</h2><p>Python:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> time <span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> os <span class="keyword">import</span> system</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(cmd, msg)</span>:</span></span><br><span class="line">    start = time()</span><br><span class="line">    ret = system(cmd)</span><br><span class="line">    <span class="keyword">if</span> ret != <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"RUNTIME ERROR!"</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    duration = (time() - start) * <span class="number">1000.0</span></span><br><span class="line">    print(<span class="string">"&#123;&#125; ms elapsed (&#123;&#125;)"</span>.format(duration, msg))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> test <span class="keyword">in</span> range(<span class="number">1000</span>):</span><br><span class="line">    run(<span class="string">'python igen.py &gt; in.txt'</span>, <span class="string">"generator"</span>)</span><br><span class="line">    run(<span class="string">'irel &lt; in.txt &gt; out.txt'</span>, <span class="string">"my program"</span>)</span><br><span class="line">    run(<span class="string">'iac &lt; in.txt &gt; outac.txt'</span>, <span class="string">"std program"</span>)</span><br><span class="line">    <span class="keyword">if</span> system(<span class="string">"fc out.txt outac.txt &gt; fc.log"</span>):</span><br><span class="line">        print(<span class="string">"Wrong answer on test &#123;&#125;\n"</span>.format(test + <span class="number">1</span>))</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">"Accepted on test &#123;&#125;\n"</span>.format(test + <span class="number">1</span>))</span><br></pre></td></tr></table></figure><p>Windows 批处理：</p><figure class="highlight bat"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@<span class="built_in">echo</span> off</span><br><span class="line"><span class="built_in">set</span> /a tst = <span class="number">1</span></span><br><span class="line">:again</span><br><span class="line">gen &gt; <span class="keyword">in</span>.txt</span><br><span class="line">aac &lt; <span class="keyword">in</span>.txt &gt; outac.txt</span><br><span class="line">a &lt; <span class="keyword">in</span>.txt &gt; out.txt</span><br><span class="line">fc out.txt outac.txt &gt; fc.log</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">errorlevel</span> <span class="number">1</span> (<span class="built_in">echo</span> Wrong Answer) <span class="keyword">else</span> (</span><br><span class="line">    <span class="built_in">echo</span> Accepted on test <span class="variable">%tst%</span></span><br><span class="line">    <span class="built_in">set</span> /a tst = <span class="variable">%tst%</span> + <span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> <span class="variable">%tst%</span> <span class="keyword">LEQ</span> <span class="number">100</span> <span class="keyword">goto</span> again <span class="keyword">else</span> <span class="built_in">echo</span> Pretests Passed</span><br><span class="line">)</span><br><span class="line"><span class="built_in">echo</span> Pretests Passed</span><br></pre></td></tr></table></figure><h2 id="交互题"><a href="#交互题" class="headerlink" title="交互题"></a>交互题</h2><p>双线程对拍</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># This is a small program that runs two processes two processes, connecting the</span></span><br><span class="line"><span class="comment"># stdin of each one to the stdout of the other.</span></span><br><span class="line"><span class="comment"># It doesn't perform a lot of checking, so many errors may</span></span><br><span class="line"><span class="comment"># be caught internally by Python (e.g., if your command line has incorrect</span></span><br><span class="line"><span class="comment"># syntax) or not caught at all (e.g., if the judge or solution hangs).</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Run this as:</span></span><br><span class="line"><span class="comment"># python interactive_runner.py &lt;cmd_line_judge&gt; -- &lt;cmd_line_solution&gt;</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># For example:</span></span><br><span class="line"><span class="comment"># python interactive_runner.py python judge.py 0 -- ./my_binary</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This will run the first test set of a python judge called "judge.py" that</span></span><br><span class="line"><span class="comment"># receives the test set number (starting from 0) via command line parameter</span></span><br><span class="line"><span class="comment"># with a solution compiled into a binary called "my_binary".</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># This is only intended as a convenient tool to help contestants test solutions</span></span><br><span class="line"><span class="comment"># locally. In particular, it is not identical to the implementation on our</span></span><br><span class="line"><span class="comment"># server, which is more complex.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"><span class="keyword">import</span> sys, subprocess, threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubprocessThread</span><span class="params">(threading.Thread)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,</span></span></span><br><span class="line"><span class="function"><span class="params">               args,</span></span></span><br><span class="line"><span class="function"><span class="params">               stdin_pipe=subprocess.PIPE,</span></span></span><br><span class="line"><span class="function"><span class="params">               stdout_pipe=subprocess.PIPE,</span></span></span><br><span class="line"><span class="function"><span class="params">               stderr_pipe=subprocess.PIPE)</span>:</span></span><br><span class="line">    threading.Thread.__init__(self)</span><br><span class="line">    self.p = subprocess.Popen(</span><br><span class="line">        args,</span><br><span class="line">        stdin=stdin_pipe,</span><br><span class="line">        stdout=stdout_pipe,</span><br><span class="line">        stderr=stderr_pipe)</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">      self.return_code = self.p.wait()</span><br><span class="line">      self.stdout = <span class="string">""</span> <span class="keyword">if</span> self.p.stdout <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> self.p.stdout.read()</span><br><span class="line">      self.stderr = <span class="string">""</span> <span class="keyword">if</span> self.p.stderr <span class="keyword">is</span> <span class="keyword">None</span> <span class="keyword">else</span> self.p.stderr.read()</span><br><span class="line">    <span class="keyword">except</span> (SystemError, OSError):</span><br><span class="line">      self.return_code = <span class="number">-1</span></span><br><span class="line">      self.stdout = <span class="string">""</span></span><br><span class="line">      self.stderr = <span class="string">"The process crashed or produced too much output."</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> sys.argv.count(<span class="string">"--"</span>) == <span class="number">1</span>, (</span><br><span class="line">    <span class="string">"There should be exactly one instance of '--' in the command line."</span>)</span><br><span class="line">sep_index = sys.argv.index(<span class="string">"--"</span>)</span><br><span class="line">judge_args = sys.argv[<span class="number">1</span>:sep_index]</span><br><span class="line">sol_args = sys.argv[sep_index + <span class="number">1</span>:]</span><br><span class="line"></span><br><span class="line">t_sol = SubprocessThread(sol_args)</span><br><span class="line">t_judge = SubprocessThread(judge_args, stdin_pipe=t_sol.p.stdout,</span><br><span class="line">                           stdout_pipe=t_sol.p.stdin)</span><br><span class="line">t_sol.start()</span><br><span class="line">t_judge.start()</span><br><span class="line">t_sol.join()</span><br><span class="line">t_judge.join()</span><br><span class="line">print(<span class="string">"Judge return code:"</span>, t_judge.return_code)</span><br><span class="line">print(<span class="string">"Judge standard error:"</span>, t_judge.stderr.decode())</span><br><span class="line">print(<span class="string">"Solution return code:"</span>, t_sol.return_code)</span><br><span class="line">print(<span class="string">"Solution standard error:"</span>, t_sol.stderr.decode())</span><br></pre></td></tr></table></figure><h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><h2 id="后缀数据结构"><a href="#后缀数据结构" class="headerlink" title="后缀数据结构"></a>后缀数据结构</h2><h3 id="后缀数组"><a href="#后缀数组" class="headerlink" title="后缀数组"></a>后缀数组</h3><p>[2019.3.5]</p><p>后缀数组每个元素 $SA[i]$ 表示字典序第 $i$ 大的后缀， $rk[i]$ 表示后缀 $i$ 的排名。（都从1开始）</p><p>高度数组 $height[i]$ 表示后缀编号 $SA[i-1]$ 与后缀编号 $SA[i]$ 的 $ lcp$ 。</p><p>任意两个后缀的 lcp: $lcp(i, j) = RMQ(height, rk[i + 1], rk[j])$，即在 $height$ 数组中求得下标区间 $\big[rk[i+1],rk[j]\big]$ 中的最小元素值。</p><p>下面实现的是倍增法，在 $O(n\log n)$ 时间内求得SA。</p><ul><li>注意字符集下标必须从1开始！！</li><li>空间别忘记开两倍，字符数组后一半必须都是0！！</li><li>注意抄模版时别把基数排序中的数组张冠李戴！！</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1002000</span>;</span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> n, a[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> sa[maxn &lt;&lt; <span class="number">1</span>], rk[maxn &lt;&lt; <span class="number">1</span>], height[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> xx[maxn &lt;&lt; <span class="number">1</span>], yy[maxn &lt;&lt; <span class="number">1</span>], c[maxn &lt;&lt; <span class="number">1</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> k)</span> </span>&#123; <span class="keyword">return</span> yy[x]==yy[y] &amp;&amp; yy[x+k]==yy[y+k]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_sa</span><span class="params">(<span class="keyword">int</span>* s, <span class="keyword">int</span> n, <span class="keyword">int</span> sz)</span> </span>&#123; <span class="comment">// [1, sz]</span></span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (sz + <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) c[xx[i] = s[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz;++i) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n ; i ; --i) sa[c[xx[i]]--] = i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> p = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n - k + <span class="number">1</span>; i &lt;= n; ++i) yy[++p] = i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(sa[i] &gt; k)</span><br><span class="line">            yy[++p] = sa[i] - k;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">memset</span>(c, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (sz + <span class="number">10</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) c[xx[yy[i]]]++;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i ; --i) sa[c[xx[yy[i]]]--] = yy[i];</span><br><span class="line">        swap(xx, yy);</span><br><span class="line">        p = xx[sa[<span class="number">1</span>]] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">            xx[sa[i]] = cmp(sa[i], sa[i<span class="number">-1</span>], k) ? p : ++p;</span><br><span class="line">        <span class="keyword">if</span>(p &gt;= n) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">else</span> sz = p;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) rk[sa[i]] = i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>, p = <span class="number">0</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p) --p;</span><br><span class="line">        <span class="keyword">while</span>(s[i + p] == s[sa[rk[i] - <span class="number">1</span>] + p]) p++;</span><br><span class="line">        height[rk[i]] = p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Sample test: aabaaaab</span></span><br><span class="line">    <span class="comment">// answer: 4 5 6 1 7 2 8 3 | 3 2 3 1 2 0 1</span></span><br><span class="line">    <span class="comment">// Sample test: ababa</span></span><br><span class="line">    <span class="comment">// answer: 5 3 1 4 2 | 1 3 0 2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FREOPEN</span></span><br><span class="line">        freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="comment">// freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(str + <span class="number">1</span>);</span><br><span class="line">    rep(i, n) a[i] = str[i] - <span class="string">'a'</span> + <span class="number">1</span>;</span><br><span class="line">    build_sa(a, n, <span class="number">150</span>);</span><br><span class="line">    rep(i, n) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, sa[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, height[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后缀自动机"><a href="#后缀自动机" class="headerlink" title="后缀自动机"></a>后缀自动机</h3><p>[2019.3.5]</p><p>这里以 <a href="https://www.luogu.org/problemnew/show/P3804" target="_blank" rel="noopener">洛谷3804</a> 为例，题意是求出 $S$ 的所有出现次数不为 $1$ 的子串的出现次数乘上该子串长度的最大值，即：<br>$$<br>\max _{1\leq l\leq r\leq n} (r-l+1) \cdot occ(S[l,r])<br>$$<br>后缀自动机上每个节点的 $right$ 集合的大小就是这个 $right$ 等价类中任何一个字符串的出现次数。由此在parent树上$dp$，令后缀节点的 $dp$ 值为 $1$，其他节点的 $dp$ 值为其儿子的 $dp$ 值之和，由此求出各个节点 $right$ 集合大小即可。</p><p>有几个可以优化的地方：</p><ul><li>后缀自动机parent树上dp需要进行拓扑排序，可以直接按照长度计数排序，先算长度长的。</li><li>最好不要使用指针来实现后缀自动机。这是因为 $64$ 位系统上指针占用的空间为 $64$ 字节，很可能会MLE！</li></ul><p>坑点：</p><ul><li>注意这里定义 $nullptr$ 为 $-1$，不要和根节点 $root=0$ 搞混！</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2002000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">state</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> go[<span class="number">26</span>], par, len, sz;</span><br><span class="line">    state() &#123; <span class="built_in">memset</span>(go, <span class="number">-1</span>, <span class="keyword">sizeof</span> go); par = <span class="number">-1</span>; &#125;</span><br><span class="line">&#125; sam[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> last = <span class="number">0</span>, root = <span class="number">0</span>, tot = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> np = ++tot;</span><br><span class="line">    sam[np].len = sam[last].len + <span class="number">1</span>;</span><br><span class="line">    sam[np].sz = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> p = last;</span><br><span class="line">    <span class="keyword">while</span>(p != <span class="number">-1</span> &amp;&amp; sam[p].go[w] == <span class="number">-1</span>)</span><br><span class="line">        sam[p].go[w] = np, p = sam[p].par;</span><br><span class="line">    <span class="keyword">if</span>(p == <span class="number">-1</span>) sam[np].par = root;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> q = sam[p].go[w];</span><br><span class="line">        <span class="keyword">if</span>(sam[q].len == sam[p].len + <span class="number">1</span>) &#123;</span><br><span class="line">            sam[np].par = q;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            sam[++tot].par = sam[q].par;</span><br><span class="line">            <span class="built_in">memcpy</span>(sam[tot].go, sam[q].go, <span class="keyword">sizeof</span> sam[tot].go);</span><br><span class="line">            sam[tot].len = sam[p].len + <span class="number">1</span>;</span><br><span class="line">            sam[q].par = tot;</span><br><span class="line">            sam[np].par = tot;</span><br><span class="line">            <span class="keyword">while</span>(p != <span class="number">-1</span> &amp;&amp; sam[p].go[w] == q)</span><br><span class="line">                sam[p].go[w] = tot, p = sam[p].par;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    last = np;</span><br><span class="line">    <span class="comment">// Sample: baa (2)</span></span><br><span class="line">    <span class="comment">// Sample: aabaaaba (8)</span></span><br><span class="line">    <span class="comment">// Sample: aaaa (6)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> str[maxn];</span><br><span class="line"><span class="keyword">int</span> n, c[maxn], a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, str);</span><br><span class="line">    n = <span class="built_in">strlen</span>(str);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) insert(str[i] - <span class="string">'a'</span>);</span><br><span class="line">    rep(i, tot) c[sam[i].len]++;</span><br><span class="line">    rep(i, n) c[i] += c[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i; --i) a[c[sam[i].len]--] = i;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i ; --i)</span><br><span class="line">        sam[sam[a[i]].par].sz += sam[a[i]].sz;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = tot; i ; --i) <span class="keyword">if</span>(sam[i].sz &gt; <span class="number">1</span>)</span><br><span class="line">        ans = max(ans, <span class="number">1L</span>L * sam[i].sz * sam[i].len);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="结论集锦"><a href="#结论集锦" class="headerlink" title="结论集锦"></a>结论集锦</h2><h3 id="线段随机-n-1-个点第-k-短线段的期望长度"><a href="#线段随机-n-1-个点第-k-短线段的期望长度" class="headerlink" title="线段随机 $n-1$ 个点第 $k$ 短线段的期望长度"></a>线段随机 $n-1$ 个点第 $k$ 短线段的期望长度</h3><p>在一个长度为 $1$ 的线段上随机撒 $n-1$ 个点，形成了 $n$ 条线段，那么这 $n$ 条线段中第 $k$ 短（$k\leq n$）的线段期望长度就是：<br>$$<br>\frac 1n \sum_{i=0}^{k-1} \frac 1{n-i}<br>$$<br>例如， $n$ 条线段中最短的线段期望长度是 $\frac 1 {n^2}$，第二短的期望是 $\frac 1n (\frac 1n + \frac 1{n-1})$ ，依此类推。</p><h3 id="Comet-OJ-contest-0-F-几何结论"><a href="#Comet-OJ-contest-0-F-几何结论" class="headerlink" title="Comet OJ contest #0 F. 几何结论"></a>Comet OJ contest #0 F. 几何结论</h3><p><a href="https://www.cometoj.com/contest/34/problem/F?problem_id=1478" target="_blank" rel="noopener">题目链接</a> </p><p>对于给出 $n$ 条边长，要摆出非退化 $n$ 边形的问题， $n$ 边形存在的条件是:<br>$$<br>\sum_{i=1}^n a_i &gt; 2 \times \max_{1\leq i\leq n}a_i<br>$$<br>而要使这个 $n$ 边形面积最大，那么一定有组成的 $n$ 边形是凸多边形，且是圆内接多边形，因此这个多边形的边的顺序也是可以随意调换的。这个圆形的半径同样也是唯一确定的，可以使用二分搜索来查找。</p><p>而这个二分搜索也是需要有一定技巧的。要分为多边形通过圆心和不通过圆心两类进行讨论。</p><p>下面的代码输入边长序列 $e$（要求有序，从小到大），返回能产生的最大凸多边形面积。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">long</span> <span class="keyword">double</span> <span class="title">FindMaxAreaPolygon</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> tot = <span class="number">0</span>, sz = e.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">if</span>(state &gt;&gt; i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            e.push_back(a[i]);</span><br><span class="line">            tot += a[i];</span><br><span class="line">        &#125;</span><br><span class="line">    sz = e.size();</span><br><span class="line">    <span class="keyword">if</span>(tot &lt;= e.back() * <span class="number">2</span>) &#123;</span><br><span class="line">        valid[state] = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.0L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    valid[state] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">bool</span> half = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> TooLarge = [&amp;](<span class="keyword">long</span> <span class="keyword">double</span> R) -&gt; <span class="keyword">bool</span> &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> theta = <span class="number">0.0L</span>, f = R*R*<span class="number">2.0L</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz - <span class="number">1</span>; ++i)</span><br><span class="line">            theta += <span class="built_in">acos</span>((f - <span class="number">1.0L</span>*e[i]*e[i]) / f);</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> last = <span class="built_in">acos</span>((f - <span class="number">1.0L</span>*e[sz<span class="number">-1</span>]*e[sz<span class="number">-1</span>]) / f);</span><br><span class="line">        <span class="keyword">if</span>(theta &lt;= PI) &#123; </span><br><span class="line">            half = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> theta - last &gt; <span class="number">0.0L</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            half = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">return</span> theta + last &lt; <span class="number">2.0L</span> * PI;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> l = (<span class="keyword">long</span> <span class="keyword">double</span>)e.back() / <span class="number">2.0L</span>, r = <span class="number">10000</span>;</span><br><span class="line">    rep(i, <span class="number">100</span>) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> mid = (l + r) / <span class="number">2.0L</span>;</span><br><span class="line">        <span class="keyword">if</span>(TooLarge(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid;</span><br><span class="line">    &#125;</span><br><span class="line">    TooLarge(r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">double</span> sq = <span class="number">0.0L</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> p = (r + r + e[i]) / <span class="number">2.0L</span>;</span><br><span class="line">        <span class="keyword">long</span> <span class="keyword">double</span> triangle = sqrtl(p * (p-e[i])) * (p-r);</span><br><span class="line">        <span class="keyword">if</span>(i == sz - <span class="number">1</span> &amp;&amp; half) sq -= triangle;</span><br><span class="line">        <span class="keyword">else</span> sq += triangle;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="数论"><a href="#数论" class="headerlink" title="数论"></a>数论</h2><h3 id="取模运算"><a href="#取模运算" class="headerlink" title="取模运算"></a>取模运算</h3><p>两套操作</p><p>第一套是实现了一个有限域的类，适合于可以粘贴代码的比赛，写起公式来比较爽：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type int</span></span><br><span class="line"><span class="keyword">namespace</span> ModOp &#123;</span><br><span class="line">    Type MOD;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Type <span class="title">mo</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MF</span> &#123;</span></span><br><span class="line">        Type v;</span><br><span class="line">        MF(Type x = <span class="number">0</span>): v(mo(x)) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">Type</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> + (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v + f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v - f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> * (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">1L</span>L * v * f.v % MOD; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> / (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v / f.v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - () <span class="keyword">const</span> &#123; <span class="keyword">return</span> MOD - v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &gt;&gt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;&gt; idx; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;&lt; idx; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v == f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v != f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out, MF f) &#123; <span class="keyword">return</span> out &lt;&lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, MF f) &#123; <span class="keyword">return</span> in &gt;&gt; f.v; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v) != <span class="number">-1</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"%d"</span>, v); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">qpow</span><span class="params">(T x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    T ret = T(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> ModOp::MF;</span><br></pre></td></tr></table></figure><p>第二类：即把加法乘法写成函数形式。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="二次剩余"><a href="#二次剩余" class="headerlink" title="二次剩余"></a>二次剩余</h3><p>[2019.3.18]</p><h4 id="相关定理"><a href="#相关定理" class="headerlink" title="相关定理"></a>相关定理</h4><h4 id="雅克比符号"><a href="#雅克比符号" class="headerlink" title="雅克比符号"></a>雅克比符号</h4><p>使用高斯二次互反律进行，又是一种类欧几里得算法，复杂度 $O(\log \min \{a,n\})$ 。</p><p>Accepted on <a href="https://cn.vjudge.net/problem/HDU-3589" target="_blank" rel="noopener">HDU3589</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Jacobi</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    a %= n;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">0</span> || (a%<span class="number">2</span>==<span class="number">0</span> &amp;&amp; n%<span class="number">2</span>==<span class="number">0</span>)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">1</span>) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == <span class="number">2</span>) <span class="keyword">return</span> (((n&amp;<span class="number">7</span>) == <span class="number">1</span>) || ((n&amp;<span class="number">7</span>) == <span class="number">7</span>)) ? <span class="number">1</span> : <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span>((a &amp; <span class="number">1</span>) == <span class="number">0</span>) <span class="keyword">return</span> Jacobi(<span class="number">2</span>, n) * Jacobi(a / <span class="number">2</span>, n);</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">2</span> == <span class="number">0</span>) <span class="keyword">return</span> Jacobi(a, <span class="number">2</span>) * Jacobi(a, n / <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">int</span> sgn = ((a - <span class="number">1</span>) / <span class="number">2</span> * (n - <span class="number">1</span>) / <span class="number">2</span>) &amp; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> Jacobi(n, a) * (sgn ? <span class="number">-1</span> : <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="二次剩余的构造"><a href="#二次剩余的构造" class="headerlink" title="二次剩余的构造"></a>二次剩余的构造</h4><p>Legendre符号：使用欧拉判别法计算</p><p>使用Cipolla算法构造二次剩余，ans1, ans2为答案。</p><p>Accepted on <a href="http://acm.timus.ru/problem.aspx?space=1&amp;num=1132" target="_blank" rel="noopener">Timus 1132</a></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type int</span></span><br><span class="line"><span class="keyword">namespace</span> ModOp &#123;</span><br><span class="line">    Type MOD;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> Type <span class="title">mo</span><span class="params">(Type x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">        <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">MF</span> &#123;</span></span><br><span class="line">        Type v;</span><br><span class="line">        MF(Type x = <span class="number">0</span>): v(mo(x)) &#123; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">operator</span> <span class="title">Type</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> + (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v + f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> mo(v - f.v); &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> * (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> <span class="number">1L</span>L * v * f.v % MOD; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> / (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v / f.v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> - () <span class="keyword">const</span> &#123; <span class="keyword">return</span> MOD - v; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &gt;&gt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;&gt; idx; &#125;</span><br><span class="line">        MF <span class="keyword">operator</span> &lt;&lt; (<span class="keyword">int</span> idx) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;&lt; idx; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v == f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v != f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &gt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &gt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> MF&amp; f) <span class="keyword">const</span> &#123; <span class="keyword">return</span> v &lt;= f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> ostream&amp; <span class="keyword">operator</span> &lt;&lt; (ostream&amp; out, MF f) &#123; <span class="keyword">return</span> out &lt;&lt; f.v; &#125;</span><br><span class="line">        <span class="keyword">friend</span> istream&amp; <span class="keyword">operator</span> &gt;&gt; (istream&amp; in, MF f) &#123; <span class="keyword">return</span> in &gt;&gt; f.v; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">bool</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;v) != <span class="number">-1</span>; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">printf</span>(<span class="string">"%d"</span>, v); &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function">T <span class="title">qpow</span><span class="params">(T x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    T ret = T(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = ret * x;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">using</span> ModOp::MF;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> qres &#123;</span><br><span class="line">    MF a, n;</span><br><span class="line">    <span class="keyword">int</span> p;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">F</span> &#123;</span></span><br><span class="line">        MF x, y; <span class="comment">// x+yw</span></span><br><span class="line">        F(MF _a = <span class="number">0</span>, MF _b = <span class="number">0</span>): x(_a), y(_b) &#123; &#125;</span><br><span class="line">        F <span class="keyword">operator</span> + (F f2) <span class="keyword">const</span> &#123; <span class="keyword">return</span> F(x + f2.x, y + f2.y); &#125;</span><br><span class="line">        F <span class="keyword">operator</span> * (F f2) <span class="keyword">const</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> F(x*f2.x + y*f2.y*(a*a-n), x*f2.y+y*f2.x);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="function">MF <span class="title">Legendre</span><span class="params">(MF d)</span> </span>&#123; <span class="keyword">return</span> qpow(d, (p<span class="number">-1</span>)/<span class="number">2</span>); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Cipolla</span><span class="params">(<span class="keyword">int</span> qn, <span class="keyword">int</span> qp)</span> </span>&#123; <span class="comment">// p is a prime, gcd(n, p) = 1</span></span><br><span class="line">        qn %= qp;</span><br><span class="line">        <span class="keyword">if</span>(qp == <span class="number">2</span> &amp;&amp; qn == <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"1"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        ModOp::MOD = p = qp; n = qn;</span><br><span class="line">        <span class="keyword">if</span>(Legendre(n) != MF(<span class="number">1</span>)) &#123; <span class="built_in">puts</span>(<span class="string">"No root"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        a = rng() % p;</span><br><span class="line">        <span class="keyword">while</span>(Legendre(a * a - n) != MF(<span class="number">-1</span>)) a = rng() % p;</span><br><span class="line"></span><br><span class="line">        F w(a, 1), res = qpow(w, (p + 1) / 2);</span><br><span class="line">        MF ans = res.x, ans2 = -ans;</span><br><span class="line">        <span class="keyword">if</span>(ans &gt; ans2) swap(ans, ans2);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">" "</span> &lt;&lt; ans2 &lt;&lt; <span class="string">"\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="置换"><a href="#置换" class="headerlink" title="置换"></a>置换</h2><p>置换（permutation）是从 $\{1,2,3,\cdots,n\}$ 到 $\{1,2,3,\cdots,n\}$ 的双射。下面的模板支持以下操作：</p><ul><li><code>identity()</code> 将置换变为恒等置换，即 $f(i)\equiv i$ </li><li>置换的复合。直接使用乘法即可。这里注意， $f \circ g$ 和函数复合一样，是从右往左算的，即： $(f \circ g)[i]=f[g[i]]$ 。</li><li>逆置换</li><li>置换分解为循环，并输出这个置换的阶，即 $f^d = id$ 的最小正整数 $d$</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">permutation</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    permutation(<span class="keyword">int</span> N = <span class="number">0</span>): sz(N), a(N + <span class="number">10</span>) &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">identity</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)  a[i] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> * msg)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%s"</span>, msg);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, a[i]);</span><br><span class="line">            <span class="keyword">if</span>(i &lt; sz) <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> a[idx]; &#125;</span><br><span class="line">    permutation <span class="keyword">operator</span> * (permutation rhs) &#123;</span><br><span class="line">        <span class="function">permutation <span class="title">res</span><span class="params">(sz)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)</span><br><span class="line">            res[i] = a[rhs[i]];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; _vis(sz + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        rep(i, sz) _vis[a[i]] = <span class="literal">true</span>;</span><br><span class="line">        rep(i, sz) <span class="keyword">if</span>(!_vis[i]) &#123; <span class="built_in">puts</span>(<span class="string">"NO!NOT A PERMUTATION!"</span>); <span class="keyword">return</span> <span class="literal">false</span>; &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">decomp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; _vis(sz + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">        ll ans = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) <span class="keyword">if</span>(!_vis[i]) &#123;</span><br><span class="line">            ll len = <span class="number">0</span>, c = i;</span><br><span class="line">            <span class="keyword">while</span>(!_vis[c]) &#123;</span><br><span class="line">                _vis[c] = <span class="literal">true</span>;</span><br><span class="line">                len++;</span><br><span class="line">                c = a[c];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(ans == <span class="number">-1</span>) ans = len;</span><br><span class="line">            <span class="keyword">else</span> ans = ans * (len / __gcd(ans, len));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">permutation <span class="title">inverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="function">permutation <span class="title">rev</span><span class="params">(sz)</span></span>;</span><br><span class="line">        rep(i, sz) rev[a[i]] = i;</span><br><span class="line">        <span class="keyword">return</span> rev;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="快速傅里叶变换"><a href="#快速傅里叶变换" class="headerlink" title="快速傅里叶变换"></a>快速傅里叶变换</h2><p>注意检查FFT_MAXN是否够用！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> FFT_MAXN = <span class="number">4002000</span>; <span class="comment">// multiply by 4!!</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> Pi = <span class="number">3.1415926535897932384626</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">comp</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> re, im;</span><br><span class="line">    comp(<span class="keyword">double</span> x = <span class="number">0.0</span>, <span class="keyword">double</span> y = <span class="number">0.0</span>): re(x), im(y) &#123; &#125;</span><br><span class="line">    comp <span class="keyword">operator</span> + (<span class="keyword">const</span> comp&amp; c) &#123; <span class="keyword">return</span> comp(re+c.re, im+c.im); &#125;</span><br><span class="line">    comp <span class="keyword">operator</span> - (<span class="keyword">const</span> comp&amp; c) &#123; <span class="keyword">return</span> comp(re-c.re, im-c.im); &#125;</span><br><span class="line">    comp <span class="keyword">operator</span> * (<span class="keyword">const</span> comp&amp; c) &#123; <span class="keyword">return</span> comp(re*c.re-im*c.im, re*c.im+im*c.re); &#125;</span><br><span class="line">    comp <span class="keyword">operator</span> / (<span class="keyword">double</span> dev) &#123; <span class="keyword">return</span> comp(re / dev, im / dev); &#125;</span><br><span class="line">&#125; a[FFT_MAXN], b[FFT_MAXN];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, lim = <span class="number">1</span>, l = <span class="number">0</span>, r[FFT_MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(comp* a, <span class="keyword">int</span> dft)</span> </span>&#123; <span class="comment">// -1 for idft, 1 for dft</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i)</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; lim; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        comp wn = comp( <span class="built_in">cos</span>(Pi / mid), <span class="built_in">sin</span>(Pi / mid) * dft );</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = mid &lt;&lt; <span class="number">1</span>, s = <span class="number">0</span>; s &lt; lim; s += len) &#123;</span><br><span class="line">            <span class="function">comp <span class="title">w</span><span class="params">(<span class="number">1</span>, <span class="number">0</span>)</span></span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; ++k, w = w * wn) &#123;</span><br><span class="line">                comp x = a[s + k], y = w * a[s + k + mid];</span><br><span class="line">                a[s + k] = x + y;</span><br><span class="line">                a[s + k + mid] = x - y;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dft == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i) a[i] = a[i] / lim;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft_init</span><span class="params">(<span class="keyword">int</span> degA, <span class="keyword">int</span> degB)</span> </span>&#123;</span><br><span class="line">    lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim &lt;= degA + degB) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i)</span><br><span class="line">        r[i] = ( r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span> ) | ( (i &amp; <span class="number">1</span>) &lt;&lt; (l - <span class="number">1</span>) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft_pmul</span><span class="params">(comp *A, <span class="keyword">int</span> degA, comp *B, <span class="keyword">int</span> degB)</span> </span>&#123; </span><br><span class="line"><span class="comment">// A will be modified to get answer</span></span><br><span class="line">    fft_init(degA, degB);</span><br><span class="line">    fft(A, <span class="number">1</span>);</span><br><span class="line">    fft(B, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i) A[i] = A[i] * B[i];</span><br><span class="line">    fft(A, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速数论变换NTT"><a href="#快速数论变换NTT" class="headerlink" title="快速数论变换NTT"></a>快速数论变换NTT</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>, g = <span class="number">3</span>, ginv = <span class="number">332748118</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">while</span>(x &gt;= MOD) x -= MOD; <span class="keyword">while</span>(x &lt; <span class="number">0</span>) x += MOD; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> FFT_MAXN = <span class="number">4004000</span>;</span><br><span class="line"><span class="keyword">int</span> l, r[FFT_MAXN], a[FFT_MAXN], b[FFT_MAXN], n, m, lim, liminv;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(<span class="keyword">int</span>* a, <span class="keyword">int</span> dft)</span> </span>&#123; <span class="comment">// 1 for dft and -1 for idft</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i)</span><br><span class="line">        <span class="keyword">if</span>(i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; lim; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> wn = qpow(dft==<span class="number">1</span> ? g : ginv, (MOD<span class="number">-1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> len = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; lim; j += len) &#123;</span><br><span class="line">            <span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; ++k, w = muln(w, wn)) &#123;</span><br><span class="line">                <span class="keyword">int</span> x = a[j + k], y = muln(w, a[j + k + mid]);</span><br><span class="line">                a[j + k] = mo(x + y);</span><br><span class="line">                a[j + k + mid] = mo(x - y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(dft == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i) a[i] = muln(a[i], liminv);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt_init</span><span class="params">(<span class="keyword">int</span> degA, <span class="keyword">int</span> degB)</span> </span>&#123;</span><br><span class="line">    lim = <span class="number">1</span>, l = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(lim &lt;= degA + degB) lim &lt;&lt;= <span class="number">1</span>, l++;</span><br><span class="line">    liminv = inv(lim);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i)</span><br><span class="line">        r[i] = ( r[i&gt;&gt;<span class="number">1</span>] &gt;&gt; <span class="number">1</span> ) | ( (i&amp;<span class="number">1</span>) &lt;&lt; (l<span class="number">-1</span>) );</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt_pmul</span><span class="params">(<span class="keyword">int</span> *A, <span class="keyword">int</span> degA, <span class="keyword">int</span> *B, <span class="keyword">int</span> degB)</span> </span>&#123;</span><br><span class="line">    ntt_init(degA, degB);</span><br><span class="line">    ntt(A, <span class="number">1</span>);</span><br><span class="line">    ntt(B, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lim; ++i) A[i] = muln(A[i], B[i]);</span><br><span class="line">    ntt(A, <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="快速沃尔什变换-快速莫比乌斯变换"><a href="#快速沃尔什变换-快速莫比乌斯变换" class="headerlink" title="快速沃尔什变换/快速莫比乌斯变换"></a>快速沃尔什变换/快速莫比乌斯变换</h2><p><code>conv</code> 函数配合 <code>fmt_or</code> <code>fmt_and</code> <code>fwt_xor</code> 参数解决下面的问题：<br>$$<br>h(S) = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\oplus R = S] f(L)g(R)<br>$$</p><p>$$<br>h(S) = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cup R = S] f(L)g(R)<br>$$</p><p>$$<br>h(S) = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cap R = S] f(L)g(R)<br>$$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = (<span class="number">1</span> &lt;&lt; <span class="number">17</span>) + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> n, m; <span class="comment">// ensure m is calculated!!!!</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b, Or, And, Xor;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_or(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(A[S|(<span class="number">1</span>&lt;&lt;i)] + dmt*A[S]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_and(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S] = mo(A[S] + dmt*A[S|(<span class="number">1</span>&lt;&lt;i)]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fwt_xor(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = A[S], r = A[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            A[S] = mo(l + r);</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(dmt==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> inv2 = qpow(qpow(<span class="number">2</span>, MOD<span class="number">-2</span>), n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S)</span><br><span class="line">            A[S] = muln(A[S], inv2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; conv(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(*fn)(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>)) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; aa = fn(A, <span class="number">1</span>), bb = fn(B, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i)</span><br><span class="line">        aa[i] = muln(aa[i], bb[i]);</span><br><span class="line">    aa = fn(aa, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> aa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = <span class="number">1</span> &lt;&lt; n;</span><br><span class="line">    a.resize(m), b.resize(m);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">    </span><br><span class="line">    show(conv(a, b, fmt_or));</span><br><span class="line">    show(conv(a, b, fmt_and));</span><br><span class="line">    show(conv(a, b, fwt_xor));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="深度优先搜索系列"><a href="#深度优先搜索系列" class="headerlink" title="深度优先搜索系列"></a>深度优先搜索系列</h2><h3 id="Tarjan求强连通分量"><a href="#Tarjan求强连通分量" class="headerlink" title="Tarjan求强连通分量"></a>Tarjan求强连通分量</h3><p>输入图G，调用find_scc(vertex count)，之后得到 <code>{nG, sccno}</code> 二元组。可以用 <code>std::tie</code> 来承接。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">10200</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, a[maxn], _x, _y;</span><br><span class="line"></span><br><span class="line"><span class="comment">// === template part ===</span></span><br><span class="line"><span class="keyword">using</span> Graph = <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt;;</span><br><span class="line"><span class="keyword">namespace</span> Tarjan &#123;</span><br><span class="line"><span class="comment">// input Graph G and vertex number vc, (index starts with 1)</span></span><br><span class="line"><span class="comment">// then call find_scc(). nG is the new graph</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sccno, dfn, low;</span><br><span class="line"><span class="built_in">stack</span>&lt;<span class="keyword">int</span>&gt; S;</span><br><span class="line">Graph G, nG;</span><br><span class="line"><span class="keyword">int</span> vc, sc, dfs_clock;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Tarjan</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    S.push(v);</span><br><span class="line">    low[v] = dfn[v] = ++dfs_clock;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u : G[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!dfn[u]) &#123;</span><br><span class="line">            Tarjan(u);</span><br><span class="line">            low[v] = min(low[v], low[u]);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(!sccno[u]) </span><br><span class="line">            low[v] = min(low[v], dfn[u]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(low[v] == dfn[v]) &#123;</span><br><span class="line">        sc++;</span><br><span class="line">        <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">            <span class="keyword">int</span> p = S.top(); S.pop();</span><br><span class="line">            sccno[p] = sc;</span><br><span class="line">            <span class="keyword">if</span>(p == v) <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">pair&lt; Graph, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; find_scc(<span class="keyword">int</span> sz = G.size() - <span class="number">1</span>) &#123; </span><br><span class="line">    <span class="comment">// returns &#123;new Graph, sccno&#125;</span></span><br><span class="line">    sc = dfs_clock = <span class="number">0</span>;</span><br><span class="line">    vc = sz;</span><br><span class="line"></span><br><span class="line">    sccno = dfn = low = <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(vc + <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= vc; ++i) <span class="keyword">if</span>(!dfn[i])</span><br><span class="line">        Tarjan(i);</span><br><span class="line">    nG.resize(sc);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> u = <span class="number">1</span>; u &lt;= vc; ++u) <span class="keyword">for</span>(<span class="keyword">auto</span> v : G[u]) </span><br><span class="line">        <span class="keyword">if</span>(sccno[u] != sccno[v]) </span><br><span class="line">            nG[sccno[u]].push_back(sccno[v]);</span><br><span class="line">    <span class="keyword">return</span> &#123;nG, sccno&#125;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// === end of template ===</span></span><br><span class="line"></span><br><span class="line">Graph G(10020), nG;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sccno, dp(<span class="number">10020</span>), tot(<span class="number">10020</span>);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dp[v]) <span class="keyword">return</span> dp[v];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> u : nG[v])</span><br><span class="line">        dp[v] = max(dp[v], dfs(u));</span><br><span class="line">    <span class="keyword">return</span> dp[v] += tot[v];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;_x, &amp;_y);</span><br><span class="line">        G[_x].push_back(_y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    Tarjan::G = G;</span><br><span class="line">    tie(nG, sccno) = Tarjan::find_scc();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        tot[sccno[i]] += a[i];</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        ans = max(ans, dfs(i));</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Sample:</span></span><br><span class="line"><span class="comment">10 20</span></span><br><span class="line"><span class="comment">970 369 910 889 470 106 658 659 916 964 </span></span><br><span class="line"><span class="comment">3 2</span></span><br><span class="line"><span class="comment">3 6</span></span><br><span class="line"><span class="comment">3 4</span></span><br><span class="line"><span class="comment">9 5</span></span><br><span class="line"><span class="comment">8 3</span></span><br><span class="line"><span class="comment">5 8</span></span><br><span class="line"><span class="comment">9 1</span></span><br><span class="line"><span class="comment">9 7</span></span><br><span class="line"><span class="comment">9 8</span></span><br><span class="line"><span class="comment">7 5</span></span><br><span class="line"><span class="comment">3 7</span></span><br><span class="line"><span class="comment">7 8</span></span><br><span class="line"><span class="comment">1 7</span></span><br><span class="line"><span class="comment">10 2</span></span><br><span class="line"><span class="comment">1 10</span></span><br><span class="line"><span class="comment">4 8</span></span><br><span class="line"><span class="comment">2 6</span></span><br><span class="line"><span class="comment">3 1</span></span><br><span class="line"><span class="comment">3 5</span></span><br><span class="line"><span class="comment">8 5</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Answer: 6911</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h1 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h1><p>注意：凸包相关问题，必须搞清楚要求的是严格的还是非严格的。</p><h2 id="凸包"><a href="#凸包" class="headerlink" title="凸包"></a>凸包</h2><p>基于水平序的Andrew算法</p><p>注意：</p><ul><li>调用时 <code>strict = 1</code> 表示严格凸包，不允许有顶点在凸包上。</li><li>给出的凸包按照逆时针方向，起始点是最左侧的点中最下侧的。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>): x(xp), y(yp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point x, Point y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Point x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; p, ch;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; ConvexHull(<span class="built_in">vector</span>&lt;Point&gt; pts, <span class="keyword">int</span> strict = <span class="number">1</span>) &#123;</span><br><span class="line">    sort(pts.begin(), pts.end());</span><br><span class="line">    <span class="keyword">int</span> pn = pts.size(), m = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; res(pn &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pn; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">0</span> &amp;&amp; sgn(cross(res[m]-res[m<span class="number">-1</span>], pts[i]-res[m<span class="number">-1</span>]))&lt;strict) m--;</span><br><span class="line">        res[++m] = pts[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k = m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = pn - <span class="number">2</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; k &amp;&amp; sgn(cross(res[m]-res[m<span class="number">-1</span>], pts[i]-res[m<span class="number">-1</span>]))&lt; strict) m--;</span><br><span class="line">        res[++m] = pts[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res.resize(m + (pn==<span class="number">1</span>));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>严格上凸壳（CF1142C）</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>): x(xp), y(yp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k); &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Point x, Point y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Point x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">cross</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; p, ch;</span><br><span class="line"><span class="built_in">vector</span>&lt;Point&gt; UpperConvexHull(<span class="built_in">vector</span>&lt;Point&gt; pts, <span class="keyword">int</span> strict = <span class="number">1</span>) &#123;</span><br><span class="line">    sort(pts.begin(), pts.end());</span><br><span class="line">    <span class="keyword">int</span> pn = pts.size(), m = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; res(pn &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pn; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(m &gt;= <span class="number">0</span> &amp;&amp; sgn(res[m].x - pts[i].x) == <span class="number">0</span>) m--;</span><br><span class="line">        <span class="keyword">while</span>(m &gt; <span class="number">0</span> &amp;&amp; sgn(cross(res[m]-res[m<span class="number">-1</span>], pts[i]-res[m<span class="number">-1</span>])) &gt;= <span class="number">0</span>) m--;</span><br><span class="line">        res[++m] = pts[i];</span><br><span class="line">    &#125;</span><br><span class="line">    res.resize(m + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h1><h2 id="模拟退火"><a href="#模拟退火" class="headerlink" title="模拟退火"></a>模拟退火</h2><p>模拟退火算法解决最小球覆盖问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sgn</span><span class="params">(<span class="keyword">double</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x) &lt; eps) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> x &lt; <span class="number">0</span> ? <span class="number">-1</span> : <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> x, y, z;</span><br><span class="line">    Point(<span class="keyword">double</span> xp=<span class="number">0</span>, <span class="keyword">double</span> yp=<span class="number">0</span>, <span class="keyword">double</span> zp=<span class="number">0</span>): x(xp), y(yp), z(zp) &#123; &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x+rhs.x, y+rhs.y, z+rhs.z); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y, z-rhs.z); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x*k, y*k, z*k); &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> / (<span class="keyword">const</span> <span class="keyword">double</span>&amp; k) <span class="keyword">const</span> &#123; <span class="keyword">return</span> Point(x/k, y/k, z/k); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> x &lt; rhs.x || (x==rhs.x &amp;&amp; y&lt;rhs.y) || (x==rhs.x&amp;&amp;y==rhs.y&amp;&amp;z&lt;rhs.z); &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;<span class="keyword">return</span> sgn(x - rhs.x) == <span class="number">0</span> &amp;&amp; sgn(y - rhs.y) == <span class="number">0</span> &amp;&amp; sgn(z-rhs.z)==<span class="number">0</span>; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lf%lf%lf"</span>, &amp;x, &amp;y, &amp;z); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dot</span><span class="params">(Vector x, Vector y)</span> </span>&#123; <span class="keyword">return</span> x.x*y.x + x.y*y.y + x.z*y.z; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">length</span><span class="params">(Vector x)</span> </span>&#123; <span class="keyword">return</span> <span class="built_in">sqrt</span>(dot(x, x)); &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dist2</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="keyword">return</span> dot(A - B, A - B); &#125;</span><br><span class="line"><span class="comment">// Circle</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Circle</span> &#123;</span></span><br><span class="line">    Point o;</span><br><span class="line">    <span class="keyword">double</span> r;</span><br><span class="line">    Circle(Point O, <span class="keyword">double</span> R): o(O), r(R) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">mt19937 <span class="title">rng</span><span class="params">(chrono::steady_clock::now().time_since_epoch().count())</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Eval</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; pt, Point o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">double</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) res = max(res, dist2(g, o));</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line">uniform_real_distribution&lt;<span class="keyword">double</span>&gt; rgen(<span class="number">0.0</span>, <span class="number">1.0</span>);</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Rand</span><span class="params">()</span></span>&#123; <span class="keyword">return</span> rgen(rng); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Circle <span class="title">MinCircleAnneal</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;Point&gt;&amp; pt, <span class="keyword">double</span> T, <span class="keyword">double</span> dec, <span class="keyword">double</span> ed)</span> </span>&#123;</span><br><span class="line">    Point pcur, pbest, pnew;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) pcur = pcur + g;</span><br><span class="line">    pbest = pcur = pcur / sz;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> vcur = Eval(pt, pcur), vnew, vbest = vcur;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(T &gt; ed) &#123;</span><br><span class="line">        pnew = pcur + Point((Rand()*<span class="number">2.0</span><span class="number">-1</span>) * T, (Rand()*<span class="number">2.0</span><span class="number">-1.0</span>) * T, (Rand()*<span class="number">2.0</span><span class="number">-1</span>) * T);</span><br><span class="line">        vnew = Eval(pt, pnew);</span><br><span class="line">        <span class="keyword">if</span>(vnew &lt;= vbest) vbest = vcur = vnew, pbest = pcur = pnew;</span><br><span class="line">        <span class="keyword">if</span>(vnew &lt;= vcur || Rand() &lt; <span class="built_in">exp</span>(-(vnew-vcur)/T))</span><br><span class="line">            vcur = vnew, pcur = pnew;</span><br><span class="line">        T *= dec;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> Circle(pbest, <span class="built_in">sqrt</span>(vbest));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="built_in">vector</span>&lt;Point&gt; p(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) p[i].scan();</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1e13</span>;</span><br><span class="line">    rep(i, <span class="number">40</span>) &#123;</span><br><span class="line">        Circle cir = MinCircleAnneal(p, <span class="number">100000.0</span>, <span class="number">0.999</span>, <span class="number">3e-7</span>);</span><br><span class="line">        ans = min(ans, cir.r);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10f\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;常用算法的模板~&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="模板" scheme="http://yoursite.com/tags/%E6%A8%A1%E6%9D%BF/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 10399 比赛报告</title>
    <link href="http://yoursite.com/2019/03/01/Opentrains-10399-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/03/01/Opentrains-10399-比赛报告/</id>
    <published>2019-03-01T14:43:30.000Z</published>
    <updated>2019-03-07T16:19:56.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Peterhof"><a href="#XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Peterhof" class="headerlink" title="XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Peterhof"></a>XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Peterhof</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">02:21</td><td style="text-align:center">——</td><td style="text-align:center">02:12</td><td style="text-align:center">——</td><td style="text-align:center">04:42</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center"><strong><font color="red">WA -1</font></strong></td><td style="text-align:center">00:57</td><td style="text-align:center">01:28</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><font color="black"><strong>AC</strong></font></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center">AC?</td><td style="text-align:center"></td><td style="text-align:center">Yes</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><strong><font color="green">+2</font></strong></td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="green">+2</font></strong></td><td style="text-align:center"><strong><font color="red">*2</font></strong></td><td style="text-align:center"><strong><font color="green">+6</font></strong></td><td style="text-align:center">*1</td><td style="text-align:center"></td><td style="text-align:center">*7</td><td style="text-align:center"><strong><font color="green">+2</font></strong></td><td style="text-align:center"><strong><font color="green">+6</font></strong></td></tr><tr><td style="text-align:left">Total AC</td><td style="text-align:center">126</td><td style="text-align:center">18</td><td style="text-align:center">127</td><td style="text-align:center">82</td><td style="text-align:center">112</td><td style="text-align:center">0</td><td style="text-align:center">11</td><td style="text-align:center">10</td><td style="text-align:center">151</td><td style="text-align:center">93</td></tr></tbody></table><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010399" target="_blank" rel="noopener">比赛链接</a></p><p><a href="https://www.cnblogs.com/clrs97/p/8636147.html" target="_blank" rel="noopener">Claris的题解</a></p><p>这次特地挑了个水题相对较多的比赛，感觉体验稍好一点，但是过掉的这5道题里面没有一道题是一发AC的，D题最后还没时间写。这反映出了代码的实现能力实在是有待提高啊。</p><p>最终成果：</p><ul><li><p>Solved 5 out of 10</p></li><li><p>Upsolved 6 out of 10</p></li><li><p>Rank 91 out of 162 ( 击败$43.83 \%​$ )</p></li><li><p>做出了有趣的 $J$ 题，运用了二次剩余，欧拉判别法的知识</p><a id="more"></a></li></ul><p>这次我踩过的坑点可是有很多了，实在是不应该。。。</p><ul><li><p>交错语言，交错代码，这种幼稚错误今天犯了好多次。。。<strong><font color="red">WA + RE + PE</font></strong> * 6</p></li><li><p>C题：输出方案没有想清楚，spj题提交前没有用常识检查解的正确性。<strong><font color="red">WA</font></strong> * 2</p></li><li><p>E题：这个锅我能记一年。。。首先是下标张冠李戴，花了一年才过样例。。。然后使用<code>fgets</code>函数时传入的最大读取长度参数少加了一个0，导致小样例随便跑，大样例就WA。。。浪费一个多小时 + <strong><font color="red">WA</font></strong> * 4</p></li><li><p>I 题：读错题意 <strong><font color="red">WA</font></strong> * 2</p></li><li><p>J 题：过于相信Python的运行速度 <strong><font color="purple">TLE</font></strong> * 4</p></li></ul><h2 id="Prob-A-数学，递推"><a href="#Prob-A-数学，递推" class="headerlink" title="Prob A. 数学，递推"></a>Prob A. 数学，递推</h2><p>sl写的，知道思路了，明天再仔细补吧。</p><h2 id="Prob-C-暴力"><a href="#Prob-C-暴力" class="headerlink" title="Prob C. 暴力"></a>Prob C. 暴力</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>题目中已经说恰好出现 $10$ 种字母了，因此只需要枚举每种字母对应的数字的排列即可。暴力枚举排列，将每种排列对应的大于小于关系用一个三进制数表示，放进<code>map</code>里统计，找到只出现一次的三进制数将方案输出。</p><p>时间复杂度：$O(10! \cdot \log 10!)$，大约是 $8 \cdot 10^7$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;ll, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">char</span>, <span class="keyword">int</span>&gt; id;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">100</span>], n, tot, d[<span class="number">100</span>], perm[<span class="number">100</span>];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100</span>], lnk[<span class="number">100</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!id.count(s[i])) id[s[i]] = tot++;</span><br><span class="line">        a[i] = id[s[i]];</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">9</span>) perm[i] = i;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) d[i] = perm[a[i]];</span><br><span class="line">        ll sta = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            sta = sta * <span class="number">3L</span>L;</span><br><span class="line">            <span class="keyword">if</span>(d[i - <span class="number">1</span>] &gt; d[i]) sta += <span class="number">2</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(d[i<span class="number">-1</span>] == d[i]) sta += <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[sta]++;</span><br><span class="line">    &#125; <span class="keyword">while</span>(next_permutation(perm, perm + <span class="number">10</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : mp) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g.second == <span class="number">1</span>) &#123;</span><br><span class="line">            ll sta = g.first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> p = <span class="number">0</span>; p &lt; n - <span class="number">1</span>; ++p) &#123;</span><br><span class="line">                <span class="keyword">int</span> xp = n - p - <span class="number">2</span>;</span><br><span class="line">                <span class="keyword">if</span>(sta % <span class="number">3</span> == <span class="number">0</span>) lnk[xp] = <span class="string">'&lt;'</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sta % <span class="number">3</span> == <span class="number">1</span>) lnk[xp] = <span class="string">'='</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(sta % <span class="number">3</span> == <span class="number">2</span>) lnk[xp] = <span class="string">'&gt;'</span>;</span><br><span class="line">                sta /= <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">"%c"</span>, s[i]);</span><br><span class="line">                <span class="keyword">if</span>(i == n - <span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">" %c "</span>, lnk[i]);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-E-set求前驱后继"><a href="#Prob-E-set求前驱后继" class="headerlink" title="Prob E. set求前驱后继"></a>Prob E. set求前驱后继</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>首先预处理模板串，把模板串中的每个字符出现的位置塞进这个字符对应的 <code>set</code> 里。</p><p>然后，一行一行处理文本串。模板串向左偏移可以看作文本串向右偏移，因此根据处理每一行之前的时间将这一行文本向右移动（这个移动应小心实现，移动时间复杂度必须保证是文本串长度量级的）。对于移动过后的每个字符，计算这个字符要想被打印至少需要多少时间，可以在模板串对应字符的 <code>set</code> 里找前驱来完成。然后取这些时间的最大值即可得出这一行的用时。当然了，处理完每一行之后，不要忘记给时间加一来换行。</p><p>时间复杂度：$O(n\log n)$</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; st[<span class="number">200</span>];</span><br><span class="line">ll ans = <span class="number">0</span>, lent, lens, shift = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">char</span> t[<span class="number">200200</span>], s[<span class="number">3000200</span>], sini[<span class="number">3002000</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fgets(t, <span class="number">200000</span>, <span class="built_in">stdin</span>), lent = <span class="built_in">strlen</span>(t) - <span class="number">1</span>;</span><br><span class="line">    t[lent] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; lent; ++i) &#123;</span><br><span class="line">        st[<span class="keyword">int</span>(t[i])].insert(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(fgets(sini, <span class="number">2000000</span>, <span class="built_in">stdin</span>)) &#123;</span><br><span class="line">        lens = <span class="built_in">strlen</span>(sini);</span><br><span class="line">        sini[--lens] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(lens == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        shift = ans % lent;</span><br><span class="line">        <span class="keyword">int</span> start = shift, end = (shift + lens - <span class="number">1</span>) % lent, cross = <span class="literal">false</span>;</span><br><span class="line">        ll tm = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, p = shift; i &lt; lens; ++i) &#123;</span><br><span class="line">            s[p] = sini[i];</span><br><span class="line">            <span class="keyword">if</span>(++p == lent) p -= lent, cross = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = start, ed = cross? lent<span class="number">-1</span> : end; i &lt;= ed; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &lt; <span class="number">33</span> || s[i] &gt; <span class="number">126</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">auto</span> g = st[<span class="keyword">int</span>(s[i])].lower_bound(i);</span><br><span class="line">            <span class="keyword">if</span>(g == st[<span class="keyword">int</span>(s[i])].end()) &#123;</span><br><span class="line">                <span class="keyword">int</span> dest = *st[<span class="keyword">int</span>(s[i])].begin();</span><br><span class="line">                tm = max(tm, ll(dest + lent - i));</span><br><span class="line">            &#125; <span class="keyword">else</span> tm = max(tm, ll(*g - i));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cross) <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, ed = end; i &lt;= ed; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] &lt; <span class="number">33</span> || s[i] &gt; <span class="number">126</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">auto</span> g = st[<span class="keyword">int</span>(s[i])].lower_bound(i);</span><br><span class="line">            <span class="keyword">if</span>(g == st[<span class="keyword">int</span>(s[i])].end()) &#123;</span><br><span class="line">                <span class="keyword">int</span> dest = *st[<span class="keyword">int</span>(s[i])].begin();</span><br><span class="line">                tm = max(tm, ll(dest + lent - i));</span><br><span class="line">            &#125; <span class="keyword">else</span> tm = max(tm, ll(*g - i));</span><br><span class="line">        &#125;</span><br><span class="line">        ans += tm + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, p = shift; i &lt; lens; ++i) &#123;</span><br><span class="line">            s[p] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(++p == lent) p -= lent;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-I-分类讨论"><a href="#Prob-I-分类讨论" class="headerlink" title="Prob I. 分类讨论"></a>Prob I. 分类讨论</h2><p>这题没什么好说的。。。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[<span class="number">100200</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">char</span>&gt; ch;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span> &amp;&amp;  y == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"WE"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(x &gt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'E'</span>), x--;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'W'</span>), x++;</span><br><span class="line">    <span class="keyword">while</span>(y &gt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'N'</span>), y--;</span><br><span class="line">    <span class="keyword">while</span>(y &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'S'</span>), y++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> xp, yp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line">    n = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'N'</span>) yp++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'E'</span>) xp++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'W'</span>) xp--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'S'</span>) yp--;</span><br><span class="line">        ch.insert(s[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(ch.size() == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"X"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch.size() == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ch.count(<span class="string">'W'</span>) &amp;&amp; ch.count(<span class="string">'E'</span>)) &#123; <span class="built_in">puts</span>(<span class="string">"X"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span>(ch.count(<span class="string">'N'</span>) &amp;&amp; ch.count(<span class="string">'S'</span>)) &#123; <span class="built_in">puts</span>(<span class="string">"X"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        xp = yp = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : ch) &#123;</span><br><span class="line">            <span class="keyword">if</span>(g == <span class="string">'N'</span>) yp--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'E'</span>) xp--;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'W'</span>) xp++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'S'</span>) yp++;</span><br><span class="line">        &#125;</span><br><span class="line">        go(xp, yp);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(ch.size() == <span class="number">3</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> dx = <span class="number">0</span>, dy = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(!ch.count(<span class="string">'N'</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(xp == <span class="number">0</span> &amp;&amp; yp == <span class="number">1</span>) dy++;</span><br><span class="line">            dy++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!ch.count(<span class="string">'E'</span>)) &#123; </span><br><span class="line">            <span class="keyword">if</span>(xp == <span class="number">1</span> &amp;&amp; yp == <span class="number">0</span>) dx++;</span><br><span class="line">            dx++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!ch.count(<span class="string">'W'</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(xp == <span class="number">-1</span> &amp;&amp; yp == <span class="number">0</span>) dx--;</span><br><span class="line">            dx--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!ch.count(<span class="string">'S'</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(xp == <span class="number">0</span> &amp;&amp; yp == <span class="number">-1</span>) dy--;</span><br><span class="line">            dy--;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!ch.count(<span class="string">'S'</span>)) go(<span class="number">0</span>, <span class="number">-1</span>);</span><br><span class="line">        go(dx, dy);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-J-二次剩余，概率算法"><a href="#Prob-J-二次剩余，概率算法" class="headerlink" title="Prob J. 二次剩余，概率算法"></a>Prob J. 二次剩余，概率算法</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一个很大的数 $n$ ，让你判断它是不是完全平方数。（ $n$ 不超过 $10^6$ 位）</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>这道题感觉做法很多啊，我开始有两个想法:</p><h4 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h4><p>模拟初中教的手算开根号的过程。这种做法之后补吧。</p><h4 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h4><p>挑多个素数，对每个素数 $p$，检查  $n\bmod p$ 是否是二次剩余。</p><p>具体怎么检查一个数是不是二次剩余呢？可以使用欧拉判别法：</p><blockquote><p>若 $n^{\frac{p-1}{2}}\equiv 1 \pmod p$，则 $n$ 是模 $p​$ 的二次剩余；</p><p>若 $n^{\frac{p-1}{2}}\equiv -1 \pmod p$，则 $n$ 是模 $p​$ 的二次非剩余；</p></blockquote><p>可以证明，$n^{\frac{p-1}{2}} \pmod p​$ 不存在其他情况。</p><p>实际上，这就是勒让德符号$\left(\frac{n}{p}\right)$的定义。勒让德符号专门用来解决二次剩余问题，是完全积性函数，还有不少有用的性质。详细参见二潘的《初等数论》吧</p><p>第二种方法<del>显然</del>正确的概率很大。可以这么分析概率：$\pmod p$ 的二次剩余共有 $\frac{p+1}{2}$个，如果假设二次剩余分布相对均匀的话，每次检查成功的概率可以认为大约是 $\frac 12$。因此取47个素数，失败概率已经小到 $\frac 1{2^{47}} \approx 10^{-15}$，完全可以忽略。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll p[<span class="number">47</span>] = &#123;<span class="number">1226959</span>,  <span class="number">1635947</span>,  <span class="number">2181271</span>,  <span class="number">2908361</span>,  <span class="number">3877817</span>,  </span><br><span class="line">    <span class="number">5170427</span>, <span class="number">6893911</span>, <span class="number">9191891</span>, <span class="number">12255871</span>, <span class="number">16341163</span>, <span class="number">21788233</span>, <span class="number">29050993</span>, </span><br><span class="line">    <span class="number">38734667</span>, <span class="number">51646229</span>, <span class="number">68861641</span>,  <span class="number">91815541</span>, <span class="number">122420729</span>, <span class="number">163227661</span>,</span><br><span class="line">    <span class="number">217636919</span>, <span class="number">290182597</span>, <span class="number">386910137</span>, <span class="number">515880193</span>, <span class="number">687840301</span>, <span class="number">917120411</span>, </span><br><span class="line">    <span class="number">1000000007</span>, <span class="number">1000000009</span>, <span class="number">1222827239</span>, <span class="number">1610612741</span>, <span class="number">3221225473</span>, </span><br><span class="line">    <span class="number">4294967291</span>, <span class="number">61</span>, <span class="number">83</span>, <span class="number">113</span>, <span class="number">151</span>,  <span class="number">211</span>, <span class="number">281</span>, <span class="number">379</span>,<span class="number">509</span>, <span class="number">683</span>,  <span class="number">911</span> ,</span><br><span class="line">    <span class="number">1217</span>, <span class="number">1627</span>, <span class="number">2179</span>, <span class="number">2909</span>, <span class="number">3881</span>, <span class="number">6907</span>, <span class="number">9209</span> </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">1002000</span>], n;</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">1002000</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(ll mod)</span> </span>&#123;</span><br><span class="line">    ll ret = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ret = (<span class="number">10L</span>L * ret + a[i]) % mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> mod)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = <span class="number">1L</span>L * x * x % mod)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = <span class="number">1L</span>L * ret * x % mod;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s); n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) a[i] = s[i] - <span class="string">'0'</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">47</span>; ++c) &#123;</span><br><span class="line">        <span class="keyword">int</span> r = mo(p[c]);</span><br><span class="line">        <span class="keyword">int</span> q = qpow(r, (p[c]<span class="number">-1</span>)/<span class="number">2</span>, p[c]);</span><br><span class="line">        <span class="keyword">if</span>(q == p[c]<span class="number">-1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"No"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="赛后补题"><a href="#赛后补题" class="headerlink" title="赛后补题"></a>赛后补题</h1><h2 id="Prob-B-插头DP"><a href="#Prob-B-插头DP" class="headerlink" title="Prob B. 插头DP"></a>Prob B. 插头DP</h2><p>这道题看来是插头DP经典题的变形了，没学过插头DP，明天详细学习一下这种思想吧。</p><h2 id="Prob-D-贪心"><a href="#Prob-D-贪心" class="headerlink" title="Prob D. 贪心"></a>Prob D. 贪心</h2><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>这题直接贪心就可以了。。。感觉数据只出到35有点奇怪，可能只是为了避免表示每层点的坐标时爆 <code>long long</code> 吧，因为 $3^{35} = 50031545098999707$，long long正好装得下。</p><p>具体说这道题的解法的话，就是不断迭代以下的过程：</p><ul><li>若 $s, t$ 深度相同，则：<ul><li>如果它们的距离不超过5，就直接走过去；</li><li>否则，让它们都用尽量少的步数走到较浅的一层。</li></ul></li><li>否则，不妨设 $s$ 较深，则让 $s$ 用尽量少的步数往较浅的方向走。</li></ul><p>注意以上的策略往较浅方向走都仅考虑”用尽量少的步数“而不考虑走到较浅一层的位置，手画一下图可以发现，这么做一定不会比考虑走到较浅一层的位置差，而对于只考虑走到较浅一层的位置的贪心策略，这里给出一组hack数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ccscca</span><br><span class="line">ca</span><br></pre></td></tr></table></figure><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll pow3[] = &#123;<span class="number">1</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">27</span>, <span class="number">81</span>, <span class="number">243</span>, <span class="number">729</span>, <span class="number">2187</span>, <span class="number">6561</span>, <span class="number">19683</span>, <span class="number">59049</span>, <span class="number">177147</span>, <span class="number">531441</span>, <span class="number">1594323</span>, <span class="number">4782969</span>, <span class="number">14348907</span>, <span class="number">43046721</span>, <span class="number">129140163</span>, <span class="number">387420489</span>, <span class="number">1162261467</span>, <span class="number">3486784401</span>, <span class="number">10460353203</span>, <span class="number">31381059609</span>, <span class="number">94143178827</span>, <span class="number">282429536481</span>, <span class="number">847288609443</span>, <span class="number">2541865828329</span>, <span class="number">7625597484987</span>, <span class="number">22876792454961</span>, <span class="number">68630377364883</span>, <span class="number">205891132094649</span>, <span class="number">617673396283947</span>, <span class="number">1853020188851841</span>, <span class="number">5559060566555523</span>, <span class="number">16677181699666569</span>, <span class="number">50031545098999707</span>, <span class="number">150094635296999121</span>, <span class="number">450283905890997363</span>, <span class="number">1350851717672992089</span>, <span class="number">4052555153018976267</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    ll x, level;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">switch</span>(ch) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'c'</span>: level++, x = <span class="number">3L</span>L * x; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'a'</span>: x--, x += x&lt;<span class="number">0</span> ? pow3[level] : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'s'</span>: x++, x -= x==pow3[level] ? pow3[level] : <span class="number">0</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">'g'</span>: assert(x%<span class="number">3</span>==<span class="number">0</span>); level--, x /= <span class="number">3</span>; <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; s, t;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> swp = <span class="literal">false</span>;</span><br><span class="line"><span class="built_in">string</span> spos, tpos, ans[<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; spos &gt;&gt; tpos;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : spos) s.go(c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : tpos) t.go(c);</span><br><span class="line">    <span class="keyword">for</span>(;;) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s.level &gt; t.level) swap(s, t), swp ^= <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(s.level &lt; t.level) &#123;</span><br><span class="line">            <span class="keyword">if</span>(t.x % <span class="number">3</span> == <span class="number">2</span>) t.go(<span class="string">'s'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'s'</span>;</span><br><span class="line">            <span class="keyword">if</span>(t.x % <span class="number">3</span> == <span class="number">1</span>) t.go(<span class="string">'a'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'a'</span>;</span><br><span class="line">            t.go(<span class="string">'g'</span>);</span><br><span class="line">            ans[swp ^ <span class="number">1</span>] += <span class="string">'g'</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(s.level == t.level) &#123;</span><br><span class="line">            ll spin = s.x - t.x; <span class="keyword">if</span>(spin &lt; <span class="number">0</span>) spin += pow3[t.level];</span><br><span class="line">            ll anti = t.x - s.x; <span class="keyword">if</span>(anti &lt; <span class="number">0</span>) anti += pow3[t.level];</span><br><span class="line">            <span class="keyword">if</span>(spin &lt; anti) &#123;</span><br><span class="line">                <span class="keyword">if</span>(spin &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    rep(i, spin) t.go(<span class="string">'s'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'s'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(t.x % <span class="number">3</span> == <span class="number">2</span>) t.go(<span class="string">'s'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'s'</span>;</span><br><span class="line">                    <span class="keyword">if</span>(t.x % <span class="number">3</span> == <span class="number">1</span>) t.go(<span class="string">'a'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'a'</span>;</span><br><span class="line">                    t.go(<span class="string">'g'</span>); ans[swp ^ <span class="number">1</span>] += <span class="string">'g'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(anti &lt;= <span class="number">5</span>) &#123;</span><br><span class="line">                    rep(i, anti) t.go(<span class="string">'a'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'a'</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(t.x % <span class="number">3</span> == <span class="number">2</span>) t.go(<span class="string">'s'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'s'</span>;</span><br><span class="line">                    <span class="keyword">if</span>(t.x % <span class="number">3</span> == <span class="number">1</span>) t.go(<span class="string">'a'</span>), ans[swp ^ <span class="number">1</span>] += <span class="string">'a'</span>;</span><br><span class="line">                    t.go(<span class="string">'g'</span>); ans[swp ^ <span class="number">1</span>] += <span class="string">'g'</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(s.level == t.level &amp;&amp; s.x == t.x) <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ans[<span class="number">1</span>].begin(), ans[<span class="number">1</span>].end());</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : ans[<span class="number">1</span>]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c == <span class="string">'g'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'c'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'c'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'g'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'s'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(c == <span class="string">'a'</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">'s'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-F-神仙计算几何"><a href="#Prob-F-神仙计算几何" class="headerlink" title="Prob F. 神仙计算几何"></a>Prob F. 神仙计算几何</h2><p>要求完成一个机器人巡线程序。这道题看上去非常毒瘤，加了各种随机化干扰成分，可是最终的std代码仅仅600 byte！下面把标准代码贴出来，不知道其中的 <code>ctl</code> 变量的计算到底有什么道理。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is std solution</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">double</span> l, r;</span><br><span class="line">  <span class="keyword">double</span> pd = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span> (<span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>, &amp;l, &amp;r) == <span class="number">2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (l &lt; <span class="number">-0.5</span>) <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">double</span> d = r - l;</span><br><span class="line">    <span class="keyword">double</span> ctl = d * <span class="number">2</span> + (d - pd) * <span class="number">5</span>;</span><br><span class="line">    pd = d;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> ml = <span class="number">1</span> - ctl, mr = <span class="number">1</span> + ctl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (ml &lt; <span class="number">-1</span>) ml = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (ml &gt; <span class="number">1</span>) ml = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mr &lt; <span class="number">-1</span>) mr = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">if</span> (mr &gt; <span class="number">1</span>) mr = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.4lf %.4lf\n"</span>, ml, mr);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-G-博弈，交互题"><a href="#Prob-G-博弈，交互题" class="headerlink" title="Prob G. 博弈，交互题"></a>Prob G. 博弈，交互题</h2><p>你扮演一个象棋中的车，要捉棋盘上的一个马。挺有意思，明天想想。</p><h2 id="Prob-H-多项式exp-多项式ln"><a href="#Prob-H-多项式exp-多项式ln" class="headerlink" title="Prob H. 多项式exp / 多项式ln"></a>Prob H. 多项式exp / 多项式ln</h2><p>sl补的题</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll  p = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll  <span class="title">qpow</span><span class="params">(ll  x, ll  y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll  res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (y &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (y &amp; <span class="number">1</span>) res = res * (<span class="keyword">long</span> <span class="keyword">long</span>)x % p;</span><br><span class="line">        x = x * (<span class="keyword">long</span> <span class="keyword">long</span>)x % p, y &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ntt</span><span class="params">(ll  *a, ll  len, ll  flag)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll  *r = <span class="keyword">new</span> ll [len];</span><br><span class="line">    r[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">1</span>; i &lt; len; i++) r[i] = (r[i &gt;&gt; <span class="number">1</span>] &gt;&gt; <span class="number">1</span>) | ((i &amp; <span class="number">1</span>) * (len &gt;&gt; <span class="number">1</span>));</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len; i++) <span class="keyword">if</span> (i &lt; r[i]) swap(a[i], a[r[i]]);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">1</span>; i &lt; len; i &lt;&lt;= <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ll  g1 = qpow(<span class="number">3</span>, (p - <span class="number">1</span>) / (i * <span class="number">2</span>));</span><br><span class="line">        <span class="keyword">for</span> (ll  j = <span class="number">0</span>; j &lt; len; j += i &lt;&lt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">for</span> (ll  g = <span class="number">1</span>, k = <span class="number">0</span>; k &lt; i; k++, g = g * (<span class="keyword">long</span> <span class="keyword">long</span>)g1 % p)</span><br><span class="line">            &#123;</span><br><span class="line">                ll  t = a[j + i + k] * (<span class="keyword">long</span> <span class="keyword">long</span>)g % p;</span><br><span class="line">                a[j + i + k] = ((a[j + k] - t) % p + p) % p;</span><br><span class="line">                a[j + k] = (a[j + k] + t) % p;</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag == <span class="number">-1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        reverse(a + <span class="number">1</span>, a + len);</span><br><span class="line">        <span class="keyword">for</span> (ll  i = <span class="number">0</span>, inv = qpow(len, p - <span class="number">2</span>); i &lt; len; i++) a[i] = a[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)inv % p;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_inv</span><span class="params">(ll  *a, ll  len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123; a[<span class="number">0</span>] = qpow(a[<span class="number">0</span>], p - <span class="number">2</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">    ll  len1 = len / <span class="number">2</span>;</span><br><span class="line">    ll  *f0 = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len1; i++) f0[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len1; i &lt; len * <span class="number">2</span>; i++) f0[i] = <span class="number">0</span>;</span><br><span class="line">    poly_inv(f0, len1);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len1; i &lt; len * <span class="number">2</span>; i++) f0[i] = <span class="number">0</span>;</span><br><span class="line">    ntt(f0, len * <span class="number">2</span>, <span class="number">1</span>), ntt(a, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) a[i] = ((<span class="number">2</span> * f0[i] % p - a[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)f0[i] % p * f0[i] % p) % p + p) % p;</span><br><span class="line">    ntt(a, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">delete</span> []f0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_derivation</span><span class="params">(ll  *a, ll  len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">1</span>; i &lt; len; i++)</span><br><span class="line">        a[i - <span class="number">1</span>] = a[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)i % p;</span><br><span class="line">    a[len - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_lintergal</span><span class="params">(ll  *a, ll  len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len + <span class="number">1</span>; i &gt;= <span class="number">1</span>; i--)</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] * (<span class="keyword">long</span> <span class="keyword">long</span>)qpow(i, p - <span class="number">2</span>) % p;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_ln</span><span class="params">(ll  *a, ll  len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll  *b = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len; i++) b[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) b[i] = <span class="number">0</span>;</span><br><span class="line">    poly_derivation(b, len);</span><br><span class="line">    poly_inv(a, len);</span><br><span class="line">    ntt(a, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    ntt(b, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++)</span><br><span class="line">        a[i] = a[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)b[i] % p;</span><br><span class="line">    ntt(a, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    poly_lintergal(a, len);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++)</span><br><span class="line">        a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">delete</span> []b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll  <span class="title">mod_sqrt</span><span class="params">(ll  x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; p; i++) <span class="keyword">if</span> (i * (<span class="keyword">long</span> <span class="keyword">long</span>)i % p == x) <span class="keyword">return</span> x;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"No Solution\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_sqrt</span><span class="params">(ll  *a, ll  len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123; a[<span class="number">0</span>] = mod_sqrt(a[<span class="number">0</span>]); <span class="keyword">return</span>; &#125;</span><br><span class="line">    ll  len1 = len / <span class="number">2</span>;</span><br><span class="line">    ll  *f0 = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len1; i++) f0[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len1; i &lt; len * <span class="number">2</span>; i++) f0[i] = <span class="number">0</span>;</span><br><span class="line">    poly_sqrt(f0, len1);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len1; i &lt; len * <span class="number">2</span>; i++) f0[i] = <span class="number">0</span>;</span><br><span class="line">    ll  *tmp = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) tmp[i] = f0[i] * <span class="number">2</span> % p;</span><br><span class="line">    poly_inv(tmp, len);</span><br><span class="line">    ntt(f0, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) f0[i] = f0[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)f0[i] % p;</span><br><span class="line">    ntt(f0, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len; i++) f0[i] = (f0[i] + a[i]) % p;</span><br><span class="line">    ntt(f0, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; <span class="number">2</span> * len; i++) tmp[i] = <span class="number">0</span>;</span><br><span class="line">    ntt(tmp, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) a[i] = tmp[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)f0[i] % p;</span><br><span class="line">    ntt(a, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">delete</span> []tmp;</span><br><span class="line">    <span class="keyword">delete</span> []f0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_exp</span><span class="params">(ll  *a, ll  len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (len == <span class="number">1</span>) &#123; a[<span class="number">0</span>]++; <span class="keyword">return</span>; &#125;</span><br><span class="line">    ll  len1 = len / <span class="number">2</span>;</span><br><span class="line">    ll  *f0 = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len1; i++) f0[i] = a[i];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len1; i &lt; len * <span class="number">2</span>; i++) f0[i] = <span class="number">0</span>;</span><br><span class="line">    poly_exp(f0, len1);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len1; i &lt; len * <span class="number">2</span>; i++) f0[i] = <span class="number">0</span>;</span><br><span class="line">    ll  *lnf0 = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) lnf0[i] = f0[i];</span><br><span class="line">    poly_ln(lnf0, len);</span><br><span class="line">    a[<span class="number">0</span>]++;</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        a[i] -= lnf0[i];</span><br><span class="line">        <span class="keyword">if</span> (a[i] &lt; <span class="number">0</span>) a[i] += p;</span><br><span class="line">    &#125;</span><br><span class="line">    ntt(a, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    ntt(f0, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) a[i] = a[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)f0[i] % p;</span><br><span class="line">    ntt(a, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poly_qpow</span><span class="params">(ll  *a, ll  len, ll  n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll  *tmp = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) tmp[i] = i &gt;= len ? <span class="number">0</span> : a[i], a[i] = (i == <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (n &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        ntt(tmp, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span> (n &amp; <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            ntt(a, len * <span class="number">2</span>, <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) a[i] = a[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)tmp[i] % p;</span><br><span class="line">            ntt(a, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">            <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len * <span class="number">2</span>; i++) tmp[i] = tmp[i] * (<span class="keyword">long</span> <span class="keyword">long</span>)tmp[i] % p;</span><br><span class="line">        ntt(tmp, len * <span class="number">2</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) tmp[i] = <span class="number">0</span>;</span><br><span class="line">        n &gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> []tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll  <span class="title">lagrange_inversion</span><span class="params">(ll  *aa, ll  len, ll  n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll  *a = <span class="keyword">new</span> ll [len * <span class="number">2</span>];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">0</span>; i &lt; len; i++) a[i] = aa[i];</span><br><span class="line">    <span class="keyword">for</span> (ll  i = len; i &lt; len * <span class="number">2</span>; i++) a[i] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (ll  i = <span class="number">1</span>; i &lt; len; i++) a[i - <span class="number">1</span>] = a[i];</span><br><span class="line">    poly_inv(a, len);</span><br><span class="line">    poly_qpow(a, len, n);</span><br><span class="line">    ll  ans = a[n - <span class="number">1</span>] * (<span class="keyword">long</span> <span class="keyword">long</span>)qpow(n, p - <span class="number">2</span>) % p;</span><br><span class="line">    <span class="keyword">delete</span> []a;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Ext_Gcd</span><span class="params">(ll a, ll b, ll &amp;x, ll &amp;y)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(b==<span class="number">0</span>)&#123;</span><br><span class="line">        x=<span class="number">1</span>;</span><br><span class="line">        y=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">    &#125;</span><br><span class="line">    ll d = Ext_Gcd(b, a%b, y, x);</span><br><span class="line">    y-=a/b*x;</span><br><span class="line">    <span class="keyword">return</span> d;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">Inv</span><span class="params">(ll a, ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll x,y;</span><br><span class="line">    ll d = Ext_Gcd(a,n,x,y);</span><br><span class="line">    <span class="keyword">if</span>(d == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> ((x%n)+n)%n;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">ll  a[<span class="number">1000000</span>],b[<span class="number">1000000</span>], n,m,k,_, len = <span class="number">1l</span>l;</span><br><span class="line">ll  c[<span class="number">1000000</span>],d[<span class="number">1000000</span>];</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line">n++;m++;</span><br><span class="line"><span class="keyword">for</span>(ll  i=<span class="number">0</span>;i&lt;n;i++) <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line"><span class="keyword">for</span>(ll  i=<span class="number">0</span>;i&lt;m;i++) <span class="built_in">cin</span>&gt;&gt;b[i];</span><br><span class="line">len=<span class="number">131072</span>;</span><br><span class="line">poly_ln(a,len);</span><br><span class="line">poly_ln(b,len);</span><br><span class="line"><span class="keyword">for</span>(ll  i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">a[i]=a[i]%p*i%p;</span><br><span class="line">b[i]=b[i]%p*i%p;</span><br><span class="line"><span class="keyword">if</span>(!(i &amp; <span class="number">1l</span>l))</span><br><span class="line">&#123;</span><br><span class="line">b[i]=b[i]%p*(p<span class="number">-1</span>)%p;</span><br><span class="line">a[i]=a[i]%p*(p<span class="number">-1</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(ll  i=<span class="number">0</span>;i&lt;len;i++)</span><br><span class="line">&#123;</span><br><span class="line">c[i]=(a[i]%p*b[i]%p)%p*Inv(i,p)%p;</span><br><span class="line"><span class="keyword">if</span>(!(i &amp; <span class="number">1l</span>l))</span><br><span class="line">&#123;</span><br><span class="line">c[i]=c[i]%p*(p<span class="number">-1</span>)%p;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">poly_exp(c,len);</span><br><span class="line"><span class="keyword">for</span>(ll  i=<span class="number">0</span>;i&lt;k;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;c[i]%p&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Peterhof&quot;&gt;&lt;a href=&quot;#XVIII-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-Peterhof&quot; class=&quot;headerlink&quot; title=&quot;XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Peterhof&quot;&gt;&lt;/a&gt;XVIII Open Cup named after E.V. Pankratiev. Grand Prix of Peterhof&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;02:21&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;02:12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;04:42&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;WA -1&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:57&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:28&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;black&quot;&gt;&lt;strong&gt;AC&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC?&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Yes&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;red&quot;&gt;*2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+6&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*7&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+2&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;+6&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Total AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;126&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;127&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;82&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;112&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;11&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;151&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;93&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010399&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/clrs97/p/8636147.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Claris的题解&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这次特地挑了个水题相对较多的比赛，感觉体验稍好一点，但是过掉的这5道题里面没有一道题是一发AC的，D题最后还没时间写。这反映出了代码的实现能力实在是有待提高啊。&lt;/p&gt;
&lt;p&gt;最终成果：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Solved 5 out of 10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Upsolved 6 out of 10&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Rank 91 out of 162 ( 击败$43.83 \%​$ )&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;做出了有趣的 $J$ 题，运用了二次剩余，欧拉判别法的知识&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="Opentrains" scheme="http://yoursite.com/tags/Opentrains/"/>
    
      <category term="二次剩余" scheme="http://yoursite.com/tags/%E4%BA%8C%E6%AC%A1%E5%89%A9%E4%BD%99/"/>
    
      <category term="暴力" scheme="http://yoursite.com/tags/%E6%9A%B4%E5%8A%9B/"/>
    
      <category term="概率算法" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E7%AE%97%E6%B3%95/"/>
    
      <category term="非完美算法" scheme="http://yoursite.com/tags/%E9%9D%9E%E5%AE%8C%E7%BE%8E%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 542 (Div. 1) 比赛总结</title>
    <link href="http://yoursite.com/2019/02/26/Codeforces-Round-542-Div-1-%E6%AF%94%E8%B5%9B%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2019/02/26/Codeforces-Round-542-Div-1-比赛总结/</id>
    <published>2019-02-25T17:21:15.000Z</published>
    <updated>2019-03-02T08:26:48.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A1</th><th style="text-align:center">A2</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:19</td><td style="text-align:center">00:18</td><td style="text-align:center">01:23</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center">AC</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+1</td><td style="text-align:center">+2</td><td style="text-align:center"></td><td style="text-align:center">+</td></tr><tr><td style="text-align:left">Difficulty</td><td style="text-align:center">1700</td><td style="text-align:center">1800</td><td style="text-align:center">2200</td><td style="text-align:center">2300</td><td style="text-align:center">2800</td><td style="text-align:center">3200</td></tr></tbody></table><p><a href="https://codeforces.com/contest/1129" target="_blank" rel="noopener">比赛链接</a></p><p>第一次在div. 1上分，现在rating <font color="green"><strong>1997</strong></font> 感觉还行。</p><p><strong>n<font color="red">ocriz</font></strong> 聚聚 Rank 61，马上就要红啦！%%%</p><p>收获：</p><ul><li>Solved 3 out of 6</li><li>Upsolved 5 out of 6</li><li>Rank 207 out of 447</li><li>想出了B题的一种很有意思的构造</li></ul><p>不足：</p><ul><li><p>代码速度还是不够快，C题没有写完。</p><a id="more"></a></li></ul><h1 id="Prob-A-签到"><a href="#Prob-A-签到" class="headerlink" title="Prob A. 签到"></a>Prob A. 签到</h1><p>这道题就是个暴力，不知道为什么还要出成两个subtask。我觉得 $O(n\log n)$ 的做法其实也挺好想的。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5505</span>;</span><br><span class="line">ll n, m, cho[maxn], cnt[maxn], _f, <span class="keyword">_t</span>, d[maxn];</span><br><span class="line"><span class="function">ll <span class="title">dist</span><span class="params">(<span class="keyword">int</span> f, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f == t) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(t &gt; f) <span class="keyword">return</span> t - f;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> n + t - f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;_f, &amp;<span class="keyword">_t</span>);</span><br><span class="line">        cnt[_f]++;</span><br><span class="line">        d[_f] = min(d[_f], dist(_f, <span class="keyword">_t</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        rep(j, n) <span class="keyword">if</span>(cnt[j] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            ans = max(ans, dist(i, j) + (cnt[j] - <span class="number">1</span>) * n + d[j]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld "</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-B-有趣构造题"><a href="#Prob-B-有趣构造题" class="headerlink" title="Prob B. 有趣构造题"></a>Prob B. 有趣构造题</h1><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给定一个长度为 $n$ 的数组 $a$，要求出以下的最大值：<br>$$<br>\max_{0\leq l\leq r\leq n-1} \sum_{l\leq i \leq r} (r-l+1)\cdot a_i<br>$$</p><p>Alice想出了下面的 $O(n)​$ 的优秀假算法，你想要hack她。给定 $k​$ ，你需要找到一个长度不超过 $2000​$ ，每个元素不超过 $10^6​$ 的数组，使得正确答案正好比Alice的答案大 $k​$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function find_answer(n, a)</span><br><span class="line">    <span class="comment"># Assumes n is an integer between 1 and 2000, inclusive</span></span><br><span class="line">    <span class="comment"># Assumes a is a list containing n integers: a[0], a[1], ..., a[n-1]</span></span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    cur = <span class="number">0</span></span><br><span class="line">    k = <span class="number">-1</span></span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">0</span> to i = n<span class="number">-1</span></span><br><span class="line">        cur = cur + a[i]</span><br><span class="line">        <span class="keyword">if</span> cur &lt; <span class="number">0</span></span><br><span class="line">            cur = <span class="number">0</span></span><br><span class="line">            k = i</span><br><span class="line">        res = max(res, (i-k)*cur)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><h3 id="我的构造"><a href="#我的构造" class="headerlink" title="我的构造"></a>我的构造</h3><p>我的构造方法只需要用到 $0$, $-1$ 以及一个较大的数 $x$。构造的序列形式是这样的：</p><p>$$<br>\underbrace{0,0,\cdots,0} _ {m   zeroes},-1, \underbrace{0,0,\cdots,0} _ {n-m-2   zeroes} , x<br>$$</p><p>显然，Alice认为的最优串是后面 $n-m-1$ 个数，答案是$(n-m-1) \cdot x​$</p><p>正确答案是所有的数，答案是 $n \cdot (x-1)​$</p><p>两者之差为：$n\cdot (x-1) - (n-m-1) \cdot x =  k$</p><p>化简得：$(m+1)x=n+k$。因此可以直接枚举 $n$（$1\leq n\leq 2000$），检查它有没有小于 $2000$ 的因数 $d$，且$(n+k)/d\leq10^6$。</p><p>可以保证一定有解，不过分析还稍微有些麻烦。</p><ul><li>在 $10^6 - 1000$ 以下，枚举连续 $1000$ 个数一定会枚举到 $1000$ 的倍数，因此可以保证一定有 $1000$ 这个解；</li><li>对于其他情况，由于数组长度限制，较难分析一些，但是实践表明这个因数 $d$ 枚举到 $1100$ 都能找到解。</li></ul><h3 id="std构造"><a href="#std构造" class="headerlink" title="std构造"></a>std构造</h3><p>这种构造方法更为简单，易于分析。构造形式是这样的：</p><p>$$-1, \underbrace{a_1, a_2, \cdots, a_{n-1}}_{sum  =   S}​$$</p><p>这样，差值就为$(S-1) \cdot n - S\cdot (n-1)= S-n​$。使得 $S​$ 达到 $ 10^9​$ 很容易，贪心即可。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p> (Solution 1)</p> <figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100200</span>, V = <span class="number">1000000</span>;</span><br><span class="line">ll k;</span><br><span class="line"><span class="function">ll <span class="title">lim</span><span class="params">(ll x)</span> </span>&#123; <span class="keyword">return</span> (V - <span class="number">1</span> - x) * x; &#125;</span><br><span class="line"><span class="function">ll <span class="title">lim2</span><span class="params">(ll n)</span> </span>&#123; <span class="keyword">return</span> (n - <span class="number">1</span>) * V - n; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">1999</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k % i == <span class="number">0</span> &amp;&amp; lim(i) &gt;= k) &#123;</span><br><span class="line">            ll need = k / i + <span class="number">1</span> + i;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i + <span class="number">1</span>);</span><br><span class="line">            rep(j, i) <span class="built_in">printf</span>(<span class="string">"-1 "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, need);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> n = <span class="number">2</span>; n &lt;= <span class="number">2000</span>; ++n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> t = n - <span class="number">1</span>; t &gt; <span class="number">0</span>; --t) <span class="keyword">if</span>((k + n) % t == <span class="number">0</span>) &#123;</span><br><span class="line">            ll B = n - t, A = (k + n) / t;</span><br><span class="line">            <span class="keyword">if</span>(A &gt; V) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, n);</span><br><span class="line">            rep(i, n - B - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1 "</span>);</span><br><span class="line">            rep(i, B - <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"0 "</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, A);</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-C-dp-trie-后缀树"><a href="#Prob-C-dp-trie-后缀树" class="headerlink" title="Prob C. dp, trie(?), 后缀树"></a>Prob C. dp, trie(?), 后缀树</h1><h2 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h2><p>显然有直接dp+hash的做法，不过复杂度会多乘上8，好像这道题卡这个常数。。。</p><p>可以考虑放在trie树上优化dp的转移过程。考虑一个个将字符插入的过程，若插入$s[i]$，那么就相当于在trie上插入这么一个字符串：$s[i, i-1, i-2, \cdots, 1]$，每次新建了一个节点时，就将向上三代祖先的dp值加过来，如果第四代祖先也合法那么也加入。这么做实际上是暴力建出了原串reverse后的后缀树，在后缀树上dp。（蒟蒻现在还不会写后缀树，以上纯属口胡）</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>, MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    node *ch[<span class="number">2</span>], *fa;</span><br><span class="line">    <span class="keyword">int</span> dp, v;</span><br><span class="line">&#125; trie[<span class="number">9000000</span>], *Null, *rt = trie + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> tot = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">node* <span class="title">New</span><span class="params">(node* fa)</span> </span>&#123;</span><br><span class="line">    tot++;</span><br><span class="line">    assert(tot &lt; <span class="number">9000000</span>);</span><br><span class="line">    trie[tot].ch[<span class="number">0</span>] = trie[tot].ch[<span class="number">1</span>] = Null;</span><br><span class="line">    trie[tot].fa = fa;</span><br><span class="line">    <span class="keyword">return</span> trie + tot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, a[maxn], ans = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Valid</span><span class="params">(<span class="keyword">int</span> a1, <span class="keyword">int</span> a2, <span class="keyword">int</span> a3, <span class="keyword">int</span> a4)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a1==<span class="number">1</span> &amp;&amp; a2==<span class="number">1</span> &amp;&amp; a3==<span class="number">0</span> &amp;&amp; a4==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a1==<span class="number">1</span> &amp;&amp; a2==<span class="number">0</span> &amp;&amp; a3==<span class="number">1</span> &amp;&amp; a4==<span class="number">0</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a1==<span class="number">0</span> &amp;&amp; a2==<span class="number">1</span> &amp;&amp; a3==<span class="number">1</span> &amp;&amp; a4==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">if</span>(a1==<span class="number">1</span> &amp;&amp; a2==<span class="number">1</span> &amp;&amp; a3==<span class="number">1</span> &amp;&amp; a4==<span class="number">1</span>) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    node* p = rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = r; i &gt; <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(p-&gt;ch[a[i]] == Null) &#123;</span><br><span class="line">            p-&gt;ch[a[i]] = New(p);</span><br><span class="line">            p = p-&gt;ch[a[i]];</span><br><span class="line">            p-&gt;v = a[i];</span><br><span class="line">            node *anc = p-&gt;fa;</span><br><span class="line">            <span class="keyword">int</span> x[<span class="number">4</span>]; x[<span class="number">0</span>] = p-&gt;v;</span><br><span class="line">            <span class="keyword">if</span>(anc != Null) &#123;</span><br><span class="line">                add(p-&gt;dp, anc-&gt;dp);</span><br><span class="line">                x[<span class="number">1</span>] = anc-&gt;v;</span><br><span class="line">                anc = anc-&gt;fa;</span><br><span class="line">                <span class="keyword">if</span>(anc != Null) &#123;</span><br><span class="line">                    add(p-&gt;dp, anc-&gt;dp);</span><br><span class="line">                    x[<span class="number">2</span>] = anc-&gt;v;</span><br><span class="line">                    anc = anc-&gt;fa;</span><br><span class="line">                    <span class="keyword">if</span>(anc != Null) &#123;</span><br><span class="line">                    add(p-&gt;dp, anc-&gt;dp);</span><br><span class="line">                        x[<span class="number">3</span>] = anc-&gt;v;</span><br><span class="line">                        anc = anc-&gt;fa;</span><br><span class="line">                        <span class="keyword">if</span>(anc != Null &amp;&amp; Valid(x[<span class="number">3</span>], x[<span class="number">2</span>], x[<span class="number">1</span>], x[<span class="number">0</span>])) &#123;</span><br><span class="line">                            add(p-&gt;dp, anc-&gt;dp);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            add(ans, p-&gt;dp);</span><br><span class="line">        &#125; <span class="keyword">else</span> p = p-&gt;ch[a[i]];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    rt-&gt;dp = <span class="number">1</span>, rt-&gt;fa = Null, rt-&gt;v = <span class="number">-1</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        insert(i);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-D-分块"><a href="#Prob-D-分块" class="headerlink" title="Prob D. 分块"></a>Prob D. 分块</h1><p>还没补。。。</p><h1 id="Prob-E-博弈"><a href="#Prob-E-博弈" class="headerlink" title="Prob E. 博弈"></a>Prob E. 博弈</h1><h2 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h2><ul><li>以1为根，首先询问 $n-1$ 次，问出每个子树的大小。</li><li>然后从子树大小从小到大的顺序确定每个节点的父亲。这个过程需要二分。</li></ul><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; T, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!T.size())</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"1\n1\n%d\n"</span>, (<span class="keyword">int</span>)T.size());</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : T)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d "</span>, x);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n%d\n"</span>, v);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="keyword">int</span> res; read(res);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> sz[<span class="number">505</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; V, S, E[<span class="number">505</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123; <span class="keyword">return</span> sz[i] &lt; sz[j]; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n; read(n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        V.push_back(i);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">        sz[i] = query(V, i);</span><br><span class="line">    sort(V.begin(), V.end(), cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : V)  &#123;</span><br><span class="line">        <span class="keyword">int</span> k = query(S, x);</span><br><span class="line">        <span class="keyword">while</span> (k--)  &#123;</span><br><span class="line">            <span class="keyword">int</span> l = <span class="number">0</span>, r = S.size() - <span class="number">2</span>, res = r + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (l &lt;= r) &#123;</span><br><span class="line">                <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">                <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; tmp;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= mid; ++i)</span><br><span class="line">                    tmp.push_back(S[i]);</span><br><span class="line">                <span class="keyword">if</span> (query(tmp, x) &gt; <span class="number">0</span>)</span><br><span class="line">                    res = mid, r = mid - <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    l = mid + <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            E[x].push_back(S[res]);</span><br><span class="line">            S.erase(S.begin() + res);</span><br><span class="line">        &#125;</span><br><span class="line">        S.push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> x : S)</span><br><span class="line">        E[<span class="number">1</span>].push_back(x);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"ANSWER"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> v : E[i])</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, v);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A1&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A2&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:19&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:18&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:23&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Difficulty&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1700&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1800&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2200&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2300&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2800&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;3200&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1129&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次在div. 1上分，现在rating &lt;font color=&quot;green&quot;&gt;&lt;strong&gt;1997&lt;/strong&gt;&lt;/font&gt; 感觉还行。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;n&lt;font color=&quot;red&quot;&gt;ocriz&lt;/font&gt;&lt;/strong&gt; 聚聚 Rank 61，马上就要红啦！%%%&lt;/p&gt;
&lt;p&gt;收获：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved 3 out of 6&lt;/li&gt;
&lt;li&gt;Upsolved 5 out of 6&lt;/li&gt;
&lt;li&gt;Rank 207 out of 447&lt;/li&gt;
&lt;li&gt;想出了B题的一种很有意思的构造&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;不足：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;代码速度还是不够快，C题没有写完。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="后缀树" scheme="http://yoursite.com/tags/%E5%90%8E%E7%BC%80%E6%A0%91/"/>
    
      <category term="trie" scheme="http://yoursite.com/tags/trie/"/>
    
      <category term="博弈" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%BC%88/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 1513 比赛报告</title>
    <link href="http://yoursite.com/2019/02/23/Opentrains-1513%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/02/23/Opentrains-1513比赛报告/</id>
    <published>2019-02-22T16:42:36.000Z</published>
    <updated>2019-03-09T13:17:55.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Petrozavodsk-Winter-2018-AtCoder-Contest"><a href="#Petrozavodsk-Winter-2018-AtCoder-Contest" class="headerlink" title="Petrozavodsk Winter-2018. AtCoder Contest"></a>Petrozavodsk Winter-2018. AtCoder Contest</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">01:10</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">04:24</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">——</td><td style="text-align:center">02:12</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"></td><td style="text-align:center">AC</td><td style="text-align:center">Y</td><td style="text-align:center">AC</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"></td><td style="text-align:center">Y</td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center">+2</td><td style="text-align:center"></td><td style="text-align:center">+1</td><td style="text-align:center"></td><td style="text-align:center">*</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">*5</td><td style="text-align:center"></td><td style="text-align:center">+1</td></tr><tr><td style="text-align:left">Total AC</td><td style="text-align:center">103</td><td style="text-align:center">4</td><td style="text-align:center">13</td><td style="text-align:center">24</td><td style="text-align:center">36</td><td style="text-align:center">89</td><td style="text-align:center">0</td><td style="text-align:center">10</td><td style="text-align:center">31</td><td style="text-align:center">2</td><td style="text-align:center">96</td></tr></tbody></table><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=001513" target="_blank" rel="noopener">比赛链接</a></p><p><a href="https://atcoder.jp/contests/apc001" target="_blank" rel="noopener">AtCoder上对应的比赛APC001的链接</a></p><p><a href="https://blog.csdn.net/whzzt/article/details/79321484" target="_blank" rel="noopener">whzzt的APC001题解链接</a></p><p>注意这个比赛Opentrains上是Atcoder Petrozavodsk Contest 的Div. 1版本，但是C题、D题、I题APC001上是没有的。</p><p>第二次开火车。这次的题目感觉挺不错，思维题居多，代码量不太大。要是推荐题目的话，这里的每道题目都是挺有idea的！但是还是太菜了啊，不知道这么开火车是不是有点浪费这么好的题目。。。这一次算是经历千辛万苦总算签完到了，可是用的时间实在是太多了。以后继续加油吧！</p><p>感觉这一场还是收获满满啊：（虽然现场打得不算出色）</p><ul><li>Solved 3 out of 11</li><li>Upsolved 6 out of 11</li><li>学到了有理数二分与Stern-Brocot树</li><li>看了2009国家集训队论文金斌《欧几里得算法的应用》以及《一类分数问题的应用》</li><li>学到了一系列类欧几里得算法</li><li>熟悉了Pick定理</li><li>Rank 81 out of 113。</li></ul><p>这次比赛踩过的坑点：</p><ul><li>A题假算法</li><li>K题没开<code>long long</code>，少判断连通图的情况</li></ul><a id="more"></a><h2 id="Prob-A-交互题，二分"><a href="#Prob-A-交互题，二分" class="headerlink" title="Prob. A  交互题，二分"></a>Prob. A  交互题，二分</h2><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>这道题我要给我们队谢罪。。。场上假了两次，后来才想清楚正确做法。。。</p><p>做法就是如果知道一段区间$[l,r]$的左端点颜色 $lcolor$ ，那么每个点的颜色都是可以有一个期待值的，而根据题意，一定会有至少一个点不满足期待值。二分中点，那么根据中点是否符合期待，可以断定不符合期待值的点的位置一定在左区间还是右区间，从而递归下去，找出这个期待值就可以了。具体实现细节还挺精妙，详细看代码吧。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, tp, q = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; qe;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(qe.find(pos) != qe.end()) <span class="keyword">return</span> qe[pos];</span><br><span class="line">    q++;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, pos);</span><br><span class="line">    fflush(<span class="built_in">stdout</span>);</span><br><span class="line">    <span class="built_in">string</span> res = <span class="string">""</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; res;</span><br><span class="line">    <span class="keyword">if</span>(res == <span class="string">"Vacant"</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    qe[pos] = res == <span class="string">"Male"</span>;</span><br><span class="line">    <span class="keyword">return</span> res == <span class="string">"Male"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> lcolor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123; query(l); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span>(l == r - <span class="number">1</span>) &#123; query(l), query(r); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, qr = query(mid);</span><br><span class="line">    <span class="keyword">if</span>(qr == (((mid - l) &amp; <span class="number">1</span>) + lcolor) % <span class="number">2</span>) solve(mid, r, qr);</span><br><span class="line">    <span class="keyword">else</span> solve(l, mid - <span class="number">1</span>, lcolor);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) expect[i] = expect[i - <span class="number">1</span>] ^ <span class="number">1</span>;</span><br><span class="line">    solve(<span class="number">0</span>, n - <span class="number">1</span>, query(<span class="number">0</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-F-有思维含量的贪心or树dp"><a href="#Prob-F-有思维含量的贪心or树dp" class="headerlink" title="Prob. F 有思维含量的贪心or树dp"></a>Prob. F 有思维含量的贪心or树dp</h2><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>这题当时还想了好久，cyy和wzk都说是好题，我还以为是什么神奇点分治之类的做法呢。。后来想了想贪心对的面挺大，一写居然一次OK了，感觉还行，就是想的时间有点过长了。</p><p>解法：</p><ul><li>考虑菊花图的情况，如果中心点有 $k$ 个邻居，则答案为 $k-1$ 。因此对于任意一个点，周围如果有 $k$  个邻居，则最多只能有一个邻居子树中没有天线。因此利用这个性质来树dp。 但是要考虑父节点一侧的贡献极为麻烦，因此我们考虑从度数超过3的点开始dp，就可以不用管父节点的问题。</li><li>如果树是一条链，则答案为1.</li><li>否则，按照题意贪心即可。注意特殊情况：孤立节点把答案记为0，合并时要注意孤立点。</li></ul><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> dp[maxn], n, _f, <span class="keyword">_t</span>, deg[maxn], rt = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">bool</span> nhas = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(g == fa) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> son = dfs(g, v);</span><br><span class="line">        ans += son;</span><br><span class="line">        <span class="keyword">if</span>(son == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(nhas) nhas = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> ans++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n - <span class="number">1</span>) &#123;</span><br><span class="line">        read(_f, <span class="keyword">_t</span>);</span><br><span class="line">        _f++, <span class="keyword">_t</span>++;</span><br><span class="line">        G[_f].push_back(<span class="keyword">_t</span>);</span><br><span class="line">        G[<span class="keyword">_t</span>].push_back(_f);</span><br><span class="line">        deg[_f]++, deg[<span class="keyword">_t</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(deg[i] &gt;= <span class="number">3</span>) rt = i;</span><br><span class="line">    <span class="keyword">if</span>(rt == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dfs(rt, <span class="number">-1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-K-有思维含量的结论，树"><a href="#Prob-K-有思维含量的结论，树" class="headerlink" title="Prob. K 有思维含量的结论，树"></a>Prob. K 有思维含量的结论，树</h2><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>这道题还是挺有意思的。一种思路是启发式合并连通块，是 $O(n\log^2 n)$的，我场上想到的就是这种做法。可是还有更加优雅简洁的做法：（yzh想出的）</p><p>如果把每个连通块当做新图的节点的话，题中加边的过程就是一个建树的过程，而每个连通块选几个节点就是这个节点的度数。那么有 $k$ 个节点的树，每个点的度数 $deg_v$ 满足什么条件时才能保证能构造出一棵树呢？</p><ul><li>$\sum\limits_{i=1}^k deg_i = 2 (k-1)$，这是因为要连成一棵树就需要$k-1$条边</li><li>$\forall i \in \{1,2,\cdots,n\}, deg_i \geq 0$，这是因为要保证每个点都连通。</li></ul><p>实际上这些也已经够了。因此只需要：</p><blockquote><p>把每个连通块中的最小点权加入答案，然后剩下的点权放在一起排序，一直从小到大取，直到选出的点数达到 $2(k-1)$。</p></blockquote><p>感觉这个做法还是很精妙的。不过千万不要忘记特判连通图的情况，连通图答案就是0，不需要加边。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-O3"</span>, <span class="meta-string">"-Ofast"</span>, <span class="meta-string">"inline"</span>, <span class="meta-string">"-ffast-math"</span>, <span class="meta-string">"-funroll-loops"</span>)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">multiset</span>&lt;<span class="keyword">int</span>&gt; tot;</span><br><span class="line"><span class="keyword">int</span> n, m, a[maxn], _f, <span class="keyword">_t</span>, cc = <span class="number">0</span>, vis[maxn], mn;</span><br><span class="line">ll ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    vis[v] = cc;</span><br><span class="line">    mn = min(mn, a[v]);</span><br><span class="line">    tot.insert(a[v]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) <span class="keyword">if</span>(!vis[g])</span><br><span class="line">        dfs(g, v);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">int</span> need = n - <span class="number">1</span> - m;</span><br><span class="line">    <span class="keyword">if</span>(need == <span class="number">0</span>) &#123; <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span>(n / <span class="number">2</span> &lt; need) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Impossible"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    need &lt;&lt;= <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;_f, &amp;<span class="keyword">_t</span>);</span><br><span class="line">        _f++, <span class="keyword">_t</span>++;</span><br><span class="line">        G[_f].push_back(<span class="keyword">_t</span>);</span><br><span class="line">        G[<span class="keyword">_t</span>].push_back(_f);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">        cc++, mn = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">        dfs(i, <span class="number">-1</span>);</span><br><span class="line">        tot.erase(tot.find(mn));</span><br><span class="line">        ans += mn;</span><br><span class="line">        need--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(need--) &#123;</span><br><span class="line">        <span class="keyword">auto</span> beg = tot.begin();</span><br><span class="line">        ans += *beg;</span><br><span class="line">        tot.erase(tot.find(*beg));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="赛后补题"><a href="#赛后补题" class="headerlink" title="赛后补题"></a>赛后补题</h1><h2 id="Prob-E-异或好题，状压dp"><a href="#Prob-E-异或好题，状压dp" class="headerlink" title="Prob. E 异或好题，状压dp"></a>Prob. E 异或好题，状压dp</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有一棵有边权的树，你可以选择其中一条链，将链中的每一条边的边权都异或上一个你指定的数 $x$ ，问至少要操作几次，才能使所有边的边权都变为 $0$。节点数 $n \leq 2 \cdot 10^5$ ，边权 $0 \leq w \leq 15 $</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>这道题非常美妙！感觉这么好的题简直百里挑一！</p><ul><li>首先发现链修改比较棘手，如果是单点修改，那么问题就会变得简单不少。如何转化呢？我们先把边权转化为点权：令每个点的点权为与其相连的所有边的边权的异或和。考虑到异或的性质，链修改就变为了两个单点修改了。</li><li>于是，我们把每个点的点权求出来，得到一个点权数组。我们可以进行的操作是选择其中一个或两个数（一个对应选择从根节点开始的一条链的情况），异或上 $x$，问至少需要多少操作才能使所有数都变为0.</li><li>显然有一个贪心策略：如果某种点权 $w$ 出现了 $2$ 次以上，那么如果我们把这两个点权都异或上 $w$ ，就可以消去两个数，我们应该首先做这件事。因此对于每种点权 $w$以及出现次数 $c_w$，我们都将答案增加 $\left[\frac{c_w}{2}\right]$，然后将出现次数变为 $c_w % 2$。</li><li>之后，每一种点权都最多出现一次，而点权只有$[0,15]$这16种，因此一个枚举子集的状压dp即可在 $O(3^p)$时间复杂度内解决问题。注意需要进行一些预处理。</li></ul><p>Bonus：最后一步的 $n$ 个数异或的问题，能否证明是NPC的？或者，有无多项式做法？</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n, _f, <span class="keyword">_t</span>, _w, cnt[maxn], dp[<span class="number">1</span> &lt;&lt; <span class="number">17</span>], ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> Xor[<span class="number">1</span> &lt;&lt; <span class="number">17</span>], popcount[<span class="number">1</span> &lt;&lt; <span class="number">17</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;_f, &amp;<span class="keyword">_t</span>, &amp;_w);</span><br><span class="line">        a[_f] ^= _w;</span><br><span class="line">        a[<span class="keyword">_t</span>] ^= _w;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) cnt[a[i]]++;</span><br><span class="line">    cnt[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">16</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> ad = cnt[i] / <span class="number">2</span>;</span><br><span class="line">        ans += ad, cnt[i] -= <span class="number">2</span> * ad;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> S0 = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i) <span class="keyword">if</span>(cnt[i])</span><br><span class="line">        S0 += <span class="number">1</span> &lt;&lt; i;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">1</span> &lt;&lt; <span class="number">16</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; <span class="number">1</span> &lt;&lt; j &lt;= i; ++j) <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            Xor[i] = Xor[i ^ (<span class="number">1</span> &lt;&lt; j)] ^ j;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        popcount[i] = __builtin_popcount(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt;= S0; ++S) &#123;</span><br><span class="line">        dp[S] = popcount[S];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> T = S; T; T = (T - <span class="number">1</span>) &amp; S) <span class="keyword">if</span>(Xor[T] == <span class="number">0</span>) &#123;</span><br><span class="line">            dp[S] = min(dp[S], dp[S ^ T] + popcount[T] - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, dp[S0] + ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-I-线段树，注意溢出情况"><a href="#Prob-I-线段树，注意溢出情况" class="headerlink" title="Prob. I 线段树，注意溢出情况"></a>Prob. I 线段树，注意溢出情况</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>你要维护一个序列，支持以下三种操作：</p><ul><li>$ADD  [l, r] v$：区间 $[l, r]$中每个数加v。</li><li>$DIV  [l, r]   v$ ：区间 $[l,r]$ 中每个数除以 $v$，下取整。</li><li>$MAX [l,r]$：询问区间 $[l,r]$的最大值。</li></ul><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>显然这是一个线段树下传懒惰标记的题目。如何定义可以合并的标记呢？考虑更一般的情况，我们定义标记为：</p><p>$$tag(x) = \left[\frac{x+a}{b}\right]$$</p><p>这样，考虑$a=a_1,b=b_1​$ 的标记 $t_1​$ 和 $a=a_2,b=b_2​$ 的标记 $t_2​$，它们如何合并呢？这里假如先进行标记$t_1​$，后进行标记$t_2​$</p><p>$$t_2 \circ t_1(x) = \left[\frac{[\frac{x+a_1}{b_1}] + a_2}{b_2}\right] = \left[\frac{x+a_1+a_2\cdot b_1}{b_1\cdot b_2}\right]​$$</p><p>这样，我们就在数学上解决了问题。什么？会WA？因为这么做每次都使被合并的标记的 $b$ 相乘，因此可能会使标记中的 $b$ 溢出。那怎么办呢？我们改一下标记的定义：</p><p>$$tag(x) = \left[\frac{x+a}{b}\right] + c,    0 \leq a &lt; b$$</p><p>可以看到，左边的是个近似真分数的形式。我们想要一直维持 $a\leq 10^9, b \leq 10^9$。实际上当 $b &gt; 10^9$ 时直接把左边的 分数进行修改就好了，因为左边无论代入什么 $x$ 答案都应当是0.这样我们也解决了代码中的难题。</p><p>注意：这种修改方式是很特殊的，当时使用不正确的修改方式导致WA on test 35。</p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f</span>, maxn = <span class="number">200200</span>;</span><br><span class="line"><span class="keyword">int</span> n, q, a[maxn], _op, _l, _r, _x;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tag</span> &#123;</span></span><br><span class="line">    ll a, b, c;</span><br><span class="line">    tag(ll aa=<span class="number">0</span>, ll bb=<span class="number">1</span>, ll cc=<span class="number">0</span>): a(aa), b(bb), c(cc) &#123; &#125;</span><br><span class="line">    tag <span class="keyword">operator</span> + (<span class="keyword">const</span> tag&amp; y) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll tmp = a + (c + y.a) * b;</span><br><span class="line">        ll rc = tmp / (y.b * b) + y.c;</span><br><span class="line">        ll ra = tmp % (y.b * b);</span><br><span class="line">        ll rb = y.b * b;</span><br><span class="line">        assert(y.a &lt;= INF &amp;&amp; y.b &lt;= INF);</span><br><span class="line">        <span class="keyword">if</span>(rb &gt; INF) &#123;</span><br><span class="line">            ra = max((ll)<span class="number">0</span>, ra - rb + INF);</span><br><span class="line">            rb = INF;</span><br><span class="line">        &#125;</span><br><span class="line">        assert(ra &lt; rb &amp;&amp; rb &lt;= INF);</span><br><span class="line">        <span class="keyword">return</span> tag(ra, rb, rc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> tag&amp; t) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>( a == t.a &amp;&amp; b == t.b &amp;&amp; c == t.c) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; Empty;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">segtree</span> &#123;</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> lson (o &lt;&lt; 1)</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">define</span> rson (o &lt;&lt; 1 | 1)</span></span><br><span class="line">    ll maxv[maxn &lt;&lt;  <span class="number">2</span>];</span><br><span class="line">    tag tg[maxn &lt;&lt; <span class="number">2</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushup</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">        maxv[o] = max(maxv[lson], maxv[rson]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tg[o] == Empty) <span class="keyword">return</span>;</span><br><span class="line">        tg[lson] = tg[lson] + tg[o];</span><br><span class="line">        tg[rson] = tg[rson] + tg[o];</span><br><span class="line">        maxv[lson] = (maxv[lson] + tg[o].a) / tg[o].b + tg[o].c;</span><br><span class="line">        maxv[rson] = (maxv[rson] + tg[o].a) / tg[o].b + tg[o].c;</span><br><span class="line">        tg[o] = Empty;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *arr)</span> </span>&#123;</span><br><span class="line">        tg[o] = tag();</span><br><span class="line">        <span class="keyword">if</span>(l == r) &#123; maxv[o] = arr[l]; <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        build(lson, l, mid, arr);</span><br><span class="line">        build(rson, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, tag m)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">            tg[o] = tg[o] + m;</span><br><span class="line">            maxv[o] = (maxv[o] + m.a) / m.b + m.c;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        pushdown(o, l, r);</span><br><span class="line">        <span class="keyword">if</span>(ql &lt;= mid) modify(lson, l, mid, ql, qr, m);</span><br><span class="line">        <span class="keyword">if</span>(qr &gt; mid) modify(rson, mid + <span class="number">1</span>, r, ql, qr, m);</span><br><span class="line">        pushup(o);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) <span class="keyword">return</span> maxv[o];</span><br><span class="line">        pushdown(o, l, r);</span><br><span class="line">        <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>; ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(ql &lt;= mid) ans = max(ans, query(lson, l, mid, ql, qr));</span><br><span class="line">        <span class="keyword">if</span>(qr &gt; mid) ans = max(ans, query(rson, mid + <span class="number">1</span>, r, ql, qr));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; seg;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, q);</span><br><span class="line">    rep(i, n) read(a[i]);</span><br><span class="line">    seg.build(<span class="number">1</span>, <span class="number">1</span>, n, a);</span><br><span class="line">    rep(i, q) &#123;</span><br><span class="line">        read(_op, _l, _r, _x);</span><br><span class="line">        _l++, _r++;</span><br><span class="line">        <span class="keyword">if</span>(_op == <span class="number">0</span>) </span><br><span class="line">            seg.modify(<span class="number">1</span>, <span class="number">1</span>, n, _l, _r, tag(<span class="number">0</span>, <span class="number">1</span>, _x));</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(_op == <span class="number">1</span>) </span><br><span class="line">            seg.modify(<span class="number">1</span>, <span class="number">1</span>, n, _l, _r, tag(<span class="number">0</span>, _x, <span class="number">0</span>));</span><br><span class="line">        <span class="keyword">else</span> </span><br><span class="line">            write(seg.query(<span class="number">1</span>, <span class="number">1</span>, n, _l, _r)), <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-C-构造，三角形内整点，Picks定理，Stern-Brocot树"><a href="#Prob-C-构造，三角形内整点，Picks定理，Stern-Brocot树" class="headerlink" title="Prob. C 构造，三角形内整点，Picks定理，Stern-Brocot树"></a>Prob. C 构造，三角形内整点，Picks定理，Stern-Brocot树</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给你三角形三个顶点的坐标 $(x_1,y_1),(x_2,y_2),(x_3,y_3)$，要求你在里面找到任意一个整点。如果没有，输出-1。</p><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>Pick定理在这道题中可以判断有解无解。</p><blockquote><p>Pick定理：简单多边形内部的整点数量 $I$ 与边上整点数量 $B$ 、多边形面积 $S$ 有以下关系：</p><p>$$I=A+1-B/2$$</p></blockquote><p>解法一即std做法有点毒瘤，这里不说了。</p><p>我觉得非常优美的解法是讲题时一个营员提出的做法。首先可以竖直把三角形切成两个小三角，然后解决这两个三角形的问题。如果以不在竖直边上的点为坐标原点建立坐标系，那么整点就是满足</p><p>$lo \leq \frac{y}{x} \leq hi$   and    $x \leq m$</p><p>的点的集合。如何找到其中的一个点？我学到了两种新科技：</p><h4 id="Stern-Brocot树"><a href="#Stern-Brocot树" class="headerlink" title="Stern-Brocot树"></a>Stern-Brocot树</h4><p>Stern-Brocot树。用这种神奇的构造结构可以实现对有理数的二分。具体见具体数学第96页。</p><p><img src="Stern-Brocot-Tree.gif" alt="Stern-Brocot-Tree的形状"></p><p>Stern Brocot tree是一棵二叉树，初始为 $(\frac01, \frac10)$ ，每次在$\frac mn$和$\frac {m^{‘}} {n^{‘}}$之间插入</p><p>$\frac{(m + m’)}{(n+n’)}​$，如此不断生成下一层。</p><p>Stern Brocot tree有很多神奇而优美的性质：</p><ul><li><p>Stern Brocot tree树可以生成所有的有理数，且每个数只会出现恰好一次</p></li><li><p>Stern Brocot tree生成的分数都是不可约的，即$gcd(m,n) = 1$</p></li><li><p>任意两个在构造时是相邻的分数 $m/n$ 和 $ m’/n’$，有 $mn’ – m’n = 1$</p></li><li><p>中序遍历Stern Brocot tree树可以得到有序的序列，即具有BST性质。</p></li></ul><h4 id="类欧几里得"><a href="#类欧几里得" class="headerlink" title="类欧几里得"></a>类欧几里得</h4><p>还有更加新奇的科技！又是一种类欧几里得算法！主要用来解决以下问题：找到位于 $l=\frac{m}{n}​$ 与 $r=\frac{p}{q}​$ 之间的分母最小的分数$\frac yx​$。</p><ul><li>首先，如果 $\frac mn​$与 $\frac pq​$ 之间有整数，那么问题已经解决了；</li><li>否则，一定有$r-l\leq1$。两个数同时减去 $l$ 的整数部分 $[l]$，得到的答案也是等价的。即：问题转化为$m&lt;n,p\leq q$ 的情况。</li><li>这时，要让 $y$ 最小， $x$ 一定也要最小，因此，可以两边直接取倒数，得到：$\frac qp &lt; \frac xy &lt; \frac nm$</li><li>这样递归下去即可。可以看到左右边界化为小于1的步骤相当于取模，分子分母量级会减小一半，因此复杂度为 $\log \min(n, q)​$。</li></ul><p>有了这种算法，我们先找到满足$lo &lt; \frac yx&lt; hi$的分母最小的分数，然后判断是否合法即可。注意需要保证 $lo, hi$ 的正负号，因此代码中一大部分内容都是分类讨论。</p><p>相关还有很多拓展问题，请参考下面两篇论文：（在后面的附录中将会给出）</p><ul><li>2009 国家集训队论文 金斌《欧几里得算法的应用》</li><li>2007 国家集训队作业  杨哲《一类分数问题的研究》（这篇比较难拿到手，我是在UOJ群里问到的，mathew99给了我文献资源）</li></ul><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS(x) ( (x)&gt;0 ? (x) : (-(x)) )</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">frac</span> &#123;</span></span><br><span class="line">    ll nu, de;</span><br><span class="line">    frac(ll a = <span class="number">0</span>, ll b = <span class="number">1</span>): nu(a), de(b) &#123; simplify(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simplify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(de &lt; <span class="number">0</span>) de = -de, nu = -nu;</span><br><span class="line">        ll g = __gcd(ABS(nu), ABS(de));</span><br><span class="line">        nu /= g, de /= g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span> </span>&#123; swap(nu, de); &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> + (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll d = de * rhs.de / __gcd(ABS(de), ABS(rhs.de));</span><br><span class="line">        ll u = nu * (d / de) + rhs.nu * (d / rhs.de);</span><br><span class="line">        <span class="keyword">return</span> frac(u, d);</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> - (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll d = de * rhs.de / __gcd(ABS(de), ABS(rhs.de));</span><br><span class="line">        ll u = nu * (d / de) - rhs.nu * (d / rhs.de);</span><br><span class="line">        <span class="keyword">return</span> frac(u, d);</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> * (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        frac res = frac(nu * rhs.nu, de * rhs.de);</span><br><span class="line">        res.simplify();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> - () <span class="keyword">const</span> &#123;</span><br><span class="line">        frac ret = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(de &lt; <span class="number">0</span>) ret.de = -de;</span><br><span class="line">        <span class="keyword">else</span> ret.nu = -nu;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> / (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> * frac(rhs.de, rhs.nu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de &lt; rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de == rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de &lt;= rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de &gt; rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">floor</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nu / de; &#125;</span><br><span class="line">    <span class="function">ll <span class="title">ceil</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nu / de + (nu % de != <span class="number">0</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">frac <span class="title">SearchBetween</span><span class="params">(frac l, frac r)</span> </span>&#123;</span><br><span class="line">    l.simplify(), r.simplify();</span><br><span class="line">    ll lb = l.<span class="built_in">floor</span>();</span><br><span class="line">    <span class="keyword">if</span>(lb &gt; <span class="number">0</span>) l.nu -= lb * l.de, r.nu -= lb * r.de;</span><br><span class="line">    <span class="keyword">if</span>(r.nu &gt; r.de) <span class="keyword">return</span> frac(<span class="number">1</span> + lb, <span class="number">1</span>);</span><br><span class="line">    frac res = SearchBetween(frac(r.de, r.nu), frac(l.de, l.nu));</span><br><span class="line">    res.flip();</span><br><span class="line">    <span class="keyword">return</span> frac(lb, <span class="number">1</span>) + res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">    frac x, y;</span><br><span class="line">    Point() &#123; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simplify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        x.simplify();</span><br><span class="line">        y.simplify();</span><br><span class="line">    &#125;</span><br><span class="line">    Point(frac a, frac b): x(a), y(b) &#123; &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> x &lt; rhs.x || (x == rhs.x &amp;&amp; y &lt; rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> + (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x + rhs.x, y + rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x - rhs.x, y - rhs.y);</span><br><span class="line">    &#125;</span><br><span class="line">    Point <span class="keyword">operator</span> * (<span class="keyword">const</span> frac&amp; fr) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> Point(x * fr, y * fr);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; p[<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">LatticeCount</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="comment">// [A, B)</span></span><br><span class="line">    ll dx = ABS(A.x.nu - B.x.nu);</span><br><span class="line">    ll dy = ABS(A.y.nu - B.y.nu);</span><br><span class="line">    <span class="keyword">return</span> __gcd(dx, dy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">area2</span><span class="params">(Point P, Point Q, Point R)</span></span>&#123;</span><br><span class="line">ll res = (Q.x.nu - P.x.nu) * (R.y.nu - P.y.nu) - (Q.y.nu - P.y.nu) * (R.x.nu - P.x.nu);</span><br><span class="line">    <span class="keyword">return</span> ABS(res);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> area2(p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>]) + <span class="number">2</span> </span><br><span class="line">      - LatticeCount(p[<span class="number">0</span>], p[<span class="number">1</span>]) - LatticeCount(p[<span class="number">1</span>], p[<span class="number">2</span>]) - LatticeCount(p[<span class="number">2</span>], p[<span class="number">0</span>]) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> Solved = <span class="literal">false</span>;</span><br><span class="line"><span class="function">Point <span class="title">Count</span><span class="params">(Point A, Point B, Point P)</span> </span>&#123; </span><br><span class="line">    <span class="comment">// A and B on the same vertical line, A.y &lt; B.y</span></span><br><span class="line">    assert(A.x == B.x &amp;&amp; A.y &lt; B.y);</span><br><span class="line">    <span class="keyword">if</span>(!(P.x == frac() &amp;&amp; P.y == frac())) &#123;</span><br><span class="line">        <span class="keyword">return</span> Count(A - P, B - P, Point()) + P;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A.x &lt; frac(<span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">        Point res = Count(Point(-A.x, A.y), Point(-B.x, B.y), P);</span><br><span class="line">        res.x = -res.x;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(A.x &lt;= frac(<span class="number">1</span>, <span class="number">1</span>)) <span class="keyword">return</span> Point();</span><br><span class="line">    <span class="keyword">if</span>(A.y.nu &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(B.y.nu &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            Point res = Count(Point(B.x, -B.y), Point(A.x, -A.y), P);</span><br><span class="line">            res.y = -res.y;</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            Solved = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">return</span> Point(frac(<span class="number">1</span>, <span class="number">1</span>), frac(<span class="number">0</span>, <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    frac answer = SearchBetween(A.y / A.x, B.y / B.x);</span><br><span class="line">    <span class="keyword">if</span>(answer.de * A.x.de &gt;= A.x.nu) <span class="keyword">return</span> Point();</span><br><span class="line">    Solved = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">return</span> Point(answer.de, answer.nu);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Point result;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    result.simplify();</span><br><span class="line">    assert(Solved);</span><br><span class="line">    assert(result.x.de == <span class="number">1</span> &amp;&amp; result.y.de == <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld %lld\n"</span>, result.x.nu, result.y.nu);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Solved = <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;p[i].x.nu, &amp;p[i].y.nu);</span><br><span class="line">    sort(p, p + <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>(!check()) &#123; <span class="built_in">puts</span>(<span class="string">"-1 -1"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">    <span class="keyword">if</span>(p[<span class="number">0</span>].x == p[<span class="number">1</span>].x) &#123;</span><br><span class="line">        result = Count(p[<span class="number">0</span>], p[<span class="number">1</span>], p[<span class="number">2</span>]);</span><br><span class="line">        Output();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(p[<span class="number">1</span>].x == p[<span class="number">2</span>].x) &#123;</span><br><span class="line">        result = Count(p[<span class="number">1</span>], p[<span class="number">2</span>], p[<span class="number">0</span>]);</span><br><span class="line">        Output();</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        Point proj = p[<span class="number">0</span>] + (p[<span class="number">2</span>] - p[<span class="number">0</span>]) * ((p[<span class="number">1</span>].x - p[<span class="number">0</span>].x) / (p[<span class="number">2</span>].x - p[<span class="number">0</span>].x));</span><br><span class="line">        Point low = min(proj, p[<span class="number">1</span>]), high = max(proj, p[<span class="number">1</span>]);</span><br><span class="line">        ll val = low.y.<span class="built_in">floor</span>() + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(frac(val) &lt; high.y) &#123;</span><br><span class="line">            result = Point(p[<span class="number">1</span>].x, frac(val));</span><br><span class="line">            Solved = <span class="literal">true</span>;</span><br><span class="line">            Output();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result = Count(low, high, p[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span>(Solved) &#123;</span><br><span class="line">            Output();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result = Count(low, high, p[<span class="number">2</span>]);</span><br><span class="line">            Output();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FREOPEN</span></span><br><span class="line">        freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="comment">// freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p>欧几里得算法的应用</p><div class="row">    <embed src="欧几里得算法的应用.pdf" width="100%" height="550" type="application/pdf"></div><p>一类分数问题的研究</p><div class="row">    <embed src="一类分数问题的研究.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Petrozavodsk-Winter-2018-AtCoder-Contest&quot;&gt;&lt;a href=&quot;#Petrozavodsk-Winter-2018-AtCoder-Contest&quot; class=&quot;headerlink&quot; title=&quot;Petrozavodsk Winter-2018. AtCoder Contest&quot;&gt;&lt;/a&gt;Petrozavodsk Winter-2018. AtCoder Contest&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;K&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;04:24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;02:12&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;Y&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;*5&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Total AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;103&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;13&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;36&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;89&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;31&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;96&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=001513&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://atcoder.jp/contests/apc001&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;AtCoder上对应的比赛APC001的链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://blog.csdn.net/whzzt/article/details/79321484&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;whzzt的APC001题解链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意这个比赛Opentrains上是Atcoder Petrozavodsk Contest 的Div. 1版本，但是C题、D题、I题APC001上是没有的。&lt;/p&gt;
&lt;p&gt;第二次开火车。这次的题目感觉挺不错，思维题居多，代码量不太大。要是推荐题目的话，这里的每道题目都是挺有idea的！但是还是太菜了啊，不知道这么开火车是不是有点浪费这么好的题目。。。这一次算是经历千辛万苦总算签完到了，可是用的时间实在是太多了。以后继续加油吧！&lt;/p&gt;
&lt;p&gt;感觉这一场还是收获满满啊：（虽然现场打得不算出色）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved 3 out of 11&lt;/li&gt;
&lt;li&gt;Upsolved 6 out of 11&lt;/li&gt;
&lt;li&gt;学到了有理数二分与Stern-Brocot树&lt;/li&gt;
&lt;li&gt;看了2009国家集训队论文金斌《欧几里得算法的应用》以及《一类分数问题的应用》&lt;/li&gt;
&lt;li&gt;学到了一系列类欧几里得算法&lt;/li&gt;
&lt;li&gt;熟悉了Pick定理&lt;/li&gt;
&lt;li&gt;Rank 81 out of 113。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这次比赛踩过的坑点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A题假算法&lt;/li&gt;
&lt;li&gt;K题没开&lt;code&gt;long long&lt;/code&gt;，少判断连通图的情况&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="Opentrains" scheme="http://yoursite.com/tags/Opentrains/"/>
    
      <category term="交互题" scheme="http://yoursite.com/tags/%E4%BA%A4%E4%BA%92%E9%A2%98/"/>
    
      <category term="思维题" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
      <category term="树dp" scheme="http://yoursite.com/tags/%E6%A0%91dp/"/>
    
      <category term="Stern-Brocot树" scheme="http://yoursite.com/tags/Stern-Brocot%E6%A0%91/"/>
    
      <category term="Pick定理" scheme="http://yoursite.com/tags/Pick%E5%AE%9A%E7%90%86/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="异或问题" scheme="http://yoursite.com/tags/%E5%BC%82%E6%88%96%E9%97%AE%E9%A2%98/"/>
    
      <category term="类欧几里得" scheme="http://yoursite.com/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
      <category term="有理数二分" scheme="http://yoursite.com/tags/%E6%9C%89%E7%90%86%E6%95%B0%E4%BA%8C%E5%88%86/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 10434 比赛报告</title>
    <link href="http://yoursite.com/2019/02/20/Opentrains-10434-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/02/20/Opentrains-10434-比赛报告/</id>
    <published>2019-02-20T11:23:05.000Z</published>
    <updated>2019-03-01T15:57:14.898Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">1</th><th style="text-align:center">2</th><th style="text-align:center">3</th><th style="text-align:center">4</th><th style="text-align:center">5</th><th style="text-align:center">6</th><th style="text-align:center">7</th><th style="text-align:center">8</th><th style="text-align:center">9</th><th style="text-align:center">10</th><th style="text-align:center">11</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:27</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">01:24</td><td style="text-align:center">00:16</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">02:39</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="red">FAIL</font></td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"></td><td style="text-align:center">AC</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">AC</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center">+</td><td style="text-align:center">+2</td><td style="text-align:center">+</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">+</td></tr><tr><td style="text-align:left">Total AC</td><td style="text-align:center">340</td><td style="text-align:center">19</td><td style="text-align:center">147</td><td style="text-align:center">182</td><td style="text-align:center">332</td><td style="text-align:center">25</td><td style="text-align:center">42</td><td style="text-align:center">239</td><td style="text-align:center">100</td><td style="text-align:center">96</td><td style="text-align:center">98</td></tr></tbody></table><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010434" target="_blank" rel="noopener">比赛链接</a></p><p>第一次开火车，后半场一直卡在第11题上，感觉体验不怎么好。。。</p><p>最后Solved 4 out of 11，Rank 174 out of 357。</p><a id="more"></a><h1 id="Prob-1-（模拟）"><a href="#Prob-1-（模拟）" class="headerlink" title="Prob. 1 （模拟）"></a>Prob. 1 （模拟）</h1><p>模拟题意即可。<br><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> a[maxn][maxn], n, m, len;</span><br><span class="line">ll ans[maxn][maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">simulate</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ll res = a[x][y];</span><br><span class="line">    <span class="keyword">int</span> cx = x, cy = y;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'R'</span>) cy++;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'L'</span>) cy--;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'U'</span>) cx--;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'D'</span>) cx++;</span><br><span class="line">        <span class="keyword">if</span>(cx &lt;= <span class="number">0</span> || cx &gt; n) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(cy &lt;= <span class="number">0</span> || cy &gt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        res += a[cx][cy];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;m, s + <span class="number">1</span>);</span><br><span class="line">    len = <span class="built_in">strlen</span>(s + <span class="number">1</span>);</span><br><span class="line">    rep(i, n) rep(j, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">    rep(i, n) rep(j, m) ans[i][j] = simulate(i, j);</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        rep(j, m) <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, ans[i][j], <span class="string">" \n"</span>[j == m]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();  </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h1 id="Prob-3-裸的网络流，注意常数"><a href="#Prob-3-裸的网络流，注意常数" class="headerlink" title="Prob. 3 裸的网络流，注意常数"></a>Prob. 3 裸的网络流，注意常数</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> int64;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">202</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> V = <span class="number">1001</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; nameMap;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; verMap[N];</span><br><span class="line"><span class="keyword">int</span> verMap1[N][V];</span><br><span class="line"><span class="keyword">int</span> vs[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> isInConf[N * V];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> S = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> T = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, k;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">edge</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> from, to, cap, flow;</span><br><span class="line">edge() &#123;&#125;</span><br><span class="line">edge(<span class="keyword">int</span> f, <span class="keyword">int</span> t, <span class="keyword">int</span> c, <span class="keyword">int</span> fl) : from(f), to(t), cap(c), flow(fl) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;edge&gt; edges;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[N * V];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">e[from].push_back( edges.size() );</span><br><span class="line">e[to].push_back( edges.size() + <span class="number">1</span> );</span><br><span class="line">edges.emplace_back( from, to, <span class="number">1</span>, <span class="number">0</span> );</span><br><span class="line">edges.emplace_back( to, from, <span class="number">0</span>, <span class="number">0</span> );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">app</span>   <span class="params">(<span class="keyword">int</span> a)</span>        </span>&#123; <span class="keyword">return</span> <span class="number">2</span> + a; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">appVer</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> v)</span> </span>&#123; <span class="keyword">return</span> <span class="number">2</span> + n + vs[a] + v; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conf</span>  <span class="params">(<span class="keyword">int</span> c)</span>        </span>&#123; <span class="keyword">return</span> <span class="number">2</span> + n + vs[n] + c; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> it[N * V];</span><br><span class="line"><span class="keyword">int</span> cur;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (it[v] == cur)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">it[v] = cur;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (v == T)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : e[v]) &#123;</span><br><span class="line">edge &amp;ee = edges[i];</span><br><span class="line">edge &amp;er = edges[i ^ <span class="number">1</span>];</span><br><span class="line"><span class="keyword">if</span> (ee.cap - ee.flow &gt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (dfs(ee.to)) &#123;</span><br><span class="line">++ee.flow;</span><br><span class="line">--er.flow;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">dfsx</span><span class="params">()</span> </span>&#123;</span><br><span class="line">++cur;</span><br><span class="line"><span class="keyword">return</span> dfs(S);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n; ++a) &#123;</span><br><span class="line">addEdge(S, app(a));</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> vn;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%10s%d"</span>, name, &amp;vn);</span><br><span class="line">nameMap[name] = a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; vn; ++v) &#123;</span><br><span class="line"><span class="keyword">int</span> ver;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;ver);</span><br><span class="line">verMap[a][ver] = v;</span><br><span class="line">verMap1[a][v] = ver;</span><br><span class="line"></span><br><span class="line">addEdge(app(a), appVer(a, v));</span><br><span class="line">&#125;</span><br><span class="line">vs[a + <span class="number">1</span>] = vs[a] + vn;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;k);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; k; ++c) &#123;</span><br><span class="line">addEdge( conf(c), T );</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> m;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;m);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> ver;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%10s%d"</span>, name, &amp;ver);</span><br><span class="line"><span class="keyword">int</span> a = nameMap[name];</span><br><span class="line"><span class="keyword">int</span> v = verMap[a][ver];</span><br><span class="line">isInConf[ appVer(a, v) ] = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">addEdge( appVer(a, v), conf(c) );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n; ++a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> v = <span class="number">0</span>; v &lt; verMap[a].size(); ++v) &#123;</span><br><span class="line"><span class="keyword">if</span> (!isInConf[ appVer(a, v) ])</span><br><span class="line">addEdge( appVer(a, v), T );</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line"><span class="keyword">if</span> (!dfsx()) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"No\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Yes\n"</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> a = <span class="number">0</span>; a &lt; n; ++a) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i : e[app(a)]) &#123;</span><br><span class="line">edge &amp;ee = edges[i];</span><br><span class="line"><span class="keyword">if</span> (ee.flow == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, verMap1[a][ee.to - <span class="number">2</span> - n - vs[a]]);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-4-并查集启发式合并"><a href="#Prob-4-并查集启发式合并" class="headerlink" title="Prob. 4 并查集启发式合并"></a>Prob. 4 并查集启发式合并</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, ecnt, _x, _y;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">802000</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; my;</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; no;</span><br><span class="line">    <span class="keyword">int</span> fa, id;</span><br><span class="line">&#125; dsu[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dsu[x].my.size() &gt; dsu[y].my.size()) swap(x, y);</span><br><span class="line">    node &amp;c1 = dsu[x], &amp;c2 = dsu[y];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : c1.my) </span><br><span class="line">        <span class="keyword">if</span>(c2.no.count(g)) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : c1.my) c2.my.push_back(g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : c1.no) c2.no.insert(g);</span><br><span class="line">    c1.my.clear();</span><br><span class="line">    c1.no.clear();</span><br><span class="line">    c1.fa = c2.fa;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dsu[x].fa == dsu[x].id) <span class="keyword">return</span> dsu[x].fa;</span><br><span class="line">    <span class="keyword">int</span> fa = dsu[x].fa;</span><br><span class="line">    <span class="keyword">int</span> rt = find(dsu[x].fa);</span><br><span class="line">    dsu[x].fa = rt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : dsu[x].my) dsu[rt].my.push_back(g);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : dsu[x].no) dsu[rt].no.insert(g);</span><br><span class="line">    dsu[x].my.clear();</span><br><span class="line">    dsu[x].no.clear();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, m, ecnt);</span><br><span class="line">    rep(i, n) dsu[i].id = i, dsu[i].my.push_back(i), dsu[i].fa = i;</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;_x, &amp;_y);</span><br><span class="line">        dsu[_x].no.insert(_y);</span><br><span class="line">        dsu[_y].no.insert(_x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, ecnt) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;_x, &amp;_y);</span><br><span class="line">        _x = find(_x), _y = find(_y);</span><br><span class="line">        <span class="keyword">if</span>(_x == _y) &#123; ans.push_back(i); <span class="keyword">continue</span>; &#125;</span><br><span class="line">        <span class="keyword">if</span>(merge(_x, _y)) ans.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == sz - <span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-5-签到"><a href="#Prob-5-签到" class="headerlink" title="Prob. 5 签到"></a>Prob. 5 签到</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll cnt;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; cnt;</span><br><span class="line">    <span class="keyword">while</span> (cnt--)</span><br><span class="line">    &#123;</span><br><span class="line">        ll y;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; y;</span><br><span class="line">        ll a1, b1, c1, a2, b2, c2;</span><br><span class="line">        a1 = <span class="number">1</span>;</span><br><span class="line">        b1 = -(y + <span class="number">1</span>);</span><br><span class="line">        c1 = (y);</span><br><span class="line">        a2 = <span class="number">1</span>;</span><br><span class="line">        b2 = -(y - <span class="number">1</span>);</span><br><span class="line">        c2 = (-y);</span><br><span class="line">        <span class="keyword">if</span> ((b1 != <span class="number">0</span>) &amp;&amp; (<span class="built_in">abs</span>(b1) &lt;= <span class="number">1000000</span>) &amp;&amp; (<span class="built_in">abs</span>(c1) &lt;= <span class="number">1000000</span>)) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a1 &lt;&lt; <span class="string">" "</span> &lt;&lt; b1 &lt;&lt; <span class="string">" "</span> &lt;&lt; c1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> ((b2 != <span class="number">0</span>) &amp;&amp; (<span class="built_in">abs</span>(b2) &lt;= <span class="number">1000000</span>) &amp;&amp; (<span class="built_in">abs</span>(c2) &lt;= <span class="number">1000000</span>)) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; a2 &lt;&lt; <span class="string">" "</span> &lt;&lt; b2 &lt;&lt; <span class="string">" "</span> &lt;&lt; c2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-8-繁琐，模拟"><a href="#Prob-8-繁琐，模拟" class="headerlink" title="Prob. 8 繁琐，模拟"></a>Prob. 8 繁琐，模拟</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> ld;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100200</span>;</span><br><span class="line"><span class="keyword">const</span> ld eps = <span class="number">1e-12</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, s, _x, _y, a[maxn], has[maxn], cost[maxn];</span><br><span class="line">ld cur, ff, ct;</span><br><span class="line"><span class="built_in">vector</span>&lt; pair&lt;ld,<span class="keyword">int</span>&gt; &gt; tim;</span><br><span class="line"><span class="function">ld <span class="title">calc</span><span class="params">(pair&lt;ld, <span class="keyword">int</span>&gt; t)</span> </span>&#123;</span><br><span class="line">    ff -= (t.first - ct) * cur;</span><br><span class="line">    cur += ld(a[t.second]) * ld(cost[t.second]);</span><br><span class="line">    ct = t.first;</span><br><span class="line">    <span class="keyword">return</span> ff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tim.clear();</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">20</span>));</span><br><span class="line"></span><br><span class="line">    read(n, m, s);</span><br><span class="line">    cur = <span class="number">0.0</span>, ff = s, ct = <span class="number">0.0</span>;</span><br><span class="line">    rep(i, m) read(_x), a[_x]++;</span><br><span class="line">    rep(i, n) read(has[i], cost[i]);</span><br><span class="line">    tim.push_back(&#123;<span class="number">0</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(a[i]) tim.emplace_back(ld(has[i]) / ld(a[i]), i);</span><br><span class="line">    sort(tim.begin(), tim.end());</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">-1</span>;</span><br><span class="line">    ld rem = s, ans = <span class="number">0.0</span>, rr = <span class="number">0.0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(tim.size()); ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>((rr = calc(tim[i])) &lt; -eps) &#123; </span><br><span class="line">            p = i - <span class="number">1</span>; </span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rem = rr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(p &lt; <span class="number">0</span>) p = <span class="keyword">int</span>(tim.size()) - <span class="number">1</span>;</span><br><span class="line">    ld cst = <span class="number">0.0</span>, tt = tim[p].first;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(tt * ld(a[i]) + eps &gt; ld(has[i])) cst += a[i] * cost[i];</span><br><span class="line">    ans = tt + rem / cst;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.12f\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);    </span><br><span class="line">    <span class="keyword">while</span>(T--) solve();    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Prob-11-几何"><a href="#Prob-11-几何" class="headerlink" title="Prob. 11 几何"></a>Prob. 11 几何</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">double</span> PI = <span class="number">3.1415926535897932384</span>;</span><br><span class="line"><span class="keyword">double</span> alpha, phi;</span><br><span class="line"><span class="keyword">int</span> tim[<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">to_deg</span><span class="params">(<span class="keyword">double</span> rad)</span> </span>&#123; <span class="keyword">return</span> rad / PI * <span class="number">180.0</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">to_rad</span><span class="params">(<span class="keyword">double</span> deg)</span> </span>&#123; <span class="keyword">return</span> deg / <span class="number">180.0</span> * PI; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">transform</span><span class="params">(<span class="keyword">int</span>&amp; high, <span class="keyword">int</span>&amp; low)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> cnt = low / <span class="number">60</span>;</span><br><span class="line">    high += cnt;</span><br><span class="line">    low -= cnt * <span class="number">60</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf %lf\n"</span>, &amp;alpha, &amp;phi);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d:%d:%d\n"</span>, &amp;tim[<span class="number">0</span>], &amp;tim[<span class="number">1</span>], &amp;tim[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ad = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(alpha &lt; phi) ad = <span class="number">6</span> * <span class="number">3600</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">double</span> ans = to_deg(<span class="built_in">asin</span>(<span class="built_in">tan</span>(to_rad(phi)) / <span class="built_in">tan</span>(to_rad(alpha)))) * <span class="number">240.0</span>;</span><br><span class="line">        ad = <span class="keyword">int</span>(ans + <span class="number">0.5</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    tim[<span class="number">2</span>] += ad;</span><br><span class="line">    transform(tim[<span class="number">1</span>], tim[<span class="number">2</span>]);</span><br><span class="line">    transform(tim[<span class="number">0</span>], tim[<span class="number">1</span>]);</span><br><span class="line">    tim[<span class="number">0</span>] %= <span class="number">24</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%02d:%02d:%02d\n"</span>, tim[<span class="number">0</span>], tim[<span class="number">1</span>], tim[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d\n"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;1&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;2&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;3&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;4&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;5&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;6&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;7&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;8&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;9&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;10&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;11&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:27&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:24&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;02:39&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;FAIL&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Total AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;340&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;19&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;147&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;182&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;332&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;25&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;42&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;239&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;100&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;96&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;98&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=010434&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;第一次开火车，后半场一直卡在第11题上，感觉体验不怎么好。。。&lt;/p&gt;
&lt;p&gt;最后Solved 4 out of 11，Rank 174 out of 357。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="Opentrains" scheme="http://yoursite.com/tags/Opentrains/"/>
    
      <category term="并查集" scheme="http://yoursite.com/tags/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="球坐标系" scheme="http://yoursite.com/tags/%E7%90%83%E5%9D%90%E6%A0%87%E7%B3%BB/"/>
    
  </entry>
  
  <entry>
    <title>Educational Codeforces Round 60 (Div 2) 比赛报告</title>
    <link href="http://yoursite.com/2019/02/19/Educational-Codeforces-Round-60-Div-2-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/02/19/Educational-Codeforces-Round-60-Div-2-比赛报告/</id>
    <published>2019-02-19T15:27:12.000Z</published>
    <updated>2019-03-01T16:04:25.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h1><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:03</td><td style="text-align:center">00:08</td><td style="text-align:center">00:45</td><td style="text-align:center">01:12</td><td style="text-align:center"><font color="red"><strong>WA(-4)</strong></font></td><td style="text-align:center">——</td><td style="text-align:center">——</td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center"><strong><font color="green">OK</font></strong></td><td style="text-align:center">AC</td><td style="text-align:center">AC</td><td style="text-align:center">AC</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center">+</td><td style="text-align:center">+</td><td style="text-align:center">+1</td><td style="text-align:center">+</td><td style="text-align:center">+4</td><td style="text-align:center">+</td><td style="text-align:center">+</td></tr><tr><td style="text-align:left">Difficulty</td><td style="text-align:center">1100</td><td style="text-align:center">1000</td><td style="text-align:center">1800</td><td style="text-align:center">2000</td><td style="text-align:center">2200</td><td style="text-align:center">2600</td><td style="text-align:center">2500</td></tr></tbody></table><p><a href="https://codeforces.com/contest/1117" target="_blank" rel="noopener">比赛链接</a></p><p>打教育场被教育系列。。。Rank 144 out of 5373，Rating Change：<font color="DarkSlateBlue"><strong>1970</strong></font> -&gt; <font color="DarkSlateBlue"><strong>2025</strong></font>。这一场从C开始都不是那么签到了，开始把CDE都看了，自闭了一会想出了C题二分的简单做法，打表得出D题的结论之后马上证明了，写个矩阵快速幂AC了。但是到了E题之后，被题意坑了，那个the interactor is not adaptive我理解为不会卡随机化，结果想了个假的随机算法，没有分析成功率都交上去。。。赛后发现只要理解为26进制数就可以得到确定性算法，感觉亏的不行。</p><p>G题赛后补了，感觉收获还蛮多的。听cyy讲了一个区间笛卡尔树的想题新思路，又听cyy讲了一个主席树做法，以及离线排序后多次修改的树状数组的做法，后来又想到一个单调栈的做法，感觉这道题还是蛮有启发性的。</p><p>赛时dirt提交的分析：C题WA，原因是 long long· 的INF开小了。E题WA，RE，原因是算法假了。</p> <a id="more"></a><h1 id="Problem-AB-签到"><a href="#Problem-AB-签到" class="headerlink" title="Problem AB 签到"></a>Problem AB 签到</h1><p>A题代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100200</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], mx = <span class="number">-1</span>, n, ans = <span class="number">-1</span>, p[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), mx = max(mx, a[i]);</span><br><span class="line">    rep(i, n) a[i] = a[i]==mx;</span><br><span class="line">    a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(a[i]) &#123;</span><br><span class="line">        p[i] = p[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        ans = max(ans, p[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>B题代码：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">300300</span>;</span><br><span class="line">ll n, m, k, a[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;n, &amp;m, &amp;k);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">    sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, greater&lt;ll&gt;());</span><br><span class="line">    ll period = m / (k + <span class="number">1</span>), left = m - period * (k + <span class="number">1</span>);</span><br><span class="line">    ll ans = a[<span class="number">1</span>] * (period * k + left) + a[<span class="number">2</span>] * period;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-C-稍需思考的二分"><a href="#Problem-C-稍需思考的二分" class="headerlink" title="Problem C. 稍需思考的二分"></a>Problem C. 稍需思考的二分</h1><p>如果 $t$ 时间已经存在方案，那么 $t$ 之后的所有时间都能存在方案，因此可以直接二分天数。注意二分上界别开小。</p><p>复杂度$O(n+ \log(10^{18}))$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS(x) ( (x)&gt;0 ? (x) : (-(x)) )</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a, b) (((a) &gt; (b)) ? (a) : (b))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min(a, b) (((a) &lt; (b)) ? (a) : (b))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100200</span>;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line">ll n, xf, yf, xt, yt, xpre[maxn], ypre[maxn];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(ll t)</span> </span>&#123;</span><br><span class="line">    ll pr = t / n, lf = t - pr * n;</span><br><span class="line">    ll cx = xf + xpre[n] * pr + xpre[lf], cy = yf + ypre[n] * pr + ypre[lf];</span><br><span class="line">    ll dist = ABS(cx) + ABS(cy);</span><br><span class="line">    <span class="keyword">return</span> dist &lt;= t;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld%lld%s"</span>, &amp;xf, &amp;yf, &amp;xt, &amp;yt, &amp;n, s + <span class="number">1</span>);</span><br><span class="line">    xf -= xt, yf -= yt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        xpre[i] = xpre[i - <span class="number">1</span>], ypre[i] = ypre[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'U'</span>) ypre[i]++;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'D'</span>) ypre[i]--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'L'</span>) xpre[i]--;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'R'</span>) xpre[i]++;</span><br><span class="line">    &#125;</span><br><span class="line">    ll l = <span class="number">0</span>, r = INF;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(check(mid)) r = mid;</span><br><span class="line">        <span class="keyword">else</span> l = mid + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(l == INF) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; l;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-D-数学，打表，矩阵"><a href="#Problem-D-数学，打表，矩阵" class="headerlink" title="Problem D. 数学，打表，矩阵"></a>Problem D. 数学，打表，矩阵</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有一个长度为 $n$ 的$01$序列，已知 $0$ 如果出现，那么一定会连续出现 $ m$ 的倍数个；$1$的出现没有限制。问一共有多少种不同的$01$序列？ $( n \leq 10^{18}, m \leq 100  )$</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p><strong>思路1</strong>：$O(n/m)$打表。记连续 $m$ 个$ 0$ 为一个团 ，我们可以考虑枚举出现了多少个团。显然答案是：</p><p>$$1 + \sum\limits_{c=0}^{\left[\frac{n}{m}\right]} C_{n-c\cdot m+c}^{c}​$$</p><p>固定 $m $ 打表，可以看到在 $n$ 处的答案满足：$dp[n] = dp[n-1] + dp[n-m]$，这个转移是线性齐次递推，矩阵转移即可，复杂度$O(m^3 \log n)​$</p><p><strong>思路2</strong>：上述想法的数学证明。其实也很简单，只需考虑长度为 $n$ 的数列最后一位是团还是1。如果是团，那么答案是$dp[n-m]$；如果是1，答案是$dp[n-1]$。根据加法原理，应当把这两者加起来，因此得到了上面的式子。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>( 1544 ms, 400 KB )</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// luogu-judger-enable-o2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000000</span> + <span class="number">7</span>;</span><br><span class="line">ll n, m;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">while</span>(x &gt;= MOD) x -= MOD; <span class="keyword">while</span>(x &lt; <span class="number">0</span>) x += MOD; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Mat</span> &#123;</span></span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; m;</span><br><span class="line">    <span class="keyword">int</span> sz;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> N)</span> </span>&#123;</span><br><span class="line">        sz = N;</span><br><span class="line">        m.resize(N + <span class="number">3</span>);</span><br><span class="line">        rep(i, N) m[i].resize(N + <span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">identity</span><span class="params">()</span> </span>&#123; rep(i, sz) m[i][i] = <span class="number">1</span>; &#125;</span><br><span class="line">    Mat(<span class="keyword">int</span> N = <span class="number">0</span>) &#123; init(N); &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> m[idx]; &#125;</span><br><span class="line">    Mat <span class="keyword">operator</span> * (<span class="keyword">const</span> Mat&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="function">Mat <span class="title">res</span><span class="params">(sz)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= sz; ++j) </span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= sz; ++k) </span><br><span class="line">                    res[i][j] = mo(res[i][j] + (<span class="number">1L</span>L * m[i][k] * rhs.m[k][j] % MOD));</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">Mat <span class="title">qpow</span><span class="params">(Mat x, ll y)</span> </span>&#123;</span><br><span class="line">    <span class="function">Mat <span class="title">res</span><span class="params">(x.sz)</span></span>; res.identity();</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = x * x)</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) res = res * x;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="function">Mat <span class="title">mt</span><span class="params">(m)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">2</span>; r &lt;= m; ++r) mt[r][r<span class="number">-1</span>] = <span class="number">1</span>;</span><br><span class="line">    mt[<span class="number">1</span>][<span class="number">1</span>] = mt[<span class="number">1</span>][m] = <span class="number">1</span>;</span><br><span class="line">    Mat res = qpow(mt, n);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-E-交互题，26进制，中国剩余定理"><a href="#Problem-E-交互题，26进制，中国剩余定理" class="headerlink" title="Problem E. 交互题，26进制，中国剩余定理"></a>Problem E. 交互题，26进制，中国剩余定理</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>一个长度为$n$的字符串被打乱了，打乱后的字符串你是知道的，但是系统隐藏了打乱方式。你可以进行三次询问，每次询问一个字符串，系统将会返回这个字符串用相同方式打乱后的字符串，要求你询问后把打乱前的原字符串找出来。( $n\leq 10000$ )</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p><strong>思路1</strong> 利用26进制。第一次按照26进制个位字母分配字符（即下标个位为 $x$，则字符为 <code>&#39;a&#39; +x</code>），第二次按十位分配，第三次按百位分配。这样甚至可以完成$n\leq 26^3 = 17576$的情况。</p><p><strong>思路2</strong> 一种挺神奇的中国剩余定理的做法。按照$\pmod {23}$, $\pmod {25}$, $\pmod {27}$ 的结果分配字符，然后按照中国剩余定理得到答案（因为 $23,25,27$ 两两互质）。这样可以完成到 $n\leq 23\cdot 25\cdot 27=15525$ 的情况，但是不像第一种那么有普适性。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><p>这里实现的是思路1，代码从开始的假随机做法改编，稍微有点乱。每次gen产生，deal进行合并 (1169 ms, 131200 KB)</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; &gt; possible(<span class="number">120020</span>), ps2(<span class="number">120020</span>);</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="built_in">string</span>&gt; asked;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">query</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; q)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> rpl;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"? "</span> &lt;&lt; q &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="built_in">cout</span>.flush();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; rpl;</span><br><span class="line">    <span class="keyword">if</span>(rpl == <span class="string">"0"</span>) <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> rpl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> p = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">int</span> id = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="built_in">string</span> <span class="title">gen</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            p[i] = <span class="string">'a'</span> + (i % <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(id == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            p[i] = <span class="string">'a'</span> + ((i / <span class="number">26</span>) % <span class="number">26</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(id == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">            p[i] = <span class="string">'a'</span> + ((i / <span class="number">26</span> / <span class="number">26</span>) % <span class="number">26</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    id++;</span><br><span class="line">    <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; frog[<span class="number">28</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">deal</span><span class="params">(<span class="keyword">bool</span> first)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> from = gen(), to = query(from);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">27</span>; ++i) frog[i].clear();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        frog[from[i] - <span class="string">'a'</span>].push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(first) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> g : frog[to[i] - <span class="string">'a'</span>])</span><br><span class="line">                possible[g].insert(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10020</span>; ++i) ps2[i].clear();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> g : frog[to[i] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">                <span class="keyword">if</span>(possible[g].count(i)) ps2[g].insert(i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10020</span>; ++i) possible[i] = ps2[i];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    n = t.length();</span><br><span class="line">    <span class="keyword">int</span> pr = n / <span class="number">26</span>, lf = n - pr * <span class="number">26</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">char</span> c = <span class="string">'a'</span>; c &lt;= <span class="string">'z'</span>; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pr; ++i) p += c;</span><br><span class="line">        <span class="keyword">if</span>(c - <span class="string">'a'</span> + <span class="number">1</span> &lt;= lf) p += c;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, <span class="number">3</span>) deal(i == <span class="number">1</span>);</span><br><span class="line">    s = t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        s[i] = t[*possible[i].begin()];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">"! "</span> &lt;&lt; s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-F-状压dp"><a href="#Problem-F-状压dp" class="headerlink" title="Problem F. 状压dp"></a>Problem F. 状压dp</h1><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">100200</span>, maxp = <span class="number">18</span>, maxs = <span class="number">1</span> &lt;&lt; maxp;</span><br><span class="line"></span><br><span class="line"><span class="built_in">bitset</span>&lt; (1 &lt;&lt; 18) &gt; legal, dp, cur;</span><br><span class="line"><span class="keyword">int</span> a[maxp][maxp];</span><br><span class="line"><span class="keyword">int</span> cnt[maxp], n, p, pref[maxn][maxp];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; occ[maxp];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%s"</span>, &amp;n, &amp;p, s);</span><br><span class="line">    rep(i, p) rep(j, p) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i][j]);</span><br><span class="line">    <span class="keyword">int</span> FULL = (<span class="number">1</span> &lt;&lt; p) - <span class="number">1</span>;</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        cnt[s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">        occ[s[i] - <span class="string">'a'</span>].push_back(i);</span><br><span class="line">        <span class="built_in">memcpy</span>(pref[i], pref[i - <span class="number">1</span>], <span class="keyword">sizeof</span>(pref[i]));</span><br><span class="line">        pref[i][s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    legal.<span class="built_in">set</span>();</span><br><span class="line">    rep(u, p) rep(v, p) <span class="keyword">if</span>(a[u][v] == <span class="number">0</span>) &#123;</span><br><span class="line">        cur.<span class="built_in">set</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>, j = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(occ[u].size()) &amp;&amp; j &lt; <span class="keyword">int</span>(occ[v].size()); ) &#123;</span><br><span class="line">            <span class="keyword">int</span> mask = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(occ[u][i] == occ[v][j]) &#123; ++j; <span class="keyword">continue</span>; &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(occ[u][i] &gt; occ[v][j]) &#123;</span><br><span class="line">                rep(c, p) <span class="keyword">if</span>(pref[occ[u][i]<span class="number">-1</span>][c] - pref[occ[v][j]][c] &gt; <span class="number">0</span>)</span><br><span class="line">                    mask |= <span class="number">1</span> &lt;&lt; c;</span><br><span class="line">                j++;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(occ[u][i] &lt; occ[v][j]) &#123;</span><br><span class="line">                rep(c, p) <span class="keyword">if</span>(pref[occ[v][j]<span class="number">-1</span>][c] - pref[occ[u][i]][c] &gt; <span class="number">0</span>)</span><br><span class="line">                    mask |= <span class="number">1</span> &lt;&lt; c;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(mask &gt;&gt; u &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">if</span>(mask &gt;&gt; v &amp; <span class="number">1</span>) <span class="keyword">continue</span>;</span><br><span class="line">            cur[mask ^ FULL] = <span class="literal">false</span>;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">bitset</span>&lt;17&gt;(mask) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> st = FULL; st; --st) <span class="keyword">if</span>(!cur[st]) &#123;</span><br><span class="line">            rep(c, p) <span class="keyword">if</span>(c != u &amp;&amp; c != v &amp;&amp; (st &gt;&gt; c &amp; <span class="number">1</span>))</span><br><span class="line">                cur[st ^ (<span class="number">1</span> &lt;&lt; c)] = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        legal &amp;= cur;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(st, FULL + <span class="number">1</span>) <span class="keyword">if</span>(legal[st]) <span class="built_in">printf</span>(<span class="string">"%x legal\n"</span>, st);</span><br><span class="line">    dp[FULL] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> st = FULL; st; --st) <span class="keyword">if</span>(dp[st]) &#123;</span><br><span class="line">        rep(c, p) <span class="keyword">if</span>(st &gt;&gt; c &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[st ^ (<span class="number">1</span> &lt;&lt; c)]) <span class="keyword">continue</span>;</span><br><span class="line">            dp[st ^ (<span class="number">1</span> &lt;&lt; c)] = legal[st ^ (<span class="number">1</span> &lt;&lt; c)];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> res = n;</span><br><span class="line">    rep(st, FULL + <span class="number">1</span>) <span class="keyword">if</span>(dp[st]) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"dp[%x] = true\n"</span>, st);</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        rep(c, p) <span class="keyword">if</span>(st &gt;&gt; c &amp; <span class="number">1</span>) </span><br><span class="line">            ans += cnt[c];</span><br><span class="line">        res = min(res, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; res;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="Problem-G-笛卡尔树-主席树-树状数组-单调栈"><a href="#Problem-G-笛卡尔树-主席树-树状数组-单调栈" class="headerlink" title="Problem G. 笛卡尔树, 主席树, 树状数组, 单调栈"></a>Problem G. 笛卡尔树, 主席树, 树状数组, 单调栈</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>You are given a permutation $p_1,p_2,\cdots,p_n$. You should answer $q$ queries. Each query is a pair $(l_i,r_i)$, and you should calculate $f(l_i,r_i)​$.</p><p>Let’s denote $m_{l, r}$ as the position of the maximum in subsegment $p_l,p_{l+1},\cdots,p_r$.</p><p>Then </p><p>$$f(l,r)=(r−l+1)+f(l,m_{l,r}−1)+f(m_{l,r}+1,r)    if  l\leq r$$</p><p>数据范围：$$n,q\leq 10^6$$</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>这个题解的详细版明天再补吧QAQ</p><p><strong>观察1</strong> $f(l,r)$即把区间$[l,r]$建成笛卡尔树（大根堆性质）之后，每个节点的深度的和。（根节点深度为1）</p><p><strong>观察2</strong> 上面的性质等价于找到$[l,r]$中的两个位置$c,d$满足$a_c &lt; a_d$且$[c,d]$之中没有比$a_d$更大的数。这样的两个位置会对答案造成$d-c$的贡献。（这个观察来自于笛卡尔树祖先的性质）</p><p><strong>观察3</strong> 对于每个位置$i$，找到其左边、右边第一个大于$a_i$的位置，记为 $l-1,r+1$，则如果选择$i$位置，区间$[l,i], [i,r]$中的任意一个位置都会产生贡献。左边右边也可以分开解决，因此问题就变成了这样的一个区间问题。</p><p><strong>做法1</strong> 在线做法，用主席树维护，时间空间都是$O(n\log n)$，可惜这道题空间开不下。</p><p><strong>做法2</strong> 单调栈+树状数组的离线做法。</p><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><p>做法2，1107 ms, 98500KB</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"-O3"</span>, <span class="meta-string">"-ffast-math"</span>, <span class="meta-string">"-Ofast"</span>, <span class="meta-string">"-funroll-loops"</span>, <span class="meta-string">"inline"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">const</span> N = <span class="number">1e6</span> + <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n , q , a[N] , l[N] , r[N];</span><br><span class="line">ll ans[N];</span><br><span class="line"><span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; L[N] , R[N];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> stk[N] , sz;</span><br><span class="line">ll sum[N];</span><br><span class="line"></span><br><span class="line">ll tree[N];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">add</span> <span class="params">(<span class="keyword">int</span> p , <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (p++; p &lt; N; p += p &amp; -p)</span><br><span class="line">tree[p] += val;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">get</span> <span class="params">(<span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line">ll sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (; p; p -= p &amp; -p) sum += tree[p];</span><br><span class="line"><span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, q);</span><br><span class="line">rep(i, n) read(a[i]);</span><br><span class="line">rep(i, q) read(l[i]);</span><br><span class="line">rep(i, q) &#123;</span><br><span class="line">        read(r[i]);</span><br><span class="line">l[i]-- , r[i]--;</span><br><span class="line">L[l[i]].push_back(i);</span><br><span class="line">R[r[i]].push_back(i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sz = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tree , <span class="number">0</span> , <span class="keyword">sizeof</span> tree);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line"><span class="keyword">while</span> (sz &amp;&amp; a[stk[sz - <span class="number">1</span>]] &lt; a[i]) &#123;</span><br><span class="line">sz--;</span><br><span class="line">add(stk[sz] , i - stk[sz] - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">stk[sz] = i;</span><br><span class="line">sum[sz] = (sz ? sum[sz - <span class="number">1</span>] : <span class="number">0</span>) + i;</span><br><span class="line">sz++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> id : R[i]) &#123;</span><br><span class="line">ans[id] += get(i + <span class="number">1</span>) - get(l[id]);</span><br><span class="line"><span class="keyword">int</span> vv = lower_bound(stk , stk + sz , l[id]) - stk;</span><br><span class="line">ll val = sum[sz - <span class="number">1</span>] - (vv ? sum[vv - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">ans[id] += <span class="number">1l</span>l * (sz - vv) * i - val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sz = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(tree , <span class="number">0</span> , <span class="keyword">sizeof</span> tree);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line"><span class="keyword">while</span> (sz &amp;&amp; a[-stk[sz - <span class="number">1</span>]] &lt; a[i]) &#123;</span><br><span class="line">sz--;</span><br><span class="line">add(-stk[sz] , -stk[sz] - i - <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line">stk[sz] = -i;</span><br><span class="line">sum[sz] = (sz ? sum[sz - <span class="number">1</span>] : <span class="number">0</span>) + i;</span><br><span class="line">sz++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> id : L[i]) &#123;</span><br><span class="line">ans[id] += get(r[id] + <span class="number">1</span>) - get(i);</span><br><span class="line"><span class="keyword">int</span> vv = lower_bound(stk , stk + sz , -r[id]) - stk;</span><br><span class="line">ll val = sum[sz - <span class="number">1</span>] - (vv ? sum[vv - <span class="number">1</span>] : <span class="number">0</span>);</span><br><span class="line">ans[id] += <span class="number">-1l</span>l * (sz - vv) * i + val;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rep(i, q) &#123;</span><br><span class="line">ans[i] += r[i] - l[i] + <span class="number">1</span>;</span><br><span class="line">write(ans[i]);</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:03&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:08&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;strong&gt;WA(-4)&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;——&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;strong&gt;&lt;font color=&quot;green&quot;&gt;OK&lt;/font&gt;&lt;/strong&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;+&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Difficulty&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1100&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1000&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1800&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2000&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2200&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2600&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2500&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;a href=&quot;https://codeforces.com/contest/1117&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;比赛链接&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打教育场被教育系列。。。Rank 144 out of 5373，Rating Change：&lt;font color=&quot;DarkSlateBlue&quot;&gt;&lt;strong&gt;1970&lt;/strong&gt;&lt;/font&gt; -&amp;gt; &lt;font color=&quot;DarkSlateBlue&quot;&gt;&lt;strong&gt;2025&lt;/strong&gt;&lt;/font&gt;。这一场从C开始都不是那么签到了，开始把CDE都看了，自闭了一会想出了C题二分的简单做法，打表得出D题的结论之后马上证明了，写个矩阵快速幂AC了。但是到了E题之后，被题意坑了，那个the interactor is not adaptive我理解为不会卡随机化，结果想了个假的随机算法，没有分析成功率都交上去。。。赛后发现只要理解为26进制数就可以得到确定性算法，感觉亏的不行。&lt;/p&gt;
&lt;p&gt;G题赛后补了，感觉收获还蛮多的。听cyy讲了一个区间笛卡尔树的想题新思路，又听cyy讲了一个主席树做法，以及离线排序后多次修改的树状数组的做法，后来又想到一个单调栈的做法，感觉这道题还是蛮有启发性的。&lt;/p&gt;
&lt;p&gt;赛时dirt提交的分析：C题WA，原因是 long long· 的INF开小了。E题WA，RE，原因是算法假了。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
      <category term="二分" scheme="http://yoursite.com/tags/%E4%BA%8C%E5%88%86/"/>
    
      <category term="矩阵" scheme="http://yoursite.com/tags/%E7%9F%A9%E9%98%B5/"/>
    
      <category term="打表" scheme="http://yoursite.com/tags/%E6%89%93%E8%A1%A8/"/>
    
      <category term="笛卡尔树" scheme="http://yoursite.com/tags/%E7%AC%9B%E5%8D%A1%E5%B0%94%E6%A0%91/"/>
    
      <category term="主席树" scheme="http://yoursite.com/tags/%E4%B8%BB%E5%B8%AD%E6%A0%91/"/>
    
      <category term="状压dp" scheme="http://yoursite.com/tags/%E7%8A%B6%E5%8E%8Bdp/"/>
    
      <category term="树状数组" scheme="http://yoursite.com/tags/%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    
      <category term="单调栈" scheme="http://yoursite.com/tags/%E5%8D%95%E8%B0%83%E6%A0%88/"/>
    
  </entry>
  
</feed>
