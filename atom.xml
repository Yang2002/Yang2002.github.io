<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>山月半轮的博客</title>
  
  <subtitle>Pause and ponder</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-07-22T17:33:51.427Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YangDavid</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2019杭电多校训练赛1-BUPT Contest</title>
    <link href="http://yoursite.com/2019/07/22/2019%E6%9D%AD%E7%94%B5%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%B5%9B1-BUPT-Contest/"/>
    <id>http://yoursite.com/2019/07/22/2019杭电多校训练赛1-BUPT-Contest/</id>
    <published>2019-07-22T10:15:43.000Z</published>
    <updated>2019-07-22T17:33:51.427Z</updated>
    
    <content type="html"><![CDATA[<p><b><font size="10" face="Courier New, monospace"><span style="color:#00ff00;">A</span><span style="color:#00ff00;">B</span><span style="color:#000000;">C</span><span style="color:#00ff00;">D</span><span style="color:#00ff00;">E</span><span style="color:#000000;">F</span><span style="color:#000000;">G</span><span style="color:#000000;">H</span><span style="color:#00ff00;">I</span><span style="color:#000000;">J</span><span style="color:#000000;">K</span><span style="color:#ee28ee;">L</span><span style="color:#00ff00;">M</span></font></b></p><p>前期卡题体验不太好，补题补到的后期题目还蛮清新</p><a id="more"></a><h1 id="2019杭电多校训练赛1-BUPT-Contest"><a href="#2019杭电多校训练赛1-BUPT-Contest" class="headerlink" title="2019杭电多校训练赛1-BUPT Contest"></a>2019杭电多校训练赛1-BUPT Contest</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>这一场前期比赛体验极差无比，签到题不会做，我和 cyy 分别卡一个题。前三小时，cyy 做的题数据锅了，我做的题多测清空错了，一直处于思博状态，只过了两题。</p><p>之后一小时，我的题终于调出来了，瞎搞过了两个签到，又碰到一个思博模板题，最后半小时口胡了两道题的做法，可是来不及写了。于是达成成就：一小时通过 4 题。其实这一场的可做题还是有很多，只是前期花掉的思博时间有点太多了。如果 <b><font color="black">n</font><font color="red">ocriz</font></b> 在的话，说不定就有希望 8 道题了？</p><ul><li>Solved during contest: <code>6/13</code> </li><li>Upsolved: <code>6/13</code></li><li>Orally upsolved: <code>6/13</code></li><li>Rank: <code>24/995</code></li></ul><!-- More --><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="http://acm.hdu.edu.cn/contests/contest_show.php?cid=848" target="_blank" rel="noopener">Contest Link</a></p><p><a href="http://acm.hdu.edu.cn/listproblem.php?vol=56" target="_blank" rel="noopener">Practice Link</a></p><p><a href="tutorial.pdf">Editorial</a></p><h2 id="模板整理"><a href="#模板整理" class="headerlink" title="模板整理"></a>模板整理</h2><h3 id="凸包相交"><a href="#凸包相交" class="headerlink" title="凸包相交"></a>凸包相交</h3><p>例题：Problem M。实现有暴力版本，以及闵可夫斯基和版本，待填坑。</p><h3 id="d-阶-K-间隔前缀和的快速计算"><a href="#d-阶-K-间隔前缀和的快速计算" class="headerlink" title="d 阶 K 间隔前缀和的快速计算"></a>d 阶 K 间隔前缀和的快速计算</h3><p>例题：（2019 杭电多校1 L题）给出一个数列 $a_i$，进行 $m$ 次操作，每次操作给出一个类型 $k$，将每个数 $a_i$ 换为下面的 $a_i’$：<br>$$<br>a’_i = \sum_{j=i-k\cdot x} a_j \text{ }(x\geq 0, 1\leq j\leq i) \pmod {998244353}<br>$$<br>要求进行完所有操作之后输出 $a$ 数列。为避免输出过大，只需要输出 $\displaystyle \oplus_{i=1}^n i \cdot a_i$</p><p>数据范围：$n \leq 10^5,m\leq 10^6, k \leq 3$</p><p>解答：先考虑最简单的 $k=1$ 的情况，即普通的前缀和。前缀和操作的本质究竟是什么？我们用一种新颖的理解方式：考虑原数组 $a$ 的生成函数，则前缀和数组的生成函数则相当于将 $a$ 的生成函数乘上了下面的多项式：<br>$$<br>\sum_{i=0}^\infty x^i = \frac{1}{1-x}<br>$$<br>是不是很神奇？考虑这道题的特殊的前缀和，给出 $k$ ，那么新生成函数就等于给原数组的生成函数乘上了：<br>$$<br>\sum_{i=0}^\infty x^{ki} = \frac{1}{1-x^k}<br>$$<br>多项式乘法是具有交换律的，因此题目中的操作是可以随意交换顺序的。现在问题可就简单了，我们依次考虑没中类型的操作，一并处理。那么问题就变为了d 阶 K 间隔前缀和的快速计算。考虑进行了 $d$ 次 $k$ 类型操作，那么就相当于给原生成函数乘上了 $\displaystyle \frac 1{(1-x^k)^d}$ 。直接多项式快速幂很难通过，可是更优雅的方法是使用牛顿二项式定理：<br>$$<br>\begin{aligned}<br>\frac 1{(1-x^k)^d} &amp;= \sum_{i=0}^\infty \binom {d+i-1}{i} x^{ki}<br>\end{aligned}<br>$$<br>因此我们可以 $O(n)$ 找到要乘的多项式，$O(n\log n)$ 时间复杂度进行卷积即可。最终复杂度 $O(n\log n + k)$</p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>推荐的题目：L</p><p>难度排序：</p><ul><li>Easy: D, E, M</li><li>Mid Easy: A, B, I, L</li><li>Mid Hard:</li><li>Hard:</li></ul><h2 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h2><blockquote><p><em>Solved by hdmmblz at 01:22 (+2)</em></p></blockquote><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><blockquote><p><em>Solved by hdmmblz at 02:15 (+1)</em></p></blockquote><h2 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><blockquote><p><em>Solved by hdmmblz at 03:40 (+3)</em></p></blockquote><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><blockquote><p><em>Solved by YangDavid at 03:56 (+)</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给出一个 $n$ 个点， $m$ 条边的有向图，删除一条边的代价为边权。问至少付出多少代价，能够增大节点 $1$ 到 $n$ 的最短路长度。如果本身 $1$ 与 $n$ 不联通则输出 $0$ .</p><p>数据范围：$T\leq 10$ 组测试，$n,m\leq 10^4$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>显然先跑一遍最短路，找到最短路 DAG。问题就等价于 $1$ 和 $n$ 的最小割。跑最大流即可。复杂度 $O(Tn^2m)$ 。</p><p>什么，这也能过？抱歉，网络流就是可以为所以为。</p><p>于是这题反而成了这一场的签到题？我们一直以为有更好的方法呢，白白浪费了不少时间。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">using</span> ll = <span class="keyword">long</span> <span class="keyword">long</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> ll INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Type ll</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to;</span><br><span class="line">    Type cap, flow;</span><br><span class="line">    Edge(<span class="keyword">int</span> u = <span class="number">0</span>, <span class="keyword">int</span> v = <span class="number">0</span>, Type c = <span class="number">0</span>):</span><br><span class="line">        from(u), to(v), cap(c), flow(<span class="number">0</span>) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> N;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; adj;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; d, cur;</span><br><span class="line"></span><br><span class="line">    Dinic(<span class="keyword">int</span> Num): N(Num + <span class="number">20</span>), edges(<span class="number">0</span>), adj(Num + <span class="number">20</span>), d(Num + <span class="number">20</span>), cur(Num + <span class="number">20</span>) &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v, Type cap)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u == v) <span class="keyword">return</span>;</span><br><span class="line">        edges.emplace_back(u, v, cap);</span><br><span class="line">        adj[u].emplace_back(edges.size() - <span class="number">1</span>);</span><br><span class="line">        edges.emplace_back(v, u, <span class="number">0</span>);</span><br><span class="line">        adj[v].emplace_back(edges.size() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q(&#123;S&#125;);</span><br><span class="line">        fill(d.begin(), d.end(), N + <span class="number">1</span>);</span><br><span class="line">        d[S] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> u = q.front(); q.pop();</span><br><span class="line">            <span class="keyword">if</span>(u == T) <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k : adj[u]) &#123;</span><br><span class="line">                Edge &amp;e = edges[k];</span><br><span class="line">                <span class="keyword">if</span>(e.flow &lt; e.cap &amp;&amp; d[e.to] &gt; d[e.from] + <span class="number">1</span>) &#123;</span><br><span class="line">                    d[e.to] = d[e.from] + <span class="number">1</span>;</span><br><span class="line">                    q.emplace(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> d[T] != N + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Type <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> T, Type flow = <span class="number">-1</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(u == T || flow == <span class="number">0</span>) <span class="keyword">return</span> flow;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> &amp;i = cur[u]; i &lt; <span class="keyword">int</span>(adj[u].size()); ++i) &#123;</span><br><span class="line">            Edge &amp;e = edges[adj[u][i]];</span><br><span class="line">            Edge &amp;re = edges[adj[u][i] ^ <span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(d[e.to] == d[e.from] + <span class="number">1</span>) &#123;</span><br><span class="line">                Type rem = e.cap - e.flow;</span><br><span class="line">                <span class="keyword">if</span>(flow != <span class="number">-1</span> &amp;&amp; rem &gt; flow) rem = flow;</span><br><span class="line">                Type pushed = DFS(e.to, T, rem);</span><br><span class="line">                <span class="keyword">if</span>(pushed &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                    e.flow += pushed;</span><br><span class="line">                    re.flow -= pushed;</span><br><span class="line">                    <span class="keyword">return</span> pushed;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Type <span class="title">MaxFlow</span><span class="params">(<span class="keyword">int</span> S, <span class="keyword">int</span> T)</span> </span>&#123;</span><br><span class="line">        Type total = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(BFS(S, T)) &#123;</span><br><span class="line">            fill(cur.begin(), cur.end(), <span class="number">0</span>);</span><br><span class="line">            <span class="keyword">while</span>(Type flow = DFS(S, T))</span><br><span class="line">                total += flow;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> total;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> Type</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= (n); ++i)</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11111</span>;</span><br><span class="line">ll n, m, d[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, m);</span><br><span class="line">    <span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span>(d));</span><br><span class="line">    rep(i, n) G[i].clear();</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> f, t, w;</span><br><span class="line">        read(f, t, w);</span><br><span class="line">        G[f].emplace_back(t, w);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    priority_queue&lt;pii, <span class="built_in">vector</span>&lt;pii&gt;, greater&lt;pii&gt; &gt; pq; </span><br><span class="line">    pq.emplace(<span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line">    d[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(!pq.empty()) &#123;</span><br><span class="line">        <span class="keyword">auto</span> f = pq.top(); pq.pop();</span><br><span class="line">        <span class="keyword">int</span> di = f.first, no = f.second;</span><br><span class="line">        <span class="keyword">if</span>(d[no] != di) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[no]) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = g.first, w = g.second;</span><br><span class="line">            <span class="keyword">if</span>(d[to] &gt; w + d[no]) &#123;</span><br><span class="line">                d[to] = w + d[no];</span><br><span class="line">                pq.emplace(d[to], to);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Dinic <span class="title">so</span><span class="params">(n)</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[i]) <span class="keyword">if</span>(d[i] + g.second == d[g.first])</span><br><span class="line">            so.AddEdge(i, g.first, g.second);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, so.MaxFlow(<span class="number">1</span>, n));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; read(T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-G"><a href="#Prob-G" class="headerlink" title="Prob G."></a>Prob G.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-H"><a href="#Prob-H" class="headerlink" title="Prob H."></a>Prob H.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-I"><a href="#Prob-I" class="headerlink" title="Prob I."></a>Prob I.</h2><blockquote><p><em>Solved by YangDavid at 03:39 (+4)</em></p></blockquote><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给出一个英文小写字母组成的字符串，要求找到一个字典序最小的子序列，使得对于每一种字母 $c$ ，其出现次数都恰好在给定的范围 $[L_c,R_c]$ 之中。如果找不到，则输出 $-1$ 。</p><p>数据范围： $|S| \leq 10^5$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>我们采用贪心的策略寻找子序列。每个位置先尝试填 <code>a</code> ，如果可行，就考虑下一位；否则我们就尝试填 <code>b</code> ，如果还不行就填 <code>c</code> ，依次类推。</p><p>那么如何判断填某个字母后是否可行呢？首先预处理每个位置 $p$ 对应的后缀各个字母出现的次数。“可行”，即存在一种字符串，等价于满足下面三个条件：</p><ul><li>后缀中每个字母出现次数 $cnt_c$ 不小于最少的出现次数 $L_c$</li><li>后缀中必选的字母长度总和 $\sum L_c$ 不大于剩余长度</li><li>后缀中最多可选的字母长度总和 $\sum \min(R_c, cnt_c)$ 不小于剩余长度</li></ul><p><strong>警告</strong> 这道题细节较多，我在场上一个多测清空的地方语句写反了，导致 WA 了好多次，实在是不应该。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年07月22日 星期一 13时34分18秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">311111</span>;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="keyword">int</span> n, k, cnt[maxn][<span class="number">27</span>], L[<span class="number">27</span>], R[<span class="number">27</span>];</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pos[<span class="number">27</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> remlen)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(remlen &lt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ll totl = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)  </span><br><span class="line">        totl += max(L[i], <span class="number">0L</span>L);</span><br><span class="line">    <span class="keyword">if</span>(totl &gt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="keyword">if</span>(cnt[p][i] &lt; L[i]) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    ll cho = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        cho += min(R[i], cnt[p][i]);</span><br><span class="line">    <span class="keyword">if</span>(cho &lt; k) <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">string</span> ans = <span class="string">""</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;L[i], &amp;R[i]), pos[i].clear();</span><br><span class="line">    n = <span class="built_in">strlen</span>(s);</span><br><span class="line">    <span class="built_in">memset</span>(cnt[n], <span class="number">0</span>, <span class="keyword">sizeof</span> cnt[n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = n - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(cnt[i], cnt[i + <span class="number">1</span>], <span class="keyword">sizeof</span>(cnt[i]));</span><br><span class="line">        cnt[i][s[i] - <span class="string">'a'</span>]++;</span><br><span class="line">        pos[s[i] - <span class="string">'a'</span>].push_front(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!check(<span class="number">0</span>, n)) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span> ; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k--) &#123;</span><br><span class="line">        <span class="keyword">bool</span> ok = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">0</span>; c &lt; <span class="number">26</span>; ++c) &#123;</span><br><span class="line">            <span class="keyword">while</span>(!pos[c].empty() &amp;&amp; pos[c].front() &lt;= cur) pos[c].pop_front();</span><br><span class="line">            <span class="keyword">if</span>(pos[c].empty()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">int</span> f = pos[c].front();</span><br><span class="line">            <span class="keyword">if</span>(R[c] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            L[c]--, R[c]--;</span><br><span class="line">            <span class="keyword">if</span>(check(f + <span class="number">1</span>, n - f)) &#123;</span><br><span class="line">                ans += (<span class="string">'a'</span> + c);</span><br><span class="line">                cur = f;</span><br><span class="line">                ok = <span class="literal">true</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> L[c]++, R[c]++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!ok) assert(<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s%lld"</span>, s, &amp;k))</span><br><span class="line">        solve();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-J"><a href="#Prob-J" class="headerlink" title="Prob J."></a>Prob J.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-K"><a href="#Prob-K" class="headerlink" title="Prob K."></a>Prob K.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-L"><a href="#Prob-L" class="headerlink" title="Prob L."></a>Prob L.</h2><blockquote><p><em>Upsolved by YangDavid (+)</em></p></blockquote><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给出一个数列 $a_i$，进行 $m$ 次操作，每次操作给出一个类型 $k$，将每个数 $a_i$ 换为下面的 $a_i’$：<br>$$<br>a’_i = \sum_{j=i-k\cdot x} a_j \text{ }(x\geq 0, 1\leq j\leq i) \pmod {998244353}<br>$$<br>要求进行完所有操作之后输出 $a$ 数列。为避免输出过大，只需要输出 $\displaystyle \oplus_{i=1}^n i \cdot a_i$</p><p>数据范围：$n \leq 10^5,m\leq 10^6, k \leq 3$</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>先考虑最简单的 $k=1$ 的情况，即普通的前缀和。前缀和操作的本质究竟是什么？我们用一种新颖的理解方式：考虑原数组 $a$ 的生成函数，则前缀和数组的生成函数则相当于将 $a$ 的生成函数乘上了下面的多项式：<br>$$<br>\sum_{i=0}^\infty x^i = \frac{1}{1-x}<br>$$<br>是不是很神奇？考虑这道题的特殊的前缀和，给出 $k$ ，那么新生成函数就等于给原数组的生成函数乘上了：<br>$$<br>\sum_{i=0}^\infty x^{ki} = \frac{1}{1-x^k}<br>$$<br>多项式乘法是具有交换律的，因此题目中的操作是可以随意交换顺序的。考虑进行了 $d$ 次 $k$ 类型操作，那么就相当于给原生成函数乘上了 $\displaystyle \frac 1{(1-x^k)^d}$ 。直接多项式快速幂很难通过，可是更优雅的方法是使用牛顿二项式定理：<br>$$<br>\begin{aligned}<br>\frac 1{(1-x^k)^d} &amp;= \sum_{i=0}^\infty \binom {d+i-1}{i} x^{ki}<br>\end{aligned}<br>$$<br>因此我们可以 $O(n)$ 找到要乘的多项式，$O(n\log n)$ 时间复杂度进行卷积即可。</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>这道题帮助我完全搞定了 $k$ 阶前缀和的快速计算方法，又多了一个模板，点赞！</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年07月22日 星期一 23时24分29秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0; i &lt; (n); ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fft_len, fft_lg, r[<span class="number">1200000</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ensure_base</span><span class="params">(<span class="keyword">int</span> deg)</span> </span>&#123;</span><br><span class="line">fft_len = <span class="number">1</span>, fft_lg = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(fft_len &lt;= deg) fft_len &lt;&lt;= <span class="number">1</span>, fft_lg++;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fft_len; ++i)</span><br><span class="line">r[i] = (r[i&gt;&gt;<span class="number">1</span>]&gt;&gt;<span class="number">1</span>) | ((i&amp;<span class="number">1</span>) &lt;&lt; (fft_lg<span class="number">-1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">998244353</span>, g = <span class="number">3</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">    <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">while</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line"><span class="keyword">while</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NTT</span> &#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ginv = inv(g);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fft</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;A, <span class="keyword">int</span> dft)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fft_len; ++i)</span><br><span class="line"><span class="keyword">if</span>(i &lt; r[i]) swap(A[i], A[r[i]]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> mid = <span class="number">1</span>; mid &lt; fft_len; mid &lt;&lt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> wn = qpow(dft == <span class="number">1</span> ? g : ginv, (MOD - <span class="number">1</span>) / (mid &lt;&lt; <span class="number">1</span>));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> len = mid &lt;&lt; <span class="number">1</span>, j = <span class="number">0</span>; j &lt; fft_len; j += len) &#123;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; mid; ++k, w = muln(w, wn)) &#123;</span><br><span class="line"><span class="keyword">int</span> x = A[j + k], y = muln(w, A[j + k + mid]);</span><br><span class="line">A[j + k] = mo(x + y);</span><br><span class="line">A[j + k + mid] = mo(x - y);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dft == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> invn = inv(fft_len);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fft_len; ++i)</span><br><span class="line">A[i] = muln(A[i], invn);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; mul(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> degA, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B, <span class="keyword">int</span> degB) &#123;</span><br><span class="line">ensure_base(degA + degB);</span><br><span class="line">A.resize(fft_len), B.resize(fft_len);</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(fft_len, <span class="number">0</span>);</span><br><span class="line">fft(A, <span class="number">1</span>), fft(B, <span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; fft_len; ++i)</span><br><span class="line">ans[i] = muln(A[i], B[i]);</span><br><span class="line">fft(ans, <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line">&#125; ntt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3000200</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> fac[maxn], ifac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> muln(fac[n], muln(ifac[n - m], ifac[m]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n, m, op; <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(n), b[<span class="number">3</span>], tp(<span class="number">3</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; ++i) b[i].resize(n, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;op), tp[op - <span class="number">1</span>]++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; <span class="number">3</span>; ++k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(tp[k] == <span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i * (k + <span class="number">1</span>) &lt; n; ++i)</span><br><span class="line">            b[k][(k + <span class="number">1</span>) * i] = C(tp[k] + i - <span class="number">1</span>, i);</span><br><span class="line">        a = ntt.mul(a, n - <span class="number">1</span>, b[k], n - <span class="number">1</span>);</span><br><span class="line">        a.resize(n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        ans ^= (<span class="number">1L</span>L * (i + <span class="number">1</span>) * a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> lim = <span class="number">2900000</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= lim; ++i)</span><br><span class="line">        fac[i] = muln(fac[i - <span class="number">1</span>], i);</span><br><span class="line">    ifac[lim] = inv(fac[lim]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = lim - <span class="number">1</span>; i &gt;= <span class="number">0</span>; --i)</span><br><span class="line">        ifac[i] = muln(ifac[i + <span class="number">1</span>], i + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-M"><a href="#Prob-M" class="headerlink" title="Prob M."></a>Prob M.</h2><blockquote><p><em>Solved by YangDavid at 04:25 (+)</em></p></blockquote><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>问题等价于平面上给 $n$ 个点，分为黑色白色，问能不能找到一条直线，将平面分为两部分，使得每个部分的点颜色恰好都相同。</p><p>数据范围：1000 组数据，每组 $n\leq 100$</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>求出黑色点和白色点分别组成的凸包，判断凸包是否相交即可。</p><p>如果暴力实现，即枚举 A 凸包的每个顶点是否在 B 凸包内，A 凸包的每条边是否与 B 凸包相交，则复杂度是 $O(n^2)$ 的。</p><p>如果采用闵可夫斯基和实现判断凸包相交，则复杂度 $O(n\log n)$ 。</p><p>场上是网上搜的暴力板子，这里急需自己写板子！！！</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">double</span> eps=<span class="number">1e-15</span>;</span><br><span class="line"><span class="keyword">double</span> pi=<span class="built_in">acos</span>(<span class="number">-1</span>);</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span>&#123;</span></span><br><span class="line">    <span class="keyword">double</span> x,y;</span><br><span class="line">    Point(<span class="keyword">double</span> x=<span class="number">0</span>,<span class="keyword">double</span> y=<span class="number">0</span>):x(x),y(y)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">typedef</span> Point Vector;</span><br><span class="line">Vector <span class="keyword">operator</span> + (Vector A,Vector B)&#123;<span class="keyword">return</span> Vector(A.x+B.x,A.y+B.y);&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> - (Vector A,Vector B)&#123;<span class="keyword">return</span> Vector(A.x-B.x,A.y-B.y);&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> * (Vector A,<span class="keyword">double</span> B)&#123;<span class="keyword">return</span> Vector(A.x*B,A.y*B);&#125;</span><br><span class="line">Vector <span class="keyword">operator</span> / (Vector A,<span class="keyword">double</span> B)&#123;<span class="keyword">return</span> Vector(A.x/B,A.y/B);&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dcmp</span><span class="params">(<span class="keyword">double</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">fabs</span>(x)&lt;eps)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x&lt;<span class="number">0</span>?<span class="number">-1</span>:<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> Point &amp;a,<span class="keyword">const</span> Point &amp;b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)&lt;<span class="number">0</span>||(dcmp(a.x-b.x)==<span class="number">0</span>&amp;&amp;dcmp(a.y-b.y)&lt;<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> Point &amp;a,<span class="keyword">const</span> Point &amp;b)&#123;</span><br><span class="line">    <span class="keyword">return</span> dcmp(a.x-b.x)==<span class="number">0</span>&amp;&amp;dcmp(a.y-b.y)==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cross</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.y-A.y*B.x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Dot</span><span class="params">(Vector A,Vector B)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> A.x*B.x+A.y*B.y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">Vector <span class="title">Rotate</span><span class="params">(Vector A,<span class="keyword">double</span> rad)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> Vector(A.x*<span class="built_in">cos</span>(rad)-A.y*<span class="built_in">sin</span>(rad),A.x*<span class="built_in">sin</span>(rad)+A.y*<span class="built_in">cos</span>(rad));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tubao</span><span class="params">(Point *p,<span class="keyword">int</span> n,Point *ch)</span></span>&#123;</span><br><span class="line">    sort(p,p+n);</span><br><span class="line">    <span class="comment">//n=unique(p,p+n)-p;</span></span><br><span class="line">    <span class="keyword">int</span> m=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;<span class="number">1</span>&amp;&amp;Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>],p[i]-ch[m<span class="number">-2</span>])&lt;=<span class="number">0</span>)m--;</span><br><span class="line">        ch[m++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> k=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">        <span class="keyword">while</span>(m&gt;k&amp;&amp;Cross(ch[m<span class="number">-1</span>]-ch[m<span class="number">-2</span>],p[i]-ch[m<span class="number">-2</span>])&lt;=<span class="number">0</span>)m--;</span><br><span class="line">        ch[m++]=p[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(n&gt;<span class="number">1</span>)m--;</span><br><span class="line">    <span class="keyword">return</span> m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readp</span><span class="params">(Point &amp;A)</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lf%lf"</span>,&amp;A.x,&amp;A.y);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">onsegment</span><span class="params">(Point p,Point a1,Point a2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p==a1||p==a2)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">return</span> dcmp(Cross(a1-p,a2-p))==<span class="number">0</span>&amp;&amp;dcmp(Dot(a1-p,a2-p))&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">segmentcross</span><span class="params">(Point a1,Point a2,Point b1,Point b2)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a1==b1||a1==b2||a2==b1||a2==b2)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">double</span> c1=Cross(a2-a1,b1-a1),c2=Cross(a2-a1,b2-a1),</span><br><span class="line">           c3=Cross(b2-b1,a1-b1),c4=Cross(b2-b1,a2-b1);</span><br><span class="line">    <span class="keyword">return</span> dcmp(c1)*dcmp(c2)&lt;<span class="number">0</span>&amp;&amp;dcmp(c3)*dcmp(c4)&lt;<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">intubao</span><span class="params">(Point *ch,<span class="keyword">int</span> n,Point p)</span></span>&#123;</span><br><span class="line">    Vector A,B;</span><br><span class="line">    <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        A=ch[(i+<span class="number">1</span>)%n]-ch[i];</span><br><span class="line">        B=p-ch[i];</span><br><span class="line">        <span class="keyword">if</span>(onsegment(p,ch[i],ch[(i+<span class="number">1</span>)%n]))&#123;</span><br><span class="line">            flag=<span class="number">-1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(Cross(A,B)&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            flag++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag==<span class="number">-1</span>||flag==n)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> T,n,m;</span><br><span class="line">Point p1[<span class="number">10005</span>],ch1[<span class="number">10005</span>],p2[<span class="number">10005</span>],ch2[<span class="number">10005</span>], tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> TLE, qry; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;TLE);</span><br><span class="line">    <span class="keyword">while</span>(TLE--)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;qry);</span><br><span class="line">        n = m = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= qry; ++i) &#123;</span><br><span class="line">            readp(tmp);</span><br><span class="line">            <span class="keyword">int</span> tp; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;tp);</span><br><span class="line">            <span class="keyword">if</span>(tp == <span class="number">1</span>) p1[n++] = tmp;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(tp == <span class="number">-1</span>) p2[m++] = tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> m1=tubao(p1,n,ch1);</span><br><span class="line">        <span class="keyword">int</span> m2=tubao(p2,m,ch2);</span><br><span class="line">        <span class="keyword">int</span> flag=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m1;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m2;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(segmentcross(ch1[i],ch1[(i+<span class="number">1</span>)%m1],ch2[j],ch2[(j+<span class="number">1</span>)%m2]))&#123;</span><br><span class="line">                    flag=<span class="number">1</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m1;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intubao(ch2,m2,ch1[i]))&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m2;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(intubao(ch1,m1,ch2[i]))&#123;</span><br><span class="line">                flag=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(flag)<span class="built_in">printf</span>(<span class="string">"Infinite loop!\n"</span>);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Successful!\n"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font size=&quot;10&quot; face=&quot;Courier New, monospace&quot;&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;C&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;F&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;G&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;H&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;J&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;K&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;L&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;M&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;前期卡题体验不太好，补题补到的后期题目还蛮清新&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="闵可夫斯基和" scheme="http://yoursite.com/tags/%E9%97%B5%E5%8F%AF%E5%A4%AB%E6%96%AF%E5%9F%BA%E5%92%8C/"/>
    
  </entry>
  
  <entry>
    <title>AtCoder Grand Contest 036</title>
    <link href="http://yoursite.com/2019/07/22/AtCoder-Grand-Contest-036/"/>
    <id>http://yoursite.com/2019/07/22/AtCoder-Grand-Contest-036/</id>
    <published>2019-07-22T02:25:22.000Z</published>
    <updated>2019-07-22T17:34:18.780Z</updated>
    
    <content type="html"><![CDATA[<p><b><font size="10" face="Courier New, monospace"><span style="color:#00ff00;">A</span><span style="color:#00ff00;">B</span><span style="color:#00ff00;">C</span><span style="color:#ee28ee;">D</span><span style="color:#000000;">E</span><span style="color:#000000;">F</span></font></b></p><p>头一次在 AGC 中场上做出 3 道题。</p><a id="more"></a><h1 id="AtCoder-Grand-Contest-036"><a href="#AtCoder-Grand-Contest-036" class="headerlink" title="AtCoder Grand Contest 036"></a>AtCoder Grand Contest 036</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>有点开心啊，头一次在 AGC 中场上做出 3 道题。AtCoder Rating 超过 CF 指日可待。</p><ul><li>Solved during contest: <code>3/6</code> </li><li>Upsolved: <code>4/6</code></li><li>Orally upsolved: <code>4/6</code></li><li>Rank: 124</li><li>Performance: 2454</li><li>Rating: 1834 (+155)</li></ul><!-- More --><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="editorial.pdf">Editorial</a></p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h2><blockquote><p><em>Solved at 00:21 (+)</em></p></blockquote><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><blockquote><p><em>Solved at 00:55 (+1)</em></p></blockquote><h2 id="Prob-C-思维，补集转化"><a href="#Prob-C-思维，补集转化" class="headerlink" title="Prob C.思维，补集转化"></a>Prob C.思维，补集转化</h2><blockquote><p><em>Solved at 02:18 (+1)</em></p></blockquote><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>排除法。 答案就是直接考虑把 3m 个苹果放入 n 个不同盒子的方法数，减去这么几种不合法情况：</p><ol><li><p>存在大于 m 个盒子，存放苹果数量是奇数</p></li><li><p>存在一个盒子，其中的苹果数量超过 2m</p></li></ol><p>可以发现，这两个条件是互不相交的，并且把这两种情况排除之后就一定是合法的情况。需要说明的是，情况 1 需要枚举放奇数个苹果的盒子数量，然后转化为常规插板法问题。</p><h2 id="Prob-D-好题"><a href="#Prob-D-好题" class="headerlink" title="Prob D. 好题"></a>Prob D. 好题</h2><blockquote><p><em>Upsolved</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有一张 $n $ 个点的有向图，初始有 $n-1$ 条形如 $i \to i+1$ 、边权是 0 的价值无穷大的固定边，之后对于任意的 $ 1\leq i \neq j \leq n$ ，都会加上一条 $i\to j$ 的边，价值为 $a_{ij}$ ，如果 $i&lt;j$ ，则边权是 -1，否则边权是 1。你可以删去一些边，要求删除之后的图没有负环，求花费的最小价值。</p><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2><blockquote><p><em>Unsolved</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font size=&quot;10&quot; face=&quot;Courier New, monospace&quot;&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;C&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;F&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;头一次在 AGC 中场上做出 3 道题。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>牛客暑期多校训练赛2-Eddy1021 Contest</title>
    <link href="http://yoursite.com/2019/07/20/%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%B5%9B2/"/>
    <id>http://yoursite.com/2019/07/20/牛客暑期多校训练赛2/</id>
    <published>2019-07-20T12:53:03.000Z</published>
    <updated>2019-07-22T17:00:47.763Z</updated>
    
    <content type="html"><![CDATA[<p><b><font size="10" face="courier new, monospace"><span style="color:#ee28ee;">A</span><span style="color:#00ff00;">B</span><span style="color:#000000;">C</span><span style="color:#ee28ee;">D</span><span style="color:#ee28ee;">E</span><span style="color:#00ff00;">F</span><span style="color:#000000;">G</span><span style="color:#00ff00;">H</span><span style="color:#000000;">I</span><span style="color:#000000;">J</span></font></b></p><p>Rank 41，有点自闭</p><a id="more"></a><h1 id="牛客暑期多校训练赛2"><a href="#牛客暑期多校训练赛2" class="headerlink" title="牛客暑期多校训练赛2"></a>牛客暑期多校训练赛2</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>打得有点自闭，A、 D 两道简单题，一道被假做法演了，一道以为是图灵奖难题，没做出来。看来还有不少需要提高的地方啊。</p><ul><li>Solved during contest: <code>3/10</code> </li><li>Upsolved: <code>6/10</code></li><li>Orally upsolved: <code>6/10</code></li><li>Rank: <code>41/756</code></li></ul><!-- More --><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="https://ac.nowcoder.com/acm/contest/882#question" target="_blank" rel="noopener">Practice Link</a></p><p><a href="Editorial.pdf">Editorial</a></p><h1 id="新增的板子"><a href="#新增的板子" class="headerlink" title="新增的板子"></a>新增的板子</h1><h3 id="线性齐次递推数列"><a href="#线性齐次递推数列" class="headerlink" title="线性齐次递推数列"></a>线性齐次递推数列</h3><p>暴力板子，NTT 板子（缺）</p><h3 id="最大团搜索"><a href="#最大团搜索" class="headerlink" title="最大团搜索"></a>最大团搜索</h3><h3 id="悬线法"><a href="#悬线法" class="headerlink" title="悬线法"></a>悬线法</h3><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>推荐的题目：</p><p>难度排序：</p><ul><li>Easy: F, H</li><li>Mid Easy: B</li><li>Mid Hard:</li><li>Hard:</li></ul><h2 id="Prob-A-概率，思维"><a href="#Prob-A-概率，思维" class="headerlink" title="Prob A. 概率，思维"></a>Prob A. 概率，思维</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><p>结论：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">T = int(input())</span><br><span class="line">ans, MOD = <span class="number">1</span>, <span class="number">1000000007</span></span><br><span class="line"><span class="keyword">for</span> case <span class="keyword">in</span> range(T):</span><br><span class="line">    N, M = map(int, input().split())</span><br><span class="line">    <span class="keyword">if</span> N == <span class="number">1</span>: ans *= <span class="number">1</span></span><br><span class="line">    <span class="keyword">elif</span> M == <span class="number">0</span>: ans = <span class="number">0</span></span><br><span class="line">    <span class="keyword">else</span>: ans = ans * pow(N - <span class="number">1</span>, MOD<span class="number">-2</span>, MOD) % MOD</span><br><span class="line">    print(ans)</span><br></pre></td></tr></table></figure><p>为什么？可以考虑小范围暴力来获得这种直觉，然后考虑用归纳法证明。</p><p>这道题场上没有通过，结论假了，后期一直以为是大范围组合数取模，下次需要注意。</p><h2 id="Prob-B-线性齐次递推数列"><a href="#Prob-B-线性齐次递推数列" class="headerlink" title="Prob B. 线性齐次递推数列"></a>Prob B. 线性齐次递推数列</h2><blockquote><p><em>Solved by hdmmblz at 03:56 (+1)</em> </p></blockquote><p>第一问有一个显然的 dp，就是：<br>$$<br>dp[i] = \frac 1k \sum_{i-k \leq j &lt; i} dp[j]<br>$$<br>这是线性齐次递推，数据范围不大，用暴力多项式取模就可以了。</p><p>第二问很有趣，答案是 $\displaystyle \frac{2}{k+1}$。我当时是打表发现的规律，考虑直觉的话，每一步的期望长度是 $\displaystyle \frac {k+1}2$ ，因此越到后面，每个格子被选的概率就越接近期望长度的倒数，就是这道题的答案。</p><h2 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-D-和团有关的搜索"><a href="#Prob-D-和团有关的搜索" class="headerlink" title="Prob D.和团有关的搜索"></a>Prob D.和团有关的搜索</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>求一个点有点权的无向图权值第 $k$ 小的团的权值。点数小于 100。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>直接二分团的权值，然后 DFS 爆搜验证。维护一个 bitset 表示可以加入团的点，每次用 bitset 的 <code>_Find_first</code> 与 <code>_Find_next</code> 寻找下一个点，用 bitset 的与运算符来进行 $O(\frac nw)$ 地转移到下一个团，如果转移到的团的数量超过 $k$ 个，那就直接停止，因为这说明权值一定是大了。总复杂度就是 $O(k \cdot \frac nw \cdot \log \sum w)$</p><p>由于牛客评测机不开 O2，bitset 的 <code>_Find_first</code> 与 <code>_Find_next</code> 会被卡常，需要小心处理。</p><h2 id="Prob-E-矩阵乘法，线段树"><a href="#Prob-E-矩阵乘法，线段树" class="headerlink" title="Prob E. 矩阵乘法，线段树"></a>Prob E. 矩阵乘法，线段树</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><p>线段树维护矩阵链乘即可。场上思博了，没看到这道题。</p><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2><blockquote><p><em>Solved by YangDavid at 01:55 (+3)</em></p></blockquote><p>稍加技巧的组合型枚举，复杂度 $\displaystyle O(\binom {2N} N \cdot N)$</p><h2 id="Prob-G"><a href="#Prob-G" class="headerlink" title="Prob G."></a>Prob G.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-H"><a href="#Prob-H" class="headerlink" title="Prob H."></a>Prob H.</h2><blockquote><p><em>Solved by hdmmblz at 02:28 (+)</em></p></blockquote><h2 id="Prob-I"><a href="#Prob-I" class="headerlink" title="Prob I."></a>Prob I.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-J"><a href="#Prob-J" class="headerlink" title="Prob J."></a>Prob J.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-K"><a href="#Prob-K" class="headerlink" title="Prob K."></a>Prob K.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-L"><a href="#Prob-L" class="headerlink" title="Prob L."></a>Prob L.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-M"><a href="#Prob-M" class="headerlink" title="Prob M."></a>Prob M.</h2><blockquote><p><em>Unsolved</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font size=&quot;10&quot; face=&quot;courier new, monospace&quot;&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;C&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;F&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;G&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;H&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;J&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;Rank 41，有点自闭&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="nowcoder" scheme="http://yoursite.com/tags/nowcoder/"/>
    
  </entry>
  
  <entry>
    <title>牛客暑期多校训练赛1-ftiasch Contest</title>
    <link href="http://yoursite.com/2019/07/19/%E7%89%9B%E5%AE%A2%E6%9A%91%E6%9C%9F%E5%A4%9A%E6%A0%A1%E8%AE%AD%E7%BB%83%E8%B5%9B1/"/>
    <id>http://yoursite.com/2019/07/19/牛客暑期多校训练赛1/</id>
    <published>2019-07-19T01:32:08.000Z</published>
    <updated>2019-07-22T17:08:48.342Z</updated>
    
    <content type="html"><![CDATA[<p><b><font size="10" face="courier new, monospace"><span style="color:#00ff00;">A</span><span style="color:#00ff00;">B</span><span style="color:#ee28ee;">C</span><span style="color:#ee28ee;">D</span><span style="color:#00ff00;">E</span><span style="color:#00ff00;">F</span><span style="color:#000000;">G</span><span style="color:#ee28ee;">H</span><span style="color:#ee28ee;">I</span><span style="color:#00ff00;">J</span></font></b></p><p>题目质量很高，为叉姐点赞！</p><a id="more"></a><h1 id="牛客暑期多校训练赛1"><a href="#牛客暑期多校训练赛1" class="headerlink" title="牛客暑期多校训练赛1"></a>牛客暑期多校训练赛1</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p>Contest Date: 2019-07-18 12:00 - 17:00<br>Editorial Date: 2019-07-19</p><p>第一场牛客多校刚好和 NOI 网络赛重了 1 小时，加上午饭、午觉，第三小时才加入战斗，一直在当云程序员。吹爆牛逼 cyy，认真按时参加比赛。感觉这一场的题蛮不错的啊。</p><ul><li>Solved during contest: <code>5/10</code> </li><li>Upsolved: <code>9/10</code></li><li>Orally upsolved: <code>10/10</code></li><li>Rank: <code>40/975</code></li></ul><!-- More --><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="https://ac.nowcoder.com/acm/contest/881#question" target="_blank" rel="noopener">Contest Link</a><br><a href="Editorial.pdf">Editorial</a></p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>解题/补题顺序：</p><p>Easy: </p><p>Mid Easy:</p><p>Mid Hard:</p><p>Hard:</p><h2 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h2><blockquote><p><em>Solved by hdmmblz at 00:35 (+)</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>定义两个数组等价，当且进当它们任意区间最小值的下标相同。问两个数组最长等价前缀的长度。</p><p>数据范围：$n\leq 10^5$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>做法 1</p><ul><li>题中的“equivalent”等价于笛卡尔树相同</li><li>二分答案，比较两个前缀的笛卡尔树，或者直接预处理 RMQ，即可做到 $O(n \log n)$</li></ul><p>做法 2</p><ul><li>对于数组 a,定义 $\operatorname {last} a (i) = \max \{ j : j &lt; i \wedge a j &gt; a_i \}$</li><li>如果 $\operatorname {last} a = \operatorname {last} b$ ,那么数组 a 和 b“equivalent”<br><em>证明</em>: $n, last(n), last(last(n))$, … 是笛卡尔树的最右路径,递归构造</li><li>单调队列求 last 并比较 $O(n)$ </li></ul><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll n,lg[<span class="number">100005</span>],ans=<span class="number">0</span>,l,r,mid,a[<span class="number">2</span>][<span class="number">100005</span>],rmq[<span class="number">2</span>][<span class="number">20</span>][<span class="number">100005</span>],i,j,t,tmp1,tmp2;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="keyword">int</span> p,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp1,tmp2,len;</span><br><span class="line">    len=r-l+<span class="number">1</span>;</span><br><span class="line">    tmp1=rmq[p][lg[len]][l];</span><br><span class="line">    tmp2=rmq[p][lg[len]][r-(<span class="number">1</span>&lt;&lt;lg[len])+<span class="number">1</span>];</span><br><span class="line">    <span class="comment">//printf("%d %d %d %lld %lld %lld %d\n",p,l,r,tmp1,tmp2,lg[len],r-lg[len]+1);</span></span><br><span class="line">    <span class="keyword">if</span>(a[p][tmp1]&lt;a[p][tmp2])<span class="keyword">return</span> tmp1;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> tmp2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">chk</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll tmp1,tmp2;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;l)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&gt;n)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    tmp1=query(<span class="number">0</span>,l,r);tmp2=query(<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="comment">//printf("%lld %lld %d %d\n",tmp1,tmp2,l,r);</span></span><br><span class="line">    <span class="keyword">if</span>(tmp1!=tmp2)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> chk(l,tmp1<span class="number">-1</span>)&amp;chk(tmp1+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    lg[<span class="number">1</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">2</span>;i&lt;=<span class="number">100000</span>;i++)lg[i]=lg[i/<span class="number">2</span>]+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//init();</span></span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[<span class="number">0</span>][i]),rmq[<span class="number">0</span>][<span class="number">0</span>][i]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[<span class="number">1</span>][i]),rmq[<span class="number">1</span>][<span class="number">0</span>][i]=i;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;<span class="number">20</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j+(<span class="number">1</span>&lt;&lt;i)<span class="number">-1</span>&gt;n)rmq[<span class="number">0</span>][i][j]=rmq[<span class="number">0</span>][i<span class="number">-1</span>][j],rmq[<span class="number">1</span>][i][j]=rmq[<span class="number">1</span>][i<span class="number">-1</span>][j];</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    tmp1=rmq[<span class="number">0</span>][i<span class="number">-1</span>][j];tmp2=rmq[<span class="number">0</span>][i<span class="number">-1</span>][j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))];</span><br><span class="line">                    <span class="keyword">if</span>(a[<span class="number">0</span>][tmp1]&lt;a[<span class="number">0</span>][tmp2])rmq[<span class="number">0</span>][i][j]=tmp1;</span><br><span class="line">                    <span class="keyword">else</span> rmq[<span class="number">0</span>][i][j]=tmp2;</span><br><span class="line">                    tmp1=rmq[<span class="number">1</span>][i<span class="number">-1</span>][j];tmp2=rmq[<span class="number">1</span>][i<span class="number">-1</span>][j+(<span class="number">1</span>&lt;&lt;(i<span class="number">-1</span>))];</span><br><span class="line">                    <span class="keyword">if</span>(a[<span class="number">1</span>][tmp1]&lt;a[<span class="number">1</span>][tmp2])rmq[<span class="number">1</span>][i][j]=tmp1;</span><br><span class="line">                    <span class="keyword">else</span> rmq[<span class="number">1</span>][i][j]=tmp2;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        l=<span class="number">1</span>;r=n+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l&lt;r)</span><br><span class="line">        &#123;</span><br><span class="line">            mid=(l+r)/<span class="number">2</span>;</span><br><span class="line">            <span class="keyword">if</span>(chk(<span class="number">1</span>,mid))l=mid+<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,l<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><blockquote><p><em>Solved by hdmmblz at 01:24 (+)</em></p></blockquote><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>求下面的积分：<br>$$<br>\frac 1\pi \int_{0}^{\infty} \frac 1{\prod\limits_{i=1}^n(a_i^2 + x^2)} {\rm d}x<br>$$<br>提示：利用 $\displaystyle \int_{0}^\infty \frac 1{1+x^2} = \frac \pi 2$ </p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> ll mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll n,i,a[<span class="number">1005</span>],j,p2,ans,sum;</span><br><span class="line"><span class="function">ll <span class="title">pow</span><span class="params">(ll a,ll b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ll ans=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(b)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span>(b&amp;<span class="number">1</span>)ans=ans*a%mod;</span><br><span class="line">        a=a*a%mod;</span><br><span class="line">        b&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    p2=<span class="built_in">pow</span>(<span class="number">2L</span>L,mod<span class="number">-2</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n)!=EOF)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            sum=<span class="built_in">pow</span>(a[i],mod<span class="number">-2L</span>L);</span><br><span class="line">            <span class="keyword">for</span>(j=<span class="number">1</span>;j&lt;=n;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(j==i)<span class="keyword">continue</span>;</span><br><span class="line">                sum=sum*<span class="built_in">pow</span>(((a[i]*a[i]-a[j]*a[j])%mod+mod)%mod,mod<span class="number">-2L</span>L)%mod;</span><br><span class="line">            &#125;</span><br><span class="line">            ans=(ans+sum)%mod;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(n%<span class="number">2</span>==<span class="number">0</span>)ans=(<span class="number">2L</span>L*mod-ans)%mod;</span><br><span class="line">        ans=ans*p2%mod;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h2><blockquote><p><em>Upsolved by YangDavid (+)</em></p></blockquote><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>把 a 数组每个数扩大 $m$ 倍，从大到小排个序，我们相当于有 $m$ 次给其中一个数 -1 的机会。为了最小化答案，显然应当依次把 $a_1$ 削到 $a_2$ 那么小，然后把 $a_1,a_2$ 一起削到 $a_3$ 那么小，然后把 $a_1,a_2,a_3$ 一起削到 $a_4$ 那么小，依次类推就可以了。</p><p>如果中间削到第 $i$ 个数时削不动了，无法将 $a_1,\ldots,a_i$ 削至下一个数，那么就保持 $a_1,\ldots,a_i$ 相等的情况下尽量把它们削小即可。 </p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年07月19日 星期五 22时25分35秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">555555</span>, INF = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">ll n, m, a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;m)) &#123;</span><br><span class="line">        rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;a[i]);</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>, greater&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">        a[n + <span class="number">1</span>] = -INF;</span><br><span class="line">        __int128 lf = m, ans = <span class="number">0</span>, nu, de;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n + <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(lf &gt; (i<span class="number">-1</span>) * (a[i<span class="number">-1</span>]-a[i]))</span><br><span class="line">                lf -= (i<span class="number">-1</span>) * (a[i<span class="number">-1</span>]-a[i]);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                nu = a[i<span class="number">-1</span>]*(i<span class="number">-1</span>) - lf, de = i - <span class="number">1</span>;</span><br><span class="line">                nu *= nu;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &lt;= n; ++j)</span><br><span class="line">                    ans += a[j] * a[j];</span><br><span class="line">                nu += ans * de;</span><br><span class="line">                de *= m * m;</span><br><span class="line">                ll d = __gcd(nu, de);</span><br><span class="line">                nu /= d, de /= d;</span><br><span class="line">                <span class="keyword">if</span>(de == <span class="number">1</span>) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, (ll)nu);</span><br><span class="line">                <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%lld/%lld\n"</span>, (ll)nu, (ll)de);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="补充知识：拉格朗日乘数法及其拓展、KKT条件"><a href="#补充知识：拉格朗日乘数法及其拓展、KKT条件" class="headerlink" title="补充知识：拉格朗日乘数法及其拓展、KKT条件"></a>补充知识：拉格朗日乘数法及其拓展、KKT条件</h3><div><div class="fold_hider"><div class="close hider_title">点击这里展开补充知识</div></div><div class="fold"><p>题解中只简单提到拉格朗日乘数法，并没有展开阐述。虽然这道题完全可以不用拉格朗日乘数法（见下面我的题解），但是上这种方法不止在算法竞赛，在数学分析、最优化理论、机器学习等诸多领域都有着重要的价值。推荐知乎上的两篇文章（<a href="https://zhuanlan.zhihu.com/p/39354973" target="_blank" rel="noopener">文章1</a>、<a href="https://zhuanlan.zhihu.com/p/44006237" target="_blank" rel="noopener">文章2</a>），CSDN上<a href="https://blog.csdn.net/LoseInVain/article/details/78624888" target="_blank" rel="noopener">这篇博客</a>，以及<a href="https://en.wikipedia.org/wiki/Karush%E2%80%93Kuhn%E2%80%93Tucker_conditions" target="_blank" rel="noopener">Wikipedia</a>，下面做一个简要总结：</p><p>拉格朗日乘数法用于解决多元<strong>条件</strong>极值问题，即：<br>$$<br>\text {求 } \min _{\vec x} f(\vec x)  \text{  ，其中要求满足 } \forall i,  h_i(\vec x) = 0<br>$$<br>方法是定义拉格朗日函数 $\displaystyle L(\vec x, \vec \lambda) = f(\vec x) + \sum_{i} \lambda_i h_i(\vec x)$ 。如果 $\vec{x^\ast}$ 是条件极值点，那么 $(\vec {x^{\ast}}, \vec {\lambda^{\ast}})$ 一定是拉格朗日函数的驻点，即 $\nabla L(\vec {x^{\ast}}, \vec {\lambda^{\ast}}) = 0$。</p><p>一种证明的思路是从每个不考虑条件的极值点出发，这里不妨假设是最小值，考虑高度 $d$ 值逐渐递增的一簇等高线 $f_d = \{\vec x \mid f(\vec x)=d\}$ 的变化趋势（可以脑补一下声波的传播）。当等高线运动过程中恰好与 $h$ 相切时，碰到的一定就是条件极值。相切即法向量共线，使用梯度的定义即可得到上面的条件了。因此解方程 $\nabla L(\vec {x^{\ast}}, \vec {\lambda^{*}}) = 0$ 可以得到所有可能的极值点，再加以验证即可。需要补充的一点是，如果初始的极值点就在条件的曲线上，那么无需考虑等高线，这时对应的就是 $\lambda=0$ 的情况。</p><p>可是很多情况下给出的条件并不是相等，而是不等关系。即：</p><blockquote><p>最优化 $f(\vec x)$ ，满足：$g_i (\vec x) \leq 0,h_i(\vec x) = 0$ </p></blockquote><p><img src="lag.png" alt></p><p>不妨定义拉格朗日函数为<br>$$<br>L(\vec x, \mu, \lambda) = f(\vec x) + \sum_i \mu_i g_i(\vec x) + \sum_i \lambda_i h_i(\vec x)<br>$$<br>仍然考虑上面的思路，考虑没有约束条件下的极值点：</p><ul><li>如果极值点在可行区域之内，那么很好，这个极值点同样是带约束的极值点，只需满足 $\nabla f(\vec x) = 0$ 即可，此时显然 $\mu = \lambda = 0$。</li><li>如果极值点（不妨设是最小值）不在可行区域之内，同样考虑上述的等高线传播过程，仅可在边界处产生极值，即 $g_i(\vec x) = 0$。$x^\ast$ 处等高线传播方向（即 $f$ 的梯度）是朝着阴影方向，因为这个方向使得函数值上升最快；而根据 $g$ 的分布，其梯度是朝着空白方向。因此必有正常数 $\mu$，使得 $\nabla f(\vec x) = -\mu \nabla g(\vec x)$ 。</li></ul><p>综合上面的，即可得到下面四个 KKT 条件：</p><ul><li><p>驻点性质：（和一般拉格朗日乘数类似）</p><p>最大化问题：$\displaystyle  \nabla f(x^{\ast})=\sum _{i=1}^{m}\mu _{i}\nabla g_{i}(x^{\ast})+\sum _{j=1}^{\ell }\lambda _{j}\nabla h_{j}(x^{\ast}),$ </p><p>最小化问题：$ \displaystyle -\nabla f(x^{\ast})=\sum _{i=1}^{m}\mu _{i}\nabla g_{i}(x^{\ast})+\sum _{j=1}^{\ell }\lambda _{j}\nabla h_{j}(x^{\ast}),$ </p></li><li><p>主要可行性：（题目要求）</p></li></ul><p>$$<br>g_i(x^\ast) \leq 0\\<br>h_j(x^\ast) = 0<br>$$</p><ul><li>对偶可行性：$\mu_i \geq 0$<br>（这个条件就类似与上面推出的“必有正常数 $\mu$，使得 $\nabla f(\vec x) = -\mu \nabla g(\vec x)$ ”）</li><li>互补松弛： $\mu_i g_i (x^\ast) = 0$ （就是上面分别讨论的两种情况）</li></ul></div></div><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><blockquote><p><em>Upsolved by hdmmblz</em></p></blockquote><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><blockquote><p><em>Solved by YangDavid, hdmmblz</em></p></blockquote><p>思博 dp，和卡特兰数也有关系。</p><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2><blockquote><p><em>Solved by YangDavid (+2)</em></p></blockquote><p>答案是面积的 22 倍。可以考虑连出三条中线，然后考虑积分。</p><h2 id="Prob-G"><a href="#Prob-G" class="headerlink" title="Prob G."></a>Prob G.</h2><blockquote><p><em>Orally Upsolved</em></p></blockquote><h2 id="Prob-H"><a href="#Prob-H" class="headerlink" title="Prob H."></a>Prob H.</h2><blockquote><p><em>Upsolved by hdmmblz</em></p></blockquote><p>等价于每个数所在的异或和为 0 的集合数目之和。如果一个数可以用剩下 $n-1$ 个数异或表示出来，那么它的贡献就是 $2^{n-r-1}$ 。</p><h2 id="Prob-I"><a href="#Prob-I" class="headerlink" title="Prob I."></a>Prob I.</h2><blockquote><p><em>Upsolved by hdmmblz</em></p></blockquote><h2 id="Prob-J"><a href="#Prob-J" class="headerlink" title="Prob J."></a>Prob J.</h2><blockquote><p><em>Solved by hdmmblz (+2)</em></p></blockquote><p>签到题。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font size=&quot;10&quot; face=&quot;courier new, monospace&quot;&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;C&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;F&lt;/span&gt;&lt;span style=&quot;color:#000000;&quot;&gt;G&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;H&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;J&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;题目质量很高，为叉姐点赞！&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="nowcoder" scheme="http://yoursite.com/tags/nowcoder/"/>
    
  </entry>
  
  <entry>
    <title>AGC题目选做</title>
    <link href="http://yoursite.com/2019/07/12/AGC%E9%A2%98%E7%9B%AE%E9%80%89%E5%81%9A/"/>
    <id>http://yoursite.com/2019/07/12/AGC题目选做/</id>
    <published>2019-07-12T01:50:10.000Z</published>
    <updated>2019-07-22T17:15:03.382Z</updated>
    
    <content type="html"><![CDATA[<p>开了个大坑，看看什么时候能填完。</p><a id="more"></a><h1 id="AGC001"><a href="#AGC001" class="headerlink" title="AGC001"></a>AGC001</h1><p>[2019.07.12]</p><font size="10" face="courier new, monospace"><span style="color:#00ff00;">A</span><span style="color:#00ff00;">B</span><span style="color:#00ff00;">C</span><span style="color:#00ff00;">D</span><span style="color:#ee82ee;">E</span><span style="color:#ee82ee;">F</span></font><h1 id="AGC002"><a href="#AGC002" class="headerlink" title="AGC002"></a>AGC002</h1><p>[2019.07.14]</p><font size="10" face="courier new, monospace"><span style="color:#00ff00;">A</span><span style="color:#00ff00;">B</span><span style="color:#00ff00;">C</span><span style="color:#000000;">D</span><span style="color:#000000;">E</span><span style="color:#000000;">F</span></font><h1 id="AGC035"><a href="#AGC035" class="headerlink" title="AGC035"></a>AGC035</h1><p>[2019.07.14]</p><p><b><font size="10" face="courier new, monospace"><span style="color:#00ff00;">A</span><span style="color:#00ff00;">B</span><span style="color:#ee82ee;">C</span><span style="color:#ee82ee;">D</span><span style="color:#000000;">E</span><span style="color:#ee82ee;">F</span></font></b></p><h2 id="D-Add-And-Remove-DP-DFS"><a href="#D-Add-And-Remove-DP-DFS" class="headerlink" title="D. Add And Remove (DP / DFS)"></a>D. Add And Remove (DP / DFS)</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>有一个长度为 $N$ 的序列，你每次可以选取其中三个相邻元素 $x_{p-1},x_p,x_{p+1}$，将 $x_{p-1},x_{p+1}$ 都加上 $x_p$ ，然后把 $x_p$ 删去。问最后剩下的两个数之和的最小值是多少。</p><p>数据范围：$2\leq N\leq18,0\leq x_i\leq 10^9$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>第一反应：$N\leq 18$ ，这个数据范围太诡异了！这么小范围的问题很有可能用一些稍加技巧的指数级递归就可以解决了，比如说 <a href="https://lydsy.com/JudgeOnline/problem.php?id=1024" target="_blank" rel="noopener">BZOJ1024</a> 这道题。</p><p>对应到这道题上，直接暴力会是 $\Theta(N!)$ 的复杂度，是无法通过的。这就需要我们的一些观察了。我们按照相反的方向考虑问题，不考虑删除数，而考虑添加数的过程。即一开始有数列中只有两个数，我们不断往数列中相邻两数之间添加新的数。可是如何计算和的贡献呢？我们引入权重的概念。开始两个数的权重均为 1，而假如我在权重分别为 $w_i,w_{i+1}$ 的两数 $x_i,x_{i+1}$ 之间插入一个新的数 $y$ ，那么和的贡献就会增加 $(w_i + w_{i+1}) \cdot y$ ，而 $y$ 的权重则会是 $w_i+w_{i+1}$ 。</p><p>由此我们可以设计一个区间 dp。令 <code>dp[l][r][wl][wr]</code> 表示向 $x_{l-1},x_{r+1}$ 之间填充 $x_l,\ldots,x_r$ 这些数，并且 $x_{l-1}$ 的权重是 $wl$ ，$x_{r+1}$ 的权重是 $wr$ ，此时的最小代价。那么我们可以通过枚举中间最先生成的数从而实现递推。具体地：<br>$$<br>dp[l][r][wl][wr] = \min_{l \leq m \leq r} dp[l][m-1][wl][wl+wr] + dp[m+1][r][wl+wr][wr] + x_m \cdots (wl+wr)<br>$$<br>分析可知这是一个 $O(2^n \cdot poly(n))$ 的做法，需要小心实现。但事实上我们直接暴力递归，不加记忆化即可通过此题，因为这么做是 $O(3^n)$ 的。分析如下：</p><p>设区间长度为 $k$ 时的复杂度为 $T(k)$ ，则：<br>$$<br>\begin{aligned}<br>T(n) &amp;= 1 + 2\cdot (T(n-1)+T(n-2)+\ldots+T(1)) \\<br>&amp;= O(3^{n-1})<br>\end{aligned}<br>$$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年07月15日 星期一 11时24分59秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line"><span class="keyword">int</span> n, a[<span class="number">500</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(ll&amp; x, ll y)</span> </span>&#123; x = min(x, y); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">solve</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r, ll wl, ll wr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll ret = INFL;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        upd(ret, solve(l,i<span class="number">-1</span>,wl,wr+wl)+solve(i+<span class="number">1</span>, r,wl+wr,wr)+(wl+wr)*a[i]);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, solve(<span class="number">2</span>, n - <span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>) + a[<span class="number">1</span>] + a[n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="F-Two-Histograms-思维，容斥原理"><a href="#F-Two-Histograms-思维，容斥原理" class="headerlink" title="F. Two Histograms (思维，容斥原理)"></a>F. Two Histograms (思维，容斥原理)</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>你有一个 $N$ 行、$M$ 列的、每个格子都填写着 0 的表格。你进行了下面的操作：</p><ul><li>对于每一行 $i$ ，选定自然数 $r_i$ （$0\leq r_i\leq M$），将这一行最左边的 $r_i$ 个格子中的数 +1.</li><li>对于每一列 $i$ ，选定自然数 $c_i$ （$0\leq c_i\leq N$），将这一列最上边的 $c_i$ 个格子中的数 +1.</li></ul><p>这样，根据你选定的 $r_1,r_2,\ldots,r_N,c_1,c_2,\ldots,c_M$ ，你就得到了一个每个格子要么是 0，要么是 1，要么是 2 的一个最终的表格。问本质不同的最终表格有多少种。两个表格本质不同当且进当它们有一个对应格子中的数不同。</p><p>数据范围：$1\leq N,M \leq 5\cdot 10^5$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>如果对 $r$ 和 $c$ 不加限制，考虑什么时候会出现数重复的现象。不妨假设我们在第 $i$ 行第 $r_i$ 列的位置放一个红色棋子，而在第 $i$ 列第 $c_i$ 行的位置放一个白色棋子。那么如果出现了白色棋子正下方刚好有一个红色棋子的情况时，我们就可以将红色棋子向左移动一格，而将白色棋子下移一格，而不改变任何其它格子。（如下图所示）</p><p><img src="AGC035F.png" alt></p><p>正是这种情况导致我们数重复了，可以发现也仅仅是这一种情况导致我们数重复，每一种状态，按照从第 $M$ 列到第 1 列逐列消除这种情况后，所得到的一定是合法、不重复的状态。因此我们仅对没有出现白色棋子正下方刚好有一个红色棋子的情况进行计数。</p><p>可是好像还是不太容易处理。仔细分析出现白色棋子正下方刚好有一个红色棋子的情况意味着什么。这就代表存在$(i,j)$ 使得 $r_i + 1 = j$ 且 $c_j = i$ 。因此选定 $i,j$ 就会决定 $r_i$ 与 $c_j$ 。有了这个发现，我们就可以考虑容斥原理了。有 $k$ 对行列不符合要求的情况数变得十分好求，只需要把这 $k$ 对选出来，然后剩下的行列随便填：<br>$$<br>f(k) = \binom Nk \binom Mk k! \cdot (M+1)^{N-k} \cdot (N+1)^{M-k}<br>$$<br>因此由常规的容斥原理，有：<br>$$<br>ans = \sum_{k=0}^{\min(N,M)} (-1)^k f(k)<br>$$<br>这样就可以在 $O(N\log MOD)$ 的时间复杂度内解决这个问题了。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年07月15日 星期一 17时10分20秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">555555</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> x + MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) <span class="keyword">return</span> x - MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> fac[maxn], ifac[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n, <span class="keyword">int</span> m)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n &lt; m) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> muln(fac[n], muln(ifac[m], ifac[n - m]));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = ifac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">555000</span>; ++i) &#123;</span><br><span class="line">        fac[i] = muln(fac[i - <span class="number">1</span>], i);</span><br><span class="line">        ifac[i] = qpow(fac[i], MOD - <span class="number">2</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, m, Min, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    Min = min(n, m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= Min; ++k) &#123;</span><br><span class="line">        ans = mo(ans + ((k&amp;<span class="number">1</span>)?<span class="number">-1</span>:<span class="number">1</span>) * muln(C(n,k),muln(C(m,k),muln(fac[k],muln(qpow(m+<span class="number">1</span>,n-k),qpow(n+<span class="number">1</span>,m-k))))));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;开了个大坑，看看什么时候能填完。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>整数拆分知识集锦</title>
    <link href="http://yoursite.com/2019/07/11/%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86%E7%9F%A5%E8%AF%86%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2019/07/11/整数拆分知识集锦/</id>
    <published>2019-07-11T07:38:09.000Z</published>
    <updated>2019-07-11T10:02:05.460Z</updated>
    
    <content type="html"><![CDATA[<p>整数拆分也算是 OI 中比较常见的知识了，可是很多人也仅仅将其理解为五边形数的一个公式以及一个 30 行的代码模板。可是作为数学爱好者，怎么能仅仅止步于模板呢？下面我们就深入其中的数学海洋，力求较为严谨地理解整数拆分理论，体会其中数学的精妙。</p><a id="more"></a><h1 id="有关整数拆分"><a href="#有关整数拆分" class="headerlink" title="有关整数拆分"></a>有关整数拆分</h1><p>如果出现下面的数列，就要保持警惕了！！！</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">`1, 1, 2, 3, 5, 7, 11, 15, 22, 30, 42, 56, 77, 101, 135, 176, 231, 297, 385, 490, 627, 792, 1002, 1255, 1575, 1958, 2436, 3010, 3718, 4565, 5604, 6842, 8349, 10143, 12310, 14883, 17977, 21637, 26015, 31185, 37338, 44583, 53174, 63261, 75175, 89134, 105558, 124754, 147273, 173525`</span><br></pre></td></tr></table></figure><p>首先，我们来明确问题究竟是什么。</p><p><strong>定义1</strong> 给定 $n$，求不同数组 $\displaystyle (a_{1},a_{2},…,a_{k})$ 的数目，符合下面的条件：</p><ol><li>${\displaystyle a_{1}+a_{2}+…+a_{k}=n}$ （${\displaystyle k}$ 的大小不定）</li><li>${\displaystyle a_{1}\geq a_{2}\geq …\geq a_{k}&gt;0}$</li><li>其他附加条件（例如限定“k是偶数”，或“${\displaystyle a_{i}}$ 不是 1 就是 2 ”等）</li></ol><p><strong>分割函数</strong> $p(n)$ 是求符合以上第一、二个条件的数组数目。为了方便起见，我们首先讨论的是忽略条件 3 的情况。</p><p>引理1：<br>$$<br>\varphi(x) = \prod_{i=1}^\infty (1-x^i)<br>$$<br>引理2：设 $f(x) = \text{(将}x\text{分成偶数个不同正整数的方法数)} - \text{(将}x\text{分成奇数个不同正整数的方法数)}$ ，则 $f$ 的生成函数 $F(x)$ 就是：<br>$$<br>F(x) = \prod_{i=1}^\infty (1-x^i)<br>$$<br>定理1：<br>$$<br>\varphi(x) = \prod _{i=1}^\infty (1-x^i) = \sum_{k=-\infty}^\infty (-1)^k x^{\frac{k(3k-1)}{2}}<br>$$<br>证明：根据引理2 的组合意义进行证明。考虑划分的 Ferrers 图，我们构造一种配对方案，将大部分 Ferrers 图两两配对（数学上又称这种方法为构造一个 involution，即满足 $f(f(x)) = x$  的函数）。详见 wiki (<a href="https://en.wikipedia.org/wiki/Pentagonal_number_theorem)。" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Pentagonal_number_theorem)。</a></p><p>一些性质：</p><ol><li>分拆成若干奇数的方案数 = 分拆成若干互不相同的数的方案数</li><li>Ferrers 图的转置通常可以构造出新的分拆，成为分拆的共轭。共轭为自身的分拆如何计数呢？沿着主对角线看去，一层层拆开，那么共轭为自身的分拆个数就是拆分成互不相同的奇数的方案数，两者一一对应。</li></ol><p>另一个有趣发现：因数和函数 $\sigma(n)$ 也可以和拆分数一样递推，只是规定考虑 $\sigma(n)$ 时，如果后面的项里有 $\sigma(0)$ ，就视为 $n$ ，而不是 1 。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;整数拆分也算是 OI 中比较常见的知识了，可是很多人也仅仅将其理解为五边形数的一个公式以及一个 30 行的代码模板。可是作为数学爱好者，怎么能仅仅止步于模板呢？下面我们就深入其中的数学海洋，力求较为严谨地理解整数拆分理论，体会其中数学的精妙。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>AC自动机学习笔记</title>
    <link href="http://yoursite.com/2019/07/08/AC%E8%87%AA%E5%8A%A8%E6%9C%BA%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/07/08/AC自动机学习笔记/</id>
    <published>2019-07-08T07:14:23.000Z</published>
    <updated>2019-07-08T16:25:39.604Z</updated>
    
    <content type="html"><![CDATA[<p>是时候补全一下自己古怪的知识树了，我之前只会一些后缀自动机（然而现在已经忘光了），AC 自动机早有耳闻，可是从来没有认真学过，自己动手实现。</p><p>AC 自动机主要用于多模式串匹配，其主要思路是将所有模板串建出一个状态转移图，建立 fail 指针。关于其内涵的讲解这里吹爆我校 WF 学长 zbh 的 PPT，这篇博客以实现的注意事项、例题及应用为主。</p><a id="more"></a><h1 id="模板题"><a href="#模板题" class="headerlink" title="模板题"></a>模板题</h1><p>洛谷上有三道模板题，这里只选择质量相对较高的 [Luogu5357] 进行讲解。（另两道是P3808与P3796，3808是卡空间的垃圾题。）</p><h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>给你一个文本串 $S$ 和 $n$ 个模式串 $T_{1..n}$，请你分别求出每个模式串 $T_i$ 在 $S$ 中出现的次数。</p><p>数据范围：$1\leq n \leq 2\times 10^5, \sum|T_i| \leq 2\times 10^5, |S|\leq 2\times 10^6$</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>一个重要性质：AC 自动机的 fail 指针是组成一棵树的，这棵树从某节点到根节点的链对应的是这个节点代表的字符串由长到短的所有在 trie 树里出现过的后缀。</p><p>因此，如果将文本串途径的节点的 cnt 都+1，每个字符串出现的次数就是它对应节点所在子树中所有 cnt 之和。这样，我们把 fail 树建出来，跑一遍文本串，再 dfs 一遍 fail 树即可得到每个模式串出现的次数。</p><p>这道题需要注意模式串可以相同！！！</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><p>实现 AC 自动机也有不少小技巧，这里我将我的一些习惯列举如下：</p><ul><li>首先是结构体的定义：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>, LETTER = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> go[LETTER], fail, cnt;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">&#125; trie[maxn];</span><br></pre></td></tr></table></figure><ul><li>规定 0 号节点为特殊节点，其所有出边（即 go 数组）都为 1，而 1 号节点为根节点，它是插入、查询等操作的初始节点。建造 AC 自动机之前，必须进行初始化！！！代码如下：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i)</span><br><span class="line">        trie[<span class="number">0</span>].go[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>先按照 trie 树插入之后，按照 BFS 的顺序建造 AC 自动机。我们同时将 fail 指针和 go 数组求出，并构建出 fail 树。比较重要的是下面一段语句：</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span>&amp; cur = trie[f].go[i];</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                trie[cur].fail = trie[ trie[f].fail ].go[i];</span><br><span class="line">                sons[ trie[trie[f].fail].go[i] ].push_back(cur);</span><br><span class="line">                q.push(cur);</span><br><span class="line">            &#125; <span class="keyword">else</span> cur = trie[ trie[f].fail ].go[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>完整的代码如下所示：</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123; <span class="keyword">return</span> ch - <span class="string">'a'</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>, LETTER = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> go[LETTER], fail, cnt;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">&#125; trie[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i)</span><br><span class="line">        trie[<span class="number">0</span>].go[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p].go[idx(c)])</span><br><span class="line">            trie[p].go[idx(c)] = ++tot;</span><br><span class="line">        p = trie[p].go[idx(c)];</span><br><span class="line">    &#125;</span><br><span class="line">    trie[p].num.push_back(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        p = trie[p].go[c - <span class="string">'a'</span>];</span><br><span class="line">        trie[p].cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span>&amp; cur = trie[f].go[i];</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                trie[cur].fail = trie[ trie[f].fail ].go[i];</span><br><span class="line">                sons[ trie[trie[f].fail].go[i] ].push_back(cur);</span><br><span class="line">                q.push(cur);</span><br><span class="line">            &#125; <span class="keyword">else</span> cur = trie[ trie[f].fail ].go[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> t;</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : sons[v]) &#123;</span><br><span class="line">        dfs(g);</span><br><span class="line">        trie[v].cnt += trie[g].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : trie[v].num)</span><br><span class="line">        ans[g] = trie[v].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">        insert(t, i);</span><br><span class="line">    &#125; </span><br><span class="line">    build_ac();</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">    run(t);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    rep(i, n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="初级例题"><a href="#初级例题" class="headerlink" title="初级例题"></a>初级例题</h1><h2 id="BZOJ3172-TJOI2013-单词"><a href="#BZOJ3172-TJOI2013-单词" class="headerlink" title="[BZOJ3172] TJOI2013 单词"></a>[BZOJ3172] TJOI2013 单词</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>某人读论文，一篇论文是由许多单词组成。但他发现一个单词会在论文中出现很多次，现在想知道每个单词分别在论文中出现多少次。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>和上面的模板题做法一样。所有单词建立 AC 自动机，然后用和模板题一样的做法，再把每个单词视为文本串在 AC 自动机上跑，同时将途径节点 cnt 值+1。最后 dfs 一遍 fail 树即得答案。</p><p>时间复杂度 $\mathcal O(n|\Sigma|)$</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">idx</span><span class="params">(<span class="keyword">char</span> ch)</span> </span>&#123; <span class="keyword">return</span> ch - <span class="string">'a'</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1022222</span>, LETTER = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> go[LETTER], fail, cnt;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; num;</span><br><span class="line">&#125; trie[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i)</span><br><span class="line">        trie[<span class="number">0</span>].go[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s, <span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p].go[idx(c)])</span><br><span class="line">            trie[p].go[idx(c)] = ++tot;</span><br><span class="line">        p = trie[p].go[idx(c)];</span><br><span class="line">    &#125;</span><br><span class="line">    trie[p].num.push_back(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">(<span class="keyword">const</span> <span class="built_in">string</span>&amp; s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> c : s) &#123;</span><br><span class="line">        p = trie[p].go[c - <span class="string">'a'</span>];</span><br><span class="line">        trie[p].cnt ++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span>&amp; cur = trie[f].go[i];</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                trie[cur].fail = trie[ trie[f].fail ].go[i];</span><br><span class="line">                sons[ trie[trie[f].fail].go[i] ].push_back(cur);</span><br><span class="line">                q.push(cur);</span><br><span class="line">            &#125; <span class="keyword">else</span> cur = trie[ trie[f].fail ].go[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> t[<span class="number">222</span>];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : sons[v]) &#123;</span><br><span class="line">        dfs(g);</span><br><span class="line">        trie[v].cnt += trie[g].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : trie[v].num)</span><br><span class="line">        ans[g] = trie[v].cnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line">        insert(t[i], i);</span><br><span class="line">    &#125; </span><br><span class="line">    build_ac();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">    run(t[i]);</span><br><span class="line">    dfs(<span class="number">1</span>);</span><br><span class="line">    rep(i, n) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="BZOJ2938-POI2000-病毒"><a href="#BZOJ2938-POI2000-病毒" class="headerlink" title="[BZOJ2938] POI2000 病毒"></a>[BZOJ2938] POI2000 病毒</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>二进制病毒审查委员会最近发现了如下的规律：某些确定的二进制串是病毒的代码。如果某段代码中不存在任何一段病毒代码，那么我们就称这段代码是安全的。现在委员会已经找出了所有的病毒代码段，试问，是否存在一个无限长的安全的二进制代码。</p><p>示例：</p><p>例如如果{011, 11, 00000}为病毒代码段，那么一个可能的无限长安全代码就是010101…。如果{01, 11, 000000}为病毒代码段，那么就不存在一个无限长的安全代码。</p><p>任务：</p><p>请写一个程序：</p><ul><li><p>读入病毒代码；</p></li><li><p>判断是否存在一个无限长的安全代码；</p></li><li><p>将结果输出</p></li></ul><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>建出 AC 自动机，那么相当于指定一些节点为禁止节点，问 AC 自动机的转移图中是否存在从根节点可以到达的环。事实上由于 trie 树的性质，从根节点可以到达任何节点，因此使用拓扑排序判断是否是 DAG 即可，也可以通过 DFS 找环来判断。</p><p>这里有一个坑点，禁止位置如何确定？一个想当然的想法就是插入 trie 树时字符末尾位置就是禁止位置，可是这样是不够的。如果从某个节点通过跳 fail 边可以到达禁止位置，那么这个节点也是禁止节点！因此可以建出 fail 树 DFS ，也可以递推最近的禁止位置，来确定究竟哪些节点是禁止节点。</p><p>时间复杂度 $\mathcal O(\sum |s|)$ 。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">33333</span>, LETTER = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> fail, go[LETTER], num;</span><br><span class="line">&#125; trie[maxn];</span><br><span class="line"><span class="keyword">int</span> tot;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i)</span><br><span class="line">        trie[<span class="number">0</span>].go[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">char</span> *s, <span class="keyword">int</span> len)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!trie[p].go[s[i] - <span class="string">'0'</span>])</span><br><span class="line">            trie[p].go[s[i] - <span class="string">'0'</span>] = ++tot;</span><br><span class="line">        p = trie[p].go[s[i] - <span class="string">'0'</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    trie[p].num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;cur = trie[f].go[i];</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                q.push(cur);</span><br><span class="line">                trie[cur].fail = trie[ trie[f].fail ].go[i];</span><br><span class="line">                sons[ trie[trie[f].fail].go[i] ].push_back(cur);</span><br><span class="line">            &#125; <span class="keyword">else</span> cur = trie[ trie[f].fail ].go[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">bool</span> ok)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(trie[v].num) ok = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)sons[v].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> g = sons[v][i];</span><br><span class="line">        trie[g].num += ok;</span><br><span class="line">        dfs(g, ok);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, indeg[maxn];</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">        insert(s, <span class="built_in">strlen</span>(s));</span><br><span class="line">    &#125;</span><br><span class="line">    build_ac();</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; LETTER; ++j) &#123;</span><br><span class="line">            <span class="keyword">int</span> to = trie[i].go[j];</span><br><span class="line">            <span class="keyword">if</span>(trie[to].num || trie[i].num) <span class="keyword">continue</span>;</span><br><span class="line">            G[i].push_back(to);</span><br><span class="line">            indeg[to]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!trie[i].num) &#123;</span><br><span class="line">            <span class="keyword">if</span>(indeg[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">            <span class="keyword">else</span> cnt++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)G[f].size(); ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> t = G[f][i];</span><br><span class="line">            <span class="keyword">if</span>(--indeg[t] == <span class="number">0</span>) &#123;</span><br><span class="line">                q.push(t);</span><br><span class="line">                cnt--;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">puts</span>(cnt == <span class="number">0</span> ? <span class="string">"NIE"</span> : <span class="string">"TAK"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="进阶练习"><a href="#进阶练习" class="headerlink" title="进阶练习"></a>进阶练习</h1><h3 id="BZOJ2434-NOI2011-阿狸的打字机"><a href="#BZOJ2434-NOI2011-阿狸的打字机" class="headerlink" title="[BZOJ2434] NOI2011 阿狸的打字机"></a>[BZOJ2434] NOI2011 阿狸的打字机</h3><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>阿狸喜欢收藏各种稀奇古怪的东西，最近他淘到一台老式的打字机。打字机上只有28个按键，分别印有26个小写英文字母和’B’、’P’两个字母。</p><p>经阿狸研究发现，这个打字机是这样工作的：</p><ul><li><p>输入小写字母，打字机的一个凹槽中会加入这个字母(这个字母加在凹槽的最后)。</p></li><li><p>按一下印有’B’的按键，打字机凹槽中最后一个字母会消失。</p></li><li><p>按一下印有’P’的按键，打字机会在纸上打印出凹槽中现有的所有字母并换行，但凹槽中的字母不会消失。</p></li></ul><p>例如，阿狸输入aPaPBbP，纸上被打印的字符如下：</p><p>a</p><p>aa</p><p>ab</p><p>我们把纸上打印出来的字符串从1开始顺序编号，一直到n。打字机有一个非常有趣的功能，在打字机中暗藏一个带数字的小键盘，在小键盘上输入两个数(x,y)（其中1≤x,y≤n），打字机会显示第x个打印的字符串在第y个打印的字符串中出现了多少次。</p><p>阿狸发现了这个功能以后很兴奋，他想写个程序完成同样的功能，你能帮助他么？</p><p><strong>简化题意</strong> 给定一棵 trie 树，每次给出两个节点 (x, y) ，询问 x 所代表的字符串 $s_x$ 在 y 所代表的字符串 $s_y$ 中出现了几次。</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>考虑将 trie 树补全为 AC 自动机，每个询问相当于 trie 树上从根节点到 y 节点的链上有多少节点可以通过跳 fail 边跳到 x 节点，即相当于 trie 树上从根节点到 y 节点的链上有多少节点在 fail 树中位于 x 节点的子树中。</p><p>我们先把询问离线下来，然后把 fail 树按 DFS 序建立树状数组，然后 DFS trie 树，每进入一个节点，就在树状数组处这个节点位置+1，每离开一个节点就-1。那么树状数组中有值的位置就是 trie 树中从根节点到 y 节点的链上的节点，从而可以直接处理 y 为当前节点的询问，即进行 fail 树的子树询问。由 DFS 序的性质，子树询问就是树状数组区间和，因此问题得到了解决。总时间复杂度 $\mathcal O(n|\Sigma| + m\log n)$</p><p>这里 trie 树代表的字符串是前缀，而 fail 树则是后缀，两者相互补充，即得到子串。这种思想值得体会。</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><p>绝对是今日代码能力之顶峰，118 行 一气呵成，稍加调试，连写带调 30 min 直接 1A。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年07月08日 星期一 23时25分47秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MAXN = <span class="number">111111</span>, LETTER = <span class="number">26</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> go[LETTER], fail, num, fa, empty;</span><br><span class="line">&#125; trie[MAXN];</span><br><span class="line"><span class="keyword">int</span> tot, ans[MAXN], idx[MAXN], rk, Q;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; qry[MAXN]; <span class="comment">// &#123;y, no.&#125;</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    tot = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i)</span><br><span class="line">        trie[<span class="number">0</span>].go[i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> s[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">    <span class="keyword">int</span> len = <span class="built_in">strlen</span>(s), p = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(s[i] == <span class="string">'B'</span>) p = trie[p].fa;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'P'</span>) idx[++rk] = p;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(!trie[p].go[s[i] - <span class="string">'a'</span>]) &#123;</span><br><span class="line">                trie[p].go[s[i] - <span class="string">'a'</span>] = ++tot;</span><br><span class="line">                trie[tot].fa = p;</span><br><span class="line">            &#125;</span><br><span class="line">            p = trie[p].go[s[i] - <span class="string">'a'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; sons[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build_ac</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i) &#123;</span><br><span class="line">            <span class="keyword">int</span> &amp;cur = trie[f].go[i];</span><br><span class="line">            <span class="keyword">if</span>(cur) &#123;</span><br><span class="line">                q.push(cur);</span><br><span class="line">                trie[cur].fail = trie[ trie[f].fail ].go[i];</span><br><span class="line">                sons[trie[trie[f].fail].go[i]].push_back(cur);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cur = trie[trie[f].fail].go[i];</span><br><span class="line">                trie[f].empty |= (<span class="number">1</span> &lt;&lt; i);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">input</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x, y; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;Q);</span><br><span class="line">    rep(i, Q) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;y, &amp;x);</span><br><span class="line">        qry[idx[x]].push_back(make_pair(idx[y], i));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> tim[MAXN], dfs_clock, sz[MAXN];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs1</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123; <span class="comment">// dfs seq on fail tree</span></span><br><span class="line">    tim[v] = ++dfs_clock, sz[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)sons[v].size(); ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> g = sons[v][i];</span><br><span class="line">        dfs1(g);</span><br><span class="line">        sz[v] += sz[g];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">lowbit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> x &amp; (-x); &#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">BIT</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> c[MAXN];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> p, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; p &lt; MAXN; p += lowbit(p))</span><br><span class="line">            c[p] += v;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">pref</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(; x; x -= lowbit(x))</span><br><span class="line">            ret += c[x];</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123; <span class="keyword">return</span> pref(r) - pref(l - <span class="number">1</span>); &#125;</span><br><span class="line">&#125; bit;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs2</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    bit.add(tim[v], <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; (<span class="keyword">int</span>)qry[v].size(); ++i) &#123;</span><br><span class="line">        pii qr = qry[v][i];</span><br><span class="line">        ans[qr.second] = bit.sum(tim[qr.first], tim[qr.first]+sz[qr.first]<span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; LETTER; ++i) <span class="keyword">if</span>((trie[v].empty &amp; (<span class="number">1</span> &lt;&lt; i)) == <span class="number">0</span>)</span><br><span class="line">        dfs2(trie[v].go[i]);</span><br><span class="line">    bit.add(tim[v], <span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">output</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= Q; ++i)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    init();</span><br><span class="line">    ins();</span><br><span class="line">    build_ac();</span><br><span class="line"></span><br><span class="line">    input();</span><br><span class="line">    dfs1(<span class="number">1</span>);</span><br><span class="line">    dfs2(<span class="number">1</span>);</span><br><span class="line">    output();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;是时候补全一下自己古怪的知识树了，我之前只会一些后缀自动机（然而现在已经忘光了），AC 自动机早有耳闻，可是从来没有认真学过，自己动手实现。&lt;/p&gt;
&lt;p&gt;AC 自动机主要用于多模式串匹配，其主要思路是将所有模板串建出一个状态转移图，建立 fail 指针。关于其内涵的讲解这里吹爆我校 WF 学长 zbh 的 PPT，这篇博客以实现的注意事项、例题及应用为主。&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Opentrains 10455 (GP of China)</title>
    <link href="http://yoursite.com/2019/06/29/Opentrains-10455-GP-of-China/"/>
    <id>http://yoursite.com/2019/06/29/Opentrains-10455-GP-of-China/</id>
    <published>2019-06-29T01:32:08.000Z</published>
    <updated>2019-07-22T17:25:19.367Z</updated>
    
    <content type="html"><![CDATA[<p><b><font size="10" face="courier new, monospace"><span style="color:#00ff00;">A</span>B<span style="color:#ee28ee;">C</span><span style="color:#00ff00;">D</span>E<span style="color:#00ff00;">F</span>GHIJK</font></b></p><a id="more"></a><h1 id="XIX-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-China-Division-1"><a href="#XIX-Open-Cup-named-after-E-V-Pankratiev-Grand-Prix-of-China-Division-1" class="headerlink" title="XIX Open Cup named after E.V. Pankratiev. Grand Prix of China, Division 1."></a>XIX Open Cup named after E.V. Pankratiev. Grand Prix of China, Division 1.</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th><th style="text-align:center">L</th><th style="text-align:center">M</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Template</td><td style="text-align:center"><font color="red">Red</font></td><td style="text-align:center"><font color="blue">blue</font></td><td style="text-align:center"><font color="green">green</font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">$\mathcal{O}$</td><td style="text-align:center"><font color="red">(0)</font></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><ul><li>Solved during contest: <code>0/13</code> </li><li>Upsolved: <code>0/13</code></li><li>Orally upsolved: <code>0/13</code></li><li>Rank: <code>0/0</code></li></ul><!-- More --><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>解题/补题顺序：</p><p>Easy: </p><p>Mid Easy:</p><p>Mid Hard:</p><p>Hard:</p><h2 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-G"><a href="#Prob-G" class="headerlink" title="Prob G."></a>Prob G.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-H"><a href="#Prob-H" class="headerlink" title="Prob H."></a>Prob H.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-I"><a href="#Prob-I" class="headerlink" title="Prob I."></a>Prob I.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-J"><a href="#Prob-J" class="headerlink" title="Prob J."></a>Prob J.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-K"><a href="#Prob-K" class="headerlink" title="Prob K."></a>Prob K.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-L"><a href="#Prob-L" class="headerlink" title="Prob L."></a>Prob L.</h2><blockquote><p><em>Unsolved</em></p></blockquote><h2 id="Prob-M"><a href="#Prob-M" class="headerlink" title="Prob M."></a>Prob M.</h2><blockquote><p><em>Unsolved</em></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font size=&quot;10&quot; face=&quot;courier new, monospace&quot;&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;A&lt;/span&gt;B&lt;span style=&quot;color:#ee28ee;&quot;&gt;C&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;D&lt;/span&gt;E&lt;span style=&quot;color:#00ff00;&quot;&gt;F&lt;/span&gt;GHIJK&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>SEERC 2018 训练记录</title>
    <link href="http://yoursite.com/2019/06/28/SEERC-2018-%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/06/28/SEERC-2018-训练记录/</id>
    <published>2019-06-28T15:33:58.000Z</published>
    <updated>2019-06-30T04:10:50.096Z</updated>
    
    <content type="html"><![CDATA[<font size="10" face="courier new, monospace"><span style="color:#ee82ee">A</span><span style="color:#00ff00;">BC</span><span style="color:#ee82ee;">D</span><span style="color:#00ff00;">E</span><span style="color:#ee82ee;">F</span><span style="color:#00ff00;">G</span><span style="color:#ee82ee">H</span><span style="color:#00ff00;">I</span><span style="color:#ee82ee">J</span>K</font><a id="more"></a><h1 id="SEERC-2018"><a href="#SEERC-2018" class="headerlink" title="SEERC 2018"></a>SEERC 2018</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center"><font color="red">(8)</font></td><td style="text-align:center">2:43</td><td style="text-align:center">0:55</td><td style="text-align:center"><font color="red">(2)</font></td><td style="text-align:center">0:30</td><td style="text-align:center"><font color="red">(2)</font></td><td style="text-align:center">3:26</td><td style="text-align:center"></td><td style="text-align:center">3:09</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="red">*9</font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="red">*4</font></td><td style="text-align:center"><font color="green">+2</font></td><td style="text-align:center"><font color="red"><b>*2</b></font></td><td style="text-align:center"><font color="green">+4</font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="red"><b>*4</b></font></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">7</td><td style="text-align:center">88</td><td style="text-align:center">93</td><td style="text-align:center">6</td><td style="text-align:center">119</td><td style="text-align:center">33</td><td style="text-align:center">15</td><td style="text-align:center">18</td><td style="text-align:center">66</td><td style="text-align:center">15</td><td style="text-align:center">17</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">暴力</td><td style="text-align:center">数学</td><td style="text-align:center">BFS</td><td style="text-align:center"></td><td style="text-align:center">set</td><td style="text-align:center">构造</td><td style="text-align:center">线段树</td><td style="text-align:center">随机</td><td style="text-align:center"></td><td style="text-align:center">最短路</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="red">2639</font></td><td style="text-align:center"><font color="green"><b>1508</b></font></td><td style="text-align:center"><font color="green"><b>2009</b></font></td><td style="text-align:center"><font color="green">1282</font></td><td style="text-align:center"><font color="green">880</font></td><td style="text-align:center"><font color="blue"><b>2328</b></font></td><td style="text-align:center"><font color="blue">1198</font></td><td style="text-align:center"><font color="green"><b>1708</b></font></td><td style="text-align:center"><font color="green">850</font></td><td style="text-align:center"><font color="red"><b>3087</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="green"><b>Easy+</b></font></td><td style="text-align:center"><font color="green"><b>Easy</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue"><b>Mid-</b></font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="blue"><b>Mid+</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green"><b>Easy</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><ul><li>Solved during contest: <code>5/11</code> </li><li>Upsolved: <code>10/11</code></li><li>Orally upsolved: <code>10/11</code></li><li>Rank: <code>34/155</code></li></ul><!-- More --><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=6311&amp;locale_id=0" target="_blank" rel="noopener">Contest Link</a></p><p>Statements</p><p><a href="https://blog.csdn.net/NPU_SXY/article/details/84037722" target="_blank" rel="noopener">Editorial by NPU_SXY</a> (10/11)</p><p><a href="https://wiki-calabash.icpc.camp/2018-2019%20ACM-ICPC%20Southeastern%20European%20Regional%20Programming%20Contest%20(SEERC%202018" target="_blank" rel="noopener">Editorial by Calabash</a>) (8/11)</p><p><a href="http://clatisus.com/2018-2019%20ACM-ICPC%20Southeastern%20European%20Regional%20Programming%20Contest%20(SEERC%202018" target="_blank" rel="noopener">Editorial by BUAA Nonsense Time</a>) (11/11)</p><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><p>yd &amp; wzk onsite, cyy remote</p><p>感觉这次比赛出的锅有点多啊，这里列出来以供警示：</p><ul><li>开始：wzk E 题忘记排序，用 cin/cout 导致 TLE</li><li>中前期：wzk 花费较多时间做 A ，结果惨遭 WA on 61，yd B 题推式子推得时间过长，两人均没有看其它题。</li><li>中后期：wzk G 题数组开小导致莫名 TLE</li><li>后期：yd F 题写炸，导致有好几个可做题来不及写。</li></ul><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>Easy: B, C, E<br>Mid Easy: F, G, I</p><h2 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h2><h2 id="Prob-B-数学公式"><a href="#Prob-B-数学公式" class="headerlink" title="Prob B. 数学公式"></a>Prob B. 数学公式</h2><blockquote><p><em>Solved by YangDavid at 02:43 (+)</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>经过转换：圆上有 $n$ 个点，标号依次为 $1,2,\ldots,n$ 。问有多少个无序三元组 $(i,j,k)$，使得按这三个编号取出的点不三点共线，并且连接成的三角形包含圆心？（三角形边界经过圆心也算包含圆心）</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>不妨设 $i&lt;j&lt;k$ ，令：<br>$$<br>\begin{aligned}<br>x_1 &amp;= j - i\\<br>x_2 &amp;= k - j\\<br>x_3 &amp;= (n+i) - k<br>\end{aligned}<br>$$<br>则：<br>$$<br>x_1 + x_2 + x_3 = n \text{ } (1 \leq x_i \leq \lfloor\frac n2 \rfloor)<br>$$<br>如果三者两两相等，显然 $n$ 需要是 3 的倍数，对应的 $(i,j,k)$ 一共有 $\lfloor \frac n3 \rfloor$ 种。</p><p>否则，由于 $x_1,x_2,x_3$ 具有循环同构性，我们要计数的是 $x_1$ 最小，且 $x_1 \neq x_3$ 的有序三元组 $(x_1,x_2,x_3)$ 的数量，然后再乘上 $n$ 。这个结果可以用以下求和表示：<br>$$<br>\sum_{a=1}^{\lfloor \frac n3 \rfloor} \sum_{\max(a,n-\lfloor\frac{n}{2}\rfloor-a)}^{\min(\lfloor\frac n2\rfloor, n-2a-1)} 1<br>$$<br>这个式子有两个分界点：<br>$$<br>\begin{aligned}<br>t_1 &amp;= \lfloor\frac{n-1-\lfloor\frac{n}{2}\rfloor}{2}\rfloor \\<br>t_2 &amp;= \lfloor \frac{n- \lfloor\frac n2 \rfloor}2 \rfloor<br>\end{aligned}<br>$$<br>分段等差数列求和即可。注意对 $2^{64}$ 取模，要用 unsigned long long。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月28日 星期五 15时20分57秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int long long</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ull;</span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> ans = <span class="number">0</span>;</span><br><span class="line">ll n;</span><br><span class="line"><span class="function">ull <span class="title">sum</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1u</span>ll * (l + r) * (r - l + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">sol1</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1U</span>LL * (<span class="number">2</span>*(n/<span class="number">2</span>)-n+<span class="number">1</span>) * (r-l+<span class="number">1</span>) + sum(l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">sol2</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(r &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l &gt; r) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1U</span>LL * n * (r - l + <span class="number">1</span>) - <span class="number">3U</span>LL * sum(l, r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ull <span class="title">eval</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a &lt; <span class="number">1</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ll up = min(n/<span class="number">2</span>, n<span class="number">-2</span>*a<span class="number">-1</span>), down = max(a, n-a-n/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(up &lt; down) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> up - down + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a, b, c;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;a, &amp;b, &amp;c, &amp;n);</span><br><span class="line">    <span class="keyword">int</span> factor = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(a == b &amp;&amp; b == c) factor = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(a == b || b == c || c == a) factor = <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">else</span> factor = <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> t1 = (n<span class="number">-1</span>-(n/<span class="number">2</span>))/<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> t2 = (n-(n/<span class="number">2</span>))/<span class="number">2</span>;</span><br><span class="line">    ans = sol1(<span class="number">1</span>, t1 - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = t1 - <span class="number">1</span>; i &lt;= t2; ++i) ans += eval(i);</span><br><span class="line">    ans += sol2(t2 + <span class="number">1</span>, n / <span class="number">3</span>);</span><br><span class="line">    ans *= n;</span><br><span class="line">    <span class="keyword">if</span>(n % <span class="number">3</span> == <span class="number">0</span>) ans += n / <span class="number">3</span>;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans * factor &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-C-BFS"><a href="#Prob-C-BFS" class="headerlink" title="Prob C. BFS"></a>Prob C. BFS</h2><blockquote><p><em>Solved by YangDavid at 00:55 (+1)</em></p></blockquote><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>$n$ 个点的树，节点被染成了白色黑色。要求从中选取 $m$ 个黑节点，使得它们两两距离最大值最小。</p><p>数据范围：$n,m\leq 100$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>感觉这是有史以来做过的最有趣的签到题。这道题有很多种做法，这里提供一种不用二分，复杂度 $O(n^2)$ 的做法。</p><p>首先选取的黑色节点在黑节点的虚树上一定是同一个联通分量，因此也组成一棵树。我们考虑枚举这棵树的重心，从重心出发开始 BFS，记录在达到 $m$ 个黑点时距离最远和次远的点的位置，然后相加，更新答案。</p><p>但是这么做有一个非常 tricky 的地方，考虑下面这个图，绿色点是黑色点，而红色边才是真正的重心！</p><p><img src="graph.svg" alt></p><p>因此我们枚举重心不仅要枚举点，也要枚举边！但是复杂度仍然是 $O(nm)$ 的。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月28日 星期五 13时47分11秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; edges;</span><br><span class="line"><span class="keyword">int</span> n, m, p[maxn], ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p[i]);</span><br><span class="line">    rep(i, n - <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y; </span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        G[x].push_back(y);</span><br><span class="line">        G[y].push_back(x);</span><br><span class="line">        edges.emplace_back(x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"0"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">1</span>; d &lt;= n; ++d) &#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dist(n + <span class="number">10</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt; &gt; st;</span><br><span class="line">        q.push(d), dist[d] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[d]) st.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty() &amp;&amp; (<span class="keyword">int</span>)st.size() &lt; m) &#123;</span><br><span class="line">            <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[f]) <span class="keyword">if</span>(dist[g] == <span class="number">-1</span>) &#123;</span><br><span class="line">                q.push(g);</span><br><span class="line">                dist[g] = dist[f] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(p[g]) st.insert(dist[g]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it = st.begin();</span><br><span class="line">        <span class="keyword">int</span> part = *it;</span><br><span class="line">        it++;</span><br><span class="line">        part += *it;</span><br><span class="line">        ans = min(ans, part);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">        <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; dist(n + <span class="number">10</span>, <span class="number">-1</span>);</span><br><span class="line">        <span class="built_in">multiset</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt;&gt; st;</span><br><span class="line">        q.push(edges[i].first), dist[edges[i].first] = <span class="number">0</span>;</span><br><span class="line">        q.push(edges[i].second), dist[edges[i].second] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(p[edges[i].first]) st.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span>(p[edges[i].second]) st.insert(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span>(!q.empty() &amp;&amp; (<span class="keyword">int</span>) st.size() &lt; m) &#123;</span><br><span class="line">            <span class="keyword">int</span> f = q.front(); q.pop();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[f]) <span class="keyword">if</span>(dist[g] == <span class="number">-1</span>) &#123;</span><br><span class="line">                q.push(g);</span><br><span class="line">                dist[g] = dist[f] + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(p[g]) st.insert(dist[g]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">auto</span> it = st.begin();</span><br><span class="line">        <span class="keyword">int</span> part = *it;</span><br><span class="line">        it++;</span><br><span class="line">        part += *it;</span><br><span class="line">        ans = min(ans, part + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><h2 id="Prob-E-容易题"><a href="#Prob-E-容易题" class="headerlink" title="Prob E. 容易题"></a>Prob E. 容易题</h2><blockquote><p><em>Solved by nocriz at 00:30 (+2)</em></p></blockquote><h2 id="Prob-F-构造"><a href="#Prob-F-构造" class="headerlink" title="Prob F. 构造"></a>Prob F. 构造</h2><blockquote><p><em>Upsolved by YangDavid (+4)</em></p></blockquote><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给你 $a,b$ 两个长度为 $n$ 的序列，问能否经过 $2n$ 次以内的下面两种操作操作，将 a 变成 b：</p><ul><li>选定 $[l,r]$ ，将 $a[l],\ldots,a[r]$ 替换为区间 $[l,r]$ 最大值；</li><li>选定 $[l,r]$ ，将 $a[l],\ldots,a[r]$ 替换为区间 $[l,r] $ 最小值；</li></ul><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>一个显然的事实是不断找 b 中相邻且相同字母，去掉其中一个，这么操作得到的序列如果是 a 的子序列的话，就是可行的，否则无法构造。</p><p>构造分为两步，明天再详细阐述。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月28日 星期五 17时02分28秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111111</span>;</span><br><span class="line"><span class="keyword">int</span> apy[maxn], a[maxn], b[maxn], n, p[maxn], cnt2[maxn], endp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">op</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> o;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    op(<span class="keyword">char</span> c, <span class="keyword">int</span> L, <span class="keyword">int</span> R): o(c), l(L), r(R) &#123; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">vector</span>&lt;op&gt; ans;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]), apy[i] = a[i];</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; bb, cnt;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!bb.size() || bb.back() != b[i]) bb.push_back(b[i]), cnt.push_back(<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> cnt[cnt.size() - <span class="number">1</span>] ++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> match = <span class="number">1</span>, sz = bb.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i)</span><br><span class="line">        endp[i + <span class="number">1</span>] = endp[i] + cnt[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= n; ++c) <span class="keyword">if</span>(match &lt;= sz &amp;&amp; a[c] == bb[match - <span class="number">1</span>])</span><br><span class="line">        p[match] = c, match++;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(match != sz + <span class="number">1</span>) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= sz; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = p[c] - <span class="number">1</span>; i &gt; p[c<span class="number">-1</span>]; --i) &#123;</span><br><span class="line">            <span class="keyword">char</span> op = <span class="string">'m'</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[i] &lt; a[i + <span class="number">1</span>]) op = <span class="string">'M'</span>;</span><br><span class="line">            a[i] = a[i + <span class="number">1</span>];</span><br><span class="line">            ans.emplace_back(op, i, i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = p[sz] + <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">char</span> op = <span class="string">'m'</span>;</span><br><span class="line">        <span class="keyword">if</span>(a[i - <span class="number">1</span>] &gt; a[i]) op = <span class="string">'M'</span>;</span><br><span class="line">        ans.emplace_back(op, i - <span class="number">1</span>, i);</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    p[sz] = n;</span><br><span class="line">    <span class="keyword">if</span>(sz == <span class="number">1</span>) &#123;</span><br><span class="line">        sz = ans.size();</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%c %d %d\n"</span>, g.o, g.l, g.r);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> mypos = <span class="number">0</span>, matchpos = <span class="number">0</span>, first_unsol = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= sz; ++i) &#123;</span><br><span class="line">        mypos = p[i], matchpos = endp[i];</span><br><span class="line">        <span class="keyword">if</span>(mypos &gt;= matchpos) &#123;</span><br><span class="line">            <span class="keyword">char</span> op = <span class="string">'m'</span>;</span><br><span class="line">            <span class="keyword">if</span>(a[p[first_unsol]] &gt; a[p[first_unsol - <span class="number">1</span>]]) op = <span class="string">'M'</span>;</span><br><span class="line">            ans.emplace_back(op, endp[first_unsol - <span class="number">1</span>] + <span class="number">1</span>, p[first_unsol]);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> c = i - <span class="number">1</span>; c &gt;= first_unsol; --c) &#123;</span><br><span class="line">                <span class="keyword">char</span> op = <span class="string">'m'</span>;</span><br><span class="line">                <span class="keyword">if</span>(a[p[c]] &gt; a[p[c + <span class="number">1</span>]]) op = <span class="string">'M'</span>;</span><br><span class="line">                ans.emplace_back(op, p[c], endp[c]);</span><br><span class="line">            &#125;</span><br><span class="line">            first_unsol = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    sz = ans.size();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%c %d %d\n"</span>, g.o, g.l, g.r);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-G-线段树"><a href="#Prob-G-线段树" class="headerlink" title="Prob G. 线段树"></a>Prob G. 线段树</h2><blockquote><p><em>Solved by hdmmblz &amp; nocriz at 03:26 (+4)</em></p></blockquote><h2 id="Prob-H-随机化-or-构造"><a href="#Prob-H-随机化-or-构造" class="headerlink" title="Prob H. 随机化 or 构造"></a>Prob H. 随机化 or 构造</h2><blockquote><p><em>Upsolved by hdmmblz, YangDavid</em></p></blockquote><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>有 $m$ 个愿望，形式是 $i$ 号人想让 $j$ 号人不高兴。一个人高兴当且仅当他至少有一个愿望被满足了。你要构造方案使得至少 $\displaystyle \lfloor \frac m4 \rfloor + 1$ 个愿望被满足</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>直接随机每个人是否开心，期望就是 $m/4$ 个愿望被满足。不断随机，符合题意就输出，否则继续随机即可。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> Fopen freopen(<span class="meta-string">"_in.txt"</span>,<span class="meta-string">"r"</span>,stdin); freopen(<span class="meta-string">"_out.txt"</span>,<span class="meta-string">"w"</span>,stdout);</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LL long long</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ULL unsigned LL</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pb push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson l,m,rt&lt;&lt;1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson m+1,r,rt&lt;&lt;1|1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lch(x) tr[x].son[0]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rch(x) tr[x].son[1]</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max3(a,b,c) max(a,max(b,c))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> min3(a,b,c) min(a,min(b,c))</span></span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; pll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inf = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL INF = <span class="number">0x3f3f3f3f3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">const</span> LL mod =  (<span class="keyword">int</span>)<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">1e5</span> + <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> a[N];</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; p[N&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">int</span> id[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="keyword">int</span> n, m;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;p[i].fi, &amp;p[i].se);</span><br><span class="line">        <span class="keyword">int</span> k = <span class="number">0</span>, need = m/<span class="number">4</span> +<span class="number">1</span> ;</span><br><span class="line">        <span class="keyword">do</span>&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)</span><br><span class="line">                a[i] = ((<span class="keyword">int</span>)rand())&amp;<span class="number">1</span>;</span><br><span class="line">            k = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)&#123;</span><br><span class="line">                <span class="comment">//cout &lt;&lt; i &lt;&lt; " "&lt;&lt; a[i] &lt;&lt; endl;</span></span><br><span class="line">                <span class="keyword">if</span>(a[p[i].fi] == <span class="number">1</span> &amp;&amp; a[p[i].se] == <span class="number">0</span>)&#123;</span><br><span class="line">                    id[++k] = i;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">while</span>(k &lt; need);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, k);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= k; ++i)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, id[i], <span class="string">" \n"</span>[i==k]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution 2"></a>Solution 2</h3><p>构造性做法，由 mnbvar 提出。</p><p>首先解决这个问题：$n$ 个点，$m$ 条边的无向图，给点黑白染色，构造方案使得两端点不同色的边的数量严格大于 $\frac m2$ 。做法就是每个联通分量分别处理，任选两个点分别染成黑白，然后开始 DFS 邻居节点，一个节点如果周围黑节点多，就染成白色；白节点多就染成黑色。如此染色，对于每个节点，不同色的边数量都严格大于度数的一半，因此这种构造是有效的。</p><p>然后回到原问题。原问题按无向图跑一遍上面的算法，检验，如果不行的话把黑白染色互换，再检验则一定可以找到解。因为这两种方法的满足的愿望数之严格大于 $\frac m2$</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月29日 星期六 17时58分08秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">444444</span>;</span><br><span class="line"><span class="keyword">int</span> n, m, c[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; edges;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(c[v] == <span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>, one = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) <span class="keyword">if</span>(c[g] != <span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(c[g] == <span class="number">0</span>) zero++;</span><br><span class="line">            <span class="keyword">else</span> one++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(zero &gt; one) c[v] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> c[v] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) <span class="keyword">if</span>(c[g] == <span class="number">-1</span>)</span><br><span class="line">        dfs(g);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, n) G[i].clear();</span><br><span class="line">    edges.clear();</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> f, t;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;f, &amp;t);</span><br><span class="line">        G[f].push_back(t);</span><br><span class="line">        G[t].push_back(f);</span><br><span class="line">        edges.emplace_back(f, t);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(c, <span class="number">-1</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">10</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(c[i] == <span class="number">-1</span>) &#123;</span><br><span class="line">        c[i] = <span class="number">0</span>;</span><br><span class="line">        dfs(i);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> need = m / <span class="number">4</span> + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ok, no;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(c[edges[i].first] &amp;&amp; !c[edges[i].second]) &#123;</span><br><span class="line">            ok.push_back(i + <span class="number">1</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(c[edges[i].second] &amp;&amp; !c[edges[i].first]) &#123;</span><br><span class="line">            no.push_back(i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> print = [](<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; x) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)x.size());</span><br><span class="line">        <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : x) &#123;</span><br><span class="line">            <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>((<span class="keyword">int</span>)ok.size() &gt;= need) print(ok);</span><br><span class="line">    <span class="keyword">else</span> print(no);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-I"><a href="#Prob-I" class="headerlink" title="Prob I."></a>Prob I.</h2><blockquote><p><em>Solved by hdmmblz at 03:09 (+)</em></p></blockquote><h2 id="Prob-J-最短路"><a href="#Prob-J-最短路" class="headerlink" title="Prob J. 最短路"></a>Prob J. 最短路</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>给出一张图，$n\le10^5$个节点，$m\le10^5$条边。</p><p>有只兔子和乌龟在赛跑，每条边乌龟和兔子各有一个需要的时间。</p><p>乌龟要经过的边按顺序给出，并且乌龟每当走过一条边，就会睡一段时间，每条边的这个时间也给出。</p><p>兔子要经过的边按顺序给出，兔子可能作弊，在某个点改变下一个目标点，之后一直走最短路。</p><p>当兔子开始作弊时，乌龟如果没有睡觉，则立即就会发现，否则它睡醒后立即会发现，乌龟一旦发现兔子作弊，之后都不会再睡觉。</p><p>如果乌龟和兔子同时到达算兔子赢。</p><p>问从哪些点开始作弊（要求改变目标点，且使得最短路严格变短），可以获胜。</p><p>（抄的是北航的题解。）</p><h3 id="Comment"><a href="#Comment" class="headerlink" title="Comment"></a>Comment</h3><p>模拟题意即可。思博题，细节巨多，题意不清，体验极差。</p><h2 id="Prob-K"><a href="#Prob-K" class="headerlink" title="Prob K."></a>Prob K.</h2>]]></content>
    
    <summary type="html">
    
      &lt;font size=&quot;10&quot; face=&quot;courier new, monospace&quot;&gt;&lt;span style=&quot;color:#ee82ee&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;BC&lt;/span&gt;&lt;span style=&quot;color:#ee82ee;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;color:#ee82ee;&quot;&gt;F&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;G&lt;/span&gt;&lt;span style=&quot;color:#ee82ee&quot;&gt;H&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;color:#ee82ee&quot;&gt;J&lt;/span&gt;K&lt;/font&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="概率算法" scheme="http://yoursite.com/tags/%E6%A6%82%E7%8E%87%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Opentrains 1531 解题报告</title>
    <link href="http://yoursite.com/2019/06/24/Opentrains-1531-%E8%A7%A3%E9%A2%98%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/06/24/Opentrains-1531-解题报告/</id>
    <published>2019-06-24T03:08:43.000Z</published>
    <updated>2019-07-19T11:43:40.059Z</updated>
    
    <content type="html"><![CDATA[<p><b><font size="10" face="courier new, monospace"><span style="color:#ee28ee;">A</span><span style="color:#00ff00;">B</span><span style="color:#00ff00;">C</span><span style="color:#ee82ee;">D</span><span style="color:#ee82ee;">E</span><span style="color:#00ff00;">F</span><span style="color:#ee82ee;">G</span><span style="color:#ee82ee;">H</span><span style="color:#ee28ee;">I</span><span style="color:#ee28ee;">J</span><span style="color:#00ff00;">K</span></font></b></p><a id="more"></a><h1 id="Petrozavodsk-Winter-2019-300iq-Contest-1"><a href="#Petrozavodsk-Winter-2019-300iq-Contest-1" class="headerlink" title="Petrozavodsk Winter-2019. 300iq Contest 1"></a>Petrozavodsk Winter-2019. 300iq Contest 1</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center"></td><td style="text-align:center">1:17</td><td style="text-align:center">2:06</td><td style="text-align:center"><font color="red">(3)</font></td><td style="text-align:center"></td><td style="text-align:center">0:16</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">4:47</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="red">*4</font></td><td style="text-align:center"><font color="green">+</font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="red">*18</font></td><td style="text-align:center"><font color="red">*5</font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="red"><b>*5</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">4</td><td style="text-align:center">55</td><td style="text-align:center">51</td><td style="text-align:center">23</td><td style="text-align:center">5</td><td style="text-align:center">61</td><td style="text-align:center">4</td><td style="text-align:center">7</td><td style="text-align:center">9</td><td style="text-align:center">3</td><td style="text-align:center">17</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">带花树</td><td style="text-align:center">线段树</td><td style="text-align:center">构造</td><td style="text-align:center">线段树</td><td style="text-align:center">BM</td><td style="text-align:center">签到</td><td style="text-align:center">拆分数</td><td style="text-align:center">构造</td><td style="text-align:center">染色</td><td style="text-align:center">斜率优化</td><td style="text-align:center">数学</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="red">4062</font></td><td style="text-align:center"><font color="blue">2210</font></td><td style="text-align:center"><font color="blue"><b>1617</b></font></td><td style="text-align:center"><font color="red">3325</font></td><td style="text-align:center"><font color="red">2463</font></td><td style="text-align:center"><font color="green">489</font></td><td style="text-align:center"><font color="green"><b>996</b></font></td><td style="text-align:center"><font color="blue"><b>1625</b></font></td><td style="text-align:center"><font color="red"><b>5137</b></font></td><td style="text-align:center"><font color="red"><b>4140</b></font></td><td style="text-align:center"><font color="blue">1257</font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue"><b>Mid</b></font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="red"><b>Hard</b></font></td><td style="text-align:center"><font color="red"><b>Hard</b></font></td><td style="text-align:center"><font color="blue"><b>Mid</b>-</font></td><td style="text-align:center"><font color="red"><b>Hard</b></font></td><td style="text-align:center"><font color="blue"><b>Mid</b>+</font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center">★★★</td><td style="text-align:center">★★</td><td style="text-align:center">★</td><td style="text-align:center">★★</td><td style="text-align:center">★★</td></tr></tbody></table><ul><li>Solved during contest: <code>4/11</code> </li><li>Upsolved: <code>11/11</code> <strong>DONE</strong></li><li>Orally upsolved: <code>11/11</code></li><li>Rank: <code>22/68</code></li></ul><p>这一场题目质量真的是高！%%% 300iq，各种超级好题。这次打得也还算可以，只可惜 D 题最后没过。这一场 11 道题目已经全部补完，看来还是众人拾柴火焰高啊。</p><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="http://opentrains.snarknews.info/~ejudge/team.cgi?contest_id=001531" target="_blank" rel="noopener">Practice Link</a></p><p>Problems</p><p>Official Editorial</p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>Easy: F<br>Mid Easy: B, C, D<br>Mid Hard: K, H, I<br>Hard: G, A, E, J</p><h2 id="新增的板子"><a href="#新增的板子" class="headerlink" title="新增的板子"></a>新增的板子</h2><h3 id="一般图最大匹配——带花树"><a href="#一般图最大匹配——带花树" class="headerlink" title="一般图最大匹配——带花树"></a>一般图最大匹配——带花树</h3><p>复杂度 $O(nm)$ 。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blossom</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">2e4</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> mate[N], n, ret;</span><br><span class="line">        <span class="built_in">vector</span> &lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; N; i++) G[i].clear();</span><br><span class="line">        &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> n)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;n = n;</span><br><span class="line"><span class="built_in">memset</span>(mate, <span class="number">-1</span>, <span class="keyword">sizeof</span>(mate[<span class="number">0</span>]) * n);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="keyword">if</span> (mate[i] == <span class="number">-1</span>) aug(i, G);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = ret = <span class="number">0</span>; i &lt; n; i++) ret += (mate[i] &gt; i);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            G[a].push_back(b);</span><br><span class="line">            G[b].push_back(a);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> next[N], dsu[N], mark[N], vis[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x == dsu[x]) ? x : (dsu[x] = get(dsu[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">dsu[get(a)] = get(b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">++t;</span><br><span class="line"><span class="keyword">for</span> (; ; swap(x, y)) <span class="keyword">if</span> (x != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (vis[x = get(x)] == t) <span class="keyword">return</span> x;</span><br><span class="line">vis[x] = t;</span><br><span class="line">x = (mate[x] != <span class="number">-1</span>) ? next[mate[x]] : <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">group</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> p)</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> b, c; a != p; merge(a, b), merge(b, c), a = c) &#123;</span><br><span class="line">b = mate[a], c = next[b];</span><br><span class="line"><span class="keyword">if</span> (get(c) != p) next[c] = b;</span><br><span class="line"><span class="keyword">if</span> (mark[b] == <span class="number">2</span>) mark[b] = <span class="number">1</span>, Q.push(b);</span><br><span class="line"><span class="keyword">if</span> (mark[c] == <span class="number">2</span>) mark[c] = <span class="number">1</span>, Q.push(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[])</span> </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) next[i] = vis[i] = <span class="number">-1</span>, dsu[i] = i, mark[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (!Q.empty()) Q.pop();</span><br><span class="line">Q.push(s);</span><br><span class="line">mark[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span> (mate[s] == <span class="number">-1</span> &amp;&amp; !Q.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> x = Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> y : G[x]) &#123;</span><br><span class="line"><span class="keyword">if</span> (y != mate[x] &amp;&amp; get(x) != get(y) &amp;&amp; mark[y] != <span class="number">2</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (mark[y] == <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> p = lca(x, y);</span><br><span class="line"><span class="keyword">if</span> (get(x) != p) next[x] = y;</span><br><span class="line"><span class="keyword">if</span> (get(y) != p) next[y] = x;</span><br><span class="line">group(x, p);</span><br><span class="line">group(y, p);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mate[y] == <span class="number">-1</span>) &#123;</span><br><span class="line">next[y] = x;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = y, k, l; j != <span class="number">-1</span>; j = l) &#123;</span><br><span class="line">k = next[j];</span><br><span class="line">l = mate[k];</span><br><span class="line">mate[j] = k;</span><br><span class="line">mate[k] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">next[y] = x;</span><br><span class="line">Q.push(mate[y]);</span><br><span class="line">mark[mate[y]] = <span class="number">1</span>;</span><br><span class="line">mark[y] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; T;</span><br></pre></td></tr></table></figure></div></div><h3 id="拉格朗日插值"><a href="#拉格朗日插值" class="headerlink" title="拉格朗日插值"></a>拉格朗日插值</h3><p>$$<br>f(x) = \sum_{i=1}^n f(x_i) \prod_{j\neq i}  \frac{x - x_j}{x_i  - x_j}<br>$$</p><p>复杂度 $O(n^2)$ ，附带暴力的多项式模板</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L *x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> &#123;</span> <span class="comment">// naive polynomial ops</span></span><br><span class="line">    <span class="keyword">int</span> deg;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coef;</span><br><span class="line">    poly(<span class="keyword">int</span> degree): deg(degree) &#123;</span><br><span class="line">        coef.resize(deg + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> coef[idx]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">get_at</span><span class="params">(<span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = deg; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            ans = mo(muln(to, ans) + coef[j]);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    poly <span class="keyword">operator</span> * (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="function">poly <span class="title">res</span><span class="params">(deg + rhs.deg)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= deg; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= rhs.deg; ++j) &#123;</span><br><span class="line">                res[i + j] = mo(res[i + j] + muln(coef[i], rhs.coef[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    poly <span class="keyword">operator</span> * (<span class="keyword">int</span> d) <span class="keyword">const</span> &#123;</span><br><span class="line">        poly res = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= deg; ++i)</span><br><span class="line">            res[i] = muln(res[i], d);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">poly <span class="title">divide</span><span class="params">(<span class="keyword">int</span> d)</span> <span class="keyword">const</span> </span>&#123; <span class="comment">// divide by (x - d)</span></span><br><span class="line">        poly cp = *<span class="keyword">this</span>, res(deg - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> g = deg; g &gt;= <span class="number">1</span>; --g) &#123;</span><br><span class="line">            res[g - <span class="number">1</span>] = cp[g];</span><br><span class="line">            cp[g - <span class="number">1</span>] = mo(cp[g - <span class="number">1</span>] + muln(cp[g], d));</span><br><span class="line">            cp[g] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        assert(cp[<span class="number">0</span>] == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    poly <span class="keyword">operator</span> + (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg &gt; rhs.deg) &#123;</span><br><span class="line">            poly ans = *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rhs.deg; ++i)</span><br><span class="line">                ans[i] = mo(ans[i] + rhs.coef[i]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            poly ans = rhs;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= deg; ++i)</span><br><span class="line">                ans[i] = mo(ans[i] + coef[i]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg != rhs.deg) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = deg; i &gt;= <span class="number">0</span>; --i) <span class="keyword">if</span>(coef[i] != rhs.coef[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> != rhs); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">poly <span class="title">interpolate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pii&gt;&amp; pt)</span> </span>&#123;</span><br><span class="line">    poly v(0), tmp(1), ans(pt.size() - 1); v[0] = tmp[1] = 1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) &#123;</span><br><span class="line">        tmp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        tmp[<span class="number">0</span>] = mo(-g.first);</span><br><span class="line">        v = v * tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> coef = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j) <span class="keyword">if</span>(j != i)</span><br><span class="line">            coef = muln(coef, mo(pt[i].first - pt[j].first));</span><br><span class="line">        coef = inv(coef);</span><br><span class="line">        ans = ans + v.divide(pt[i].first) * muln(pt[i].second, coef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="整数拆分"><a href="#整数拆分" class="headerlink" title="整数拆分"></a>整数拆分</h3><p>五边形数法，复杂度 $O(n\sqrt n)$ 。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510000</span>, MOD = <span class="number">998244353</span>, inv2 = (MOD + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n, penta[maxn], part[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span>(x &gt;= MOD) x -= MOD; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123; x = mo(x + y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    part[<span class="number">0</span>] = part[<span class="number">1</span>] = penta[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; penta[i<span class="number">-2</span>] &lt;= x; i += <span class="number">2</span>) </span><br><span class="line">        penta[i] = penta[i<span class="number">-2</span>] + <span class="number">3</span>*(i&gt;&gt;<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; penta[i<span class="number">-2</span>] &lt;= x; i += <span class="number">2</span>)</span><br><span class="line">        penta[i] = penta[i<span class="number">-2</span>] + <span class="number">3</span>*(i&gt;&gt;<span class="number">1</span>) - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; i - penta[j] &gt;= <span class="number">0</span>; ++j)</span><br><span class="line">            upd(part[i], (((j&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">-1</span>) * part[i-penta[j]]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h3 id="WQS二分-斜率优化，带构造方案"><a href="#WQS二分-斜率优化，带构造方案" class="headerlink" title="WQS二分+斜率优化，带构造方案"></a>WQS二分+斜率优化，带构造方案</h3><p>将序列 $a$ 分为 $k$ 个连续段，每段的和为 $s_i$ ，构造方案最小化：<br>$$<br>\sum_{i=1}^k s_i ^2<br>$$<br>做法：二分权值 $C$ ，dp 方程可以写为下面的形式：<br>$$<br>dp(i) = \max_{0\leq j &lt; i} dp(j) + (sum(i)-sum(j))^2 + C<br>$$<br>这个 dp 可以进行斜率优化单调队列维护下凸包。写为下面的形式：<br>$$<br>dp(j) + sum^2(j) = 2sum(i)sum(j) + dp(i) - sum^2(i) - C<br>$$<br>构造方案时跑两遍斜率优化，第首先跑一次斜率优化 dp，每次决策都取斜率相等的点中长度最长的，找到长度最长的解，将每个位置的答案记为$dp_1[i]$, 长度记为 $len[i]$。</p><p>然后第二次斜率优化时，我们可以知道相比于第一次，长度需要缩短 $x = len[n] - k$ 。然后转移的时候就选择一个决策，使得转移之后的长度大于等于 $len[i] - x$ ，而又尽量接近 $len[i]-x$。</p><p>这两种决策都可以直接使用一个变量来维护，细节很多，编写代码时应当万分小心。</p><p>另：注意斜率优化的值域，这里使用的是 <code>__int128</code> 。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月29日 星期六 20时28分54秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll __int128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;__int128, ll&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111111</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line">ll n, k, a[maxn], sum[maxn], opt[maxn];</span><br><span class="line">pii dp[maxn]; <span class="comment">// &#123;min square sum, max item number&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) (q[q.size() + (x)])</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CHT</span><span class="params">(ll C)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> y = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> dp[j].first + sum[j] * sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> x = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> kk = [&amp;](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> <span class="number">2</span> * sum[i]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> getv = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j)-&gt;pii &#123; <span class="keyword">return</span> &#123;dp[j].first + (sum[i]-sum[j])*(sum[i]-sum[j]) + C, dp[j].second+<span class="number">1</span>&#125;; &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) &lt; (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; kk(i) == kk(i<span class="number">-1</span>)) opt[i] = opt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> opt[i] = q[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) == (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[opt[i]].second &lt; dp[q[<span class="number">0</span>]].second) opt[i] = q[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(dp[opt[i]].second &lt; dp[q[<span class="number">1</span>]].second) opt[i] = q[<span class="number">1</span>];</span><br><span class="line">            q.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = getv(i, opt[i]);</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; (y(r(<span class="number">-1</span>))-y(r(<span class="number">-2</span>)))*(x(i)-x(r(<span class="number">-1</span>))) &gt; (y(i)-y(r(<span class="number">-1</span>)))*(x(r(<span class="number">-1</span>))-x(r(<span class="number">-2</span>))))</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n].second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll pos[maxn];</span><br><span class="line">pii dp2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Construct</span><span class="params">(ll C)</span> </span>&#123;</span><br><span class="line">    ll ss = dp[n].second - k;</span><br><span class="line">    <span class="keyword">auto</span> y = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> dp[j].first + sum[j] * sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> x = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> kk = [&amp;](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> <span class="number">2</span> * sum[i]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> getv = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j)-&gt;pii &#123; <span class="keyword">return</span> &#123;dp[j].first + (sum[i]-sum[j])*(sum[i]-sum[j]) + C, dp2[j].second+<span class="number">1</span>&#125;; &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) &lt; (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; kk(i) == kk(i<span class="number">-1</span>)) opt[i] = opt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> opt[i] = q[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> need = [&amp;](<span class="keyword">int</span> o) &#123; <span class="keyword">return</span> ss-dp[i].second+dp2[o].second+<span class="number">1</span>; &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) == (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(need(q[<span class="number">0</span>]) == <span class="number">0</span>) opt[i] = q[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(need(q[<span class="number">1</span>]) == <span class="number">0</span>) opt[i] = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(need(q[<span class="number">0</span>]) &lt; need(opt[i])) opt[i] = q[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span>(need(q[<span class="number">1</span>]) &lt; need(opt[i])) opt[i] = q[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            q.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        dp2[i] = getv(i, opt[i]);</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; (y(r(<span class="number">-1</span>))-y(r(<span class="number">-2</span>)))*(x(i)-x(r(<span class="number">-1</span>))) &gt; (y(i)-y(r(<span class="number">-1</span>)))*(x(r(<span class="number">-1</span>))-x(r(<span class="number">-2</span>))))</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp2[n].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> r</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n, k); <span class="comment">// deal with 0!!!</span></span><br><span class="line">    rep(i, n) read(a[i]), sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    ll l = <span class="number">0</span>, r = INFL;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ver = CHT(mid);</span><br><span class="line">        <span class="keyword">if</span>(ver &gt; k) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ver == k) &#123; l = r = mid; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(CHT(l) &lt; k) l--;</span><br><span class="line">    Construct(l);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ver;</span><br><span class="line">    <span class="keyword">int</span> cur = n;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        ver.push_back(cur);</span><br><span class="line">        cur = opt[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ver.begin(), ver.end());</span><br><span class="line">    ver.pop_back();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ver) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-A-一般图最大匹配"><a href="#Prob-A-一般图最大匹配" class="headerlink" title="Prob A. 一般图最大匹配"></a>Prob A. 一般图最大匹配</h2><blockquote><p><em>Upsolved by nocriz</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给你一个表格，每一个位置填有 $\ast$ + . 三种符号的一种。你可以以 + 为中心放一个 $1\times 3$ 或 $3\times 1$ 的 I 型骨牌，也可以以 + 或 $\ast$ 为中心放一个大小为 3 的 L 型骨牌。其中位于骨牌覆盖到的非中心的位置必须是 <code>.</code> 。问最多能放多少块骨牌，并输出方案。</p><p>数据范围：$n,m \leq 100$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑一般图最大匹配的建模。将每个 + 和 $\ast$ 拆成两个点，如下连边：</p><p><code>*</code> : (中心1 - 中心2), (上 - 中心1), (下 - 中心1), (左 - 中心2), (右 - 中心2)</p><p><code>+</code> : (中心1 - 中心2), (左 - 中心1), (左 - 中心2), (右 - 中心1), (右 - 中心2), (上- 中心1), (上 - 中心2), (下 - 中心1), (下 - 中心2)</p><p>这么做是 $O(n^2m^2)$ 的，可能有更好的分析方法，可以通过本题数据。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Blossom</span>&#123;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> <span class="keyword">int</span> N = <span class="number">20010</span>;</span><br><span class="line"><span class="keyword">int</span> mate[N],n,ret;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[N];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clr</span><span class="params">()</span></span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;N;i++)G[i].clear();&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">run</span><span class="params">(<span class="keyword">int</span> nu)</span></span>&#123;</span><br><span class="line">n = nu;</span><br><span class="line"><span class="built_in">memset</span>(mate,<span class="number">-1</span>,<span class="keyword">sizeof</span>(mate[<span class="number">0</span>])*n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="keyword">if</span>(mate[i] == <span class="number">-1</span>)aug(i,G);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=ret = <span class="number">0</span>;i&lt;n;i++)ret+=mate[i]&gt;i;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">add_edge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"Link "&lt;&lt;u&lt;&lt;" "&lt;&lt;v&lt;&lt;endl;</span></span><br><span class="line">G[u].push_back(v);</span><br><span class="line">G[v].push_back(u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> next[N],dsu[N],mark[N],vis[N];</span><br><span class="line"><span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fnd</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (x == dsu[x]) ? x : (dsu[x] = fnd(dsu[x]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">dsu[fnd(a)] = fnd(b);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">lca</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> t=<span class="number">0</span>;</span><br><span class="line">++t;</span><br><span class="line"><span class="keyword">for</span>(;;swap(x,y))<span class="keyword">if</span>(x!=<span class="number">-1</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[x = fnd(x)] == t)<span class="keyword">return</span> x;</span><br><span class="line">vis[x] = t;</span><br><span class="line">x = (mate[x]!=<span class="number">-1</span>)?next[mate[x]]:<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">group</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> p)</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> b,c;a!=p;merge(a,b),merge(b,c),a=c)&#123;</span><br><span class="line">b = mate[a],c = next[b];</span><br><span class="line"><span class="keyword">if</span>(fnd(c)!=p)next[c] = b;</span><br><span class="line"><span class="keyword">if</span>(mark[b] == <span class="number">2</span>)mark[b] = <span class="number">1</span>,Q.push(b);</span><br><span class="line"><span class="keyword">if</span>(mark[c] == <span class="number">2</span>)mark[c] = <span class="number">1</span>,Q.push(c);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">aug</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)next[i] = vis[i] = <span class="number">-1</span>,dsu[i] = i,mark[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(!Q.empty()) Q.pop();</span><br><span class="line">Q.push(s);</span><br><span class="line">mark[s] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(mate[s] == <span class="number">-1</span> &amp;&amp; !Q.empty())&#123;</span><br><span class="line"><span class="keyword">int</span> x = Q.front();</span><br><span class="line">Q.pop();</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> y: G[x])&#123;</span><br><span class="line"><span class="keyword">if</span>(y != mate[x] &amp;&amp; fnd(x) != fnd(y) &amp;&amp; mark[y]!=<span class="number">2</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(mark[y] == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">int</span> p = lca(x,y);</span><br><span class="line"><span class="keyword">if</span> (fnd(x)!=p)next[x] = y;</span><br><span class="line"><span class="keyword">if</span> (fnd(y)!=p)next[y] = x;</span><br><span class="line">group(x,p);</span><br><span class="line">group(y,p);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (mate[y] == <span class="number">-1</span>)&#123;</span><br><span class="line">next[y] = x;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = y,k,l;j != <span class="number">-1</span>; j=l)&#123;</span><br><span class="line">k = next[j];</span><br><span class="line">l = mate[k];</span><br><span class="line">mate[j] = k;</span><br><span class="line">mate[k] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">next[y] = x;</span><br><span class="line">Q.push(mate[y]);</span><br><span class="line">mark[mate[y]] = <span class="number">1</span>;</span><br><span class="line">mark[y] = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;T;</span><br><span class="line"><span class="keyword">int</span> n,m,ansmp[<span class="number">110</span>][<span class="number">110</span>] = &#123;<span class="number">0</span>&#125;,Ti =<span class="number">1</span>,col[<span class="number">10000</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> mp[<span class="number">110</span>][<span class="number">110</span>],ans[<span class="number">110</span>][<span class="number">110</span>];</span><br><span class="line"><span class="keyword">int</span> dx[<span class="number">5</span>] = &#123;<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> dy[<span class="number">5</span>] = &#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">-1</span>,<span class="number">1</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">id</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (y<span class="number">-1</span>)*n+x<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gx</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id%n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gy</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id/n+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> taken[<span class="number">30</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;(mp[i]+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j]==<span class="string">'.'</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d = <span class="number">0</span>;d&lt;<span class="number">4</span>;d++)&#123;</span><br><span class="line"><span class="keyword">int</span> ni = i+dx[d],nj = j+dy[d];</span><br><span class="line"><span class="keyword">if</span>(mp[ni][nj]!=<span class="string">'.'</span>)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] == <span class="string">'+'</span> ||( mp[i][j] == <span class="string">'*'</span> &amp;&amp; d&lt;<span class="number">2</span>)  ) T.add_edge(id(i,j),id(ni,nj));</span><br><span class="line"><span class="keyword">if</span>(mp[i][j] == <span class="string">'+'</span> ||( mp[i][j] == <span class="string">'*'</span> &amp;&amp; d&gt;=<span class="number">2</span>) ) T.add_edge(id(i,j)+n*m,id(ni,nj));</span><br><span class="line">&#125;</span><br><span class="line">T.add_edge(id(i,j),id(i,j)+n*m);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">T.run(n*m*<span class="number">2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(T.mate[id(i,j)]!=<span class="number">-1</span> &amp;&amp; T.mate[id(i,j)+n*m]!=<span class="number">-1</span> &amp;&amp; T.mate[id(i,j)]!=id(i,j)+n*m)&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;T.mate[id(i,j)]&lt;&lt;' '&lt;&lt;T.mate[id(i,j)+n*m]&lt;&lt;' '&lt;&lt;i&lt;&lt;' '&lt;&lt;j&lt;&lt;' '&lt;&lt;id(i,j)&lt;&lt;endl;</span></span><br><span class="line">ansmp[i][j] = Ti;</span><br><span class="line">ansmp[gx(T.mate[id(i,j)])][gy(T.mate[id(i,j)])] = Ti;</span><br><span class="line">ansmp[gx(T.mate[id(i,j)+n*m])][gy(T.mate[id(i,j)+n*m])] = Ti;</span><br><span class="line">Ti+=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>;j&lt;=m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ansmp[i][j] == <span class="number">0</span>)&#123;</span><br><span class="line">ans[i][j] = mp[i][j];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(!col[ansmp[i][j]])&#123;</span><br><span class="line"><span class="built_in">memset</span>(taken,<span class="number">0</span>,<span class="keyword">sizeof</span>(taken));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> dix = <span class="number">-2</span>;dix&lt;=<span class="number">2</span>;dix++)<span class="keyword">for</span>(<span class="keyword">int</span> diy = <span class="number">-2</span>;diy&lt;=<span class="number">2</span>;diy++)&#123;</span><br><span class="line"><span class="keyword">int</span> ni = i+dix,nj = j+diy;</span><br><span class="line"><span class="keyword">if</span>(ni&lt;<span class="number">1</span> || ni&gt;n || nj&lt;<span class="number">1</span> || nj&gt;m)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ansmp[ni][nj] == ansmp[i][j])&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> d2 = <span class="number">0</span>;d2&lt;<span class="number">4</span>;d2++)&#123;</span><br><span class="line"><span class="keyword">int</span> mi = ni+dx[d2],mj = nj+dy[d2];</span><br><span class="line"><span class="keyword">if</span>(mi&lt;<span class="number">1</span> || mi&gt;n || mj&lt;<span class="number">1</span> || mj&gt;m)<span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">if</span>(ansmp[mi][mj] &amp;&amp; col[ansmp[mi][mj]])taken[col[ansmp[mi][mj]]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> cmin;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">26</span>;i++)<span class="keyword">if</span>(!taken[i])&#123; cmin = i; <span class="keyword">break</span>; &#125;</span><br><span class="line">col[ansmp[i][j]] = cmin;</span><br><span class="line">&#125;</span><br><span class="line">ans[i][j] = col[ansmp[i][j]]+<span class="string">'a'</span><span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(ans[i]+<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B-dp"><a href="#Prob-B-dp" class="headerlink" title="Prob B. dp"></a>Prob B. dp</h2><blockquote><p><em>Solved by nocriz at 01:17 (+)</em></p></blockquote><p>猜的结论是选 $k$ 个数的子序列一定包含选 $k-1$ 个数的最优答案，然后线段树搞一搞。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n,k,a[<span class="number">200020</span>],mi[<span class="number">800080</span>],lazy[<span class="number">800080</span>];</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; cho;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt;::iterator it;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">build</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;id&lt;&lt;' '&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">mi[id] = a[l];</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line">build(id*<span class="number">2</span>,l,mid);</span><br><span class="line">build(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">mi[id] = min(mi[id*<span class="number">2</span>],mi[id*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushd</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">mi[id] += lazy[id];</span><br><span class="line">lazy[id*<span class="number">2</span>]+=lazy[id];</span><br><span class="line">lazy[id*<span class="number">2</span>+<span class="number">1</span>] += lazy[id];</span><br><span class="line">lazy[id] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ft,fp;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">find_min</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="comment">//cout&lt;&lt;"fm "&lt;&lt;id&lt;&lt;' '&lt;&lt;mi[id]&lt;&lt;' '&lt;&lt;lazy[id]&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(l == r)&#123;</span><br><span class="line">ft = id;</span><br><span class="line">fp = l;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushd(id);</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(mi[id*<span class="number">2</span>]+lazy[id*<span class="number">2</span>]&lt;mi[id*<span class="number">2</span>+<span class="number">1</span>]+lazy[id*<span class="number">2</span>+<span class="number">1</span>])</span><br><span class="line"><span class="keyword">return</span> find_min(id*<span class="number">2</span>,l,mid);</span><br><span class="line"><span class="keyword">return</span> find_min(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">qadd</span><span class="params">(<span class="keyword">int</span> id,<span class="keyword">int</span> l,<span class="keyword">int</span> r,<span class="keyword">int</span> ql,<span class="keyword">int</span> qr,<span class="keyword">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(ql&gt;qr)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(l&gt;=ql &amp;&amp; r &lt;= qr)&#123;</span><br><span class="line">lazy[id]+=x;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">pushd(id);</span><br><span class="line"><span class="keyword">int</span> mid = (l+r)/<span class="number">2</span>;</span><br><span class="line"><span class="keyword">if</span>(qr&gt;mid)&#123;</span><br><span class="line">qadd(id*<span class="number">2</span>+<span class="number">1</span>,mid+<span class="number">1</span>,r,ql,qr,x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(ql&lt;=mid)&#123;</span><br><span class="line">qadd(id*<span class="number">2</span>,l,mid,ql,qr,x);</span><br><span class="line">&#125;</span><br><span class="line">mi[id] = min(mi[id*<span class="number">2</span>]+lazy[id*<span class="number">2</span>],mi[id*<span class="number">2</span>+<span class="number">1</span>]+lazy[id*<span class="number">2</span>+<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> INF = <span class="number">2147483647</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;k;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">&#125;</span><br><span class="line">build(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="comment">//cout&lt;&lt;233&lt;&lt;endl;</span></span><br><span class="line">find_min(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line"><span class="keyword">int</span> ans;</span><br><span class="line">ans = mi[ft]*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> cv = INF-(mi[ft]+lazy[ft]);</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,fp,fp,cv);</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,fp<span class="number">-1</span>,mi[ft]);</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,fp+<span class="number">1</span>,n<span class="number">-1</span>,mi[ft]);</span><br><span class="line"></span><br><span class="line">cho.insert(fp-n);</span><br><span class="line">cho.insert(fp);</span><br><span class="line">cho.insert(fp+n);</span><br><span class="line"><span class="comment">//cout&lt;&lt;fp-n&lt;&lt;' '&lt;&lt;fp&lt;&lt;' '&lt;&lt;fp+n&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;k;i++)&#123;</span><br><span class="line">find_min(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>);</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,fp,fp,INF-(mi[ft]+lazy[ft]));</span><br><span class="line">it = cho.upper_bound(fp);</span><br><span class="line"><span class="keyword">int</span> r = *it;</span><br><span class="line">it--;</span><br><span class="line"><span class="keyword">int</span> l = *it;</span><br><span class="line"><span class="comment">//cout&lt;&lt;fp&lt;&lt;' '&lt;&lt;l&lt;&lt;' '&lt;&lt;r&lt;&lt;endl;</span></span><br><span class="line">l = (l+n)%n;</span><br><span class="line">r = (r+n)%n;</span><br><span class="line">ans = max(ans,a[l]+a[fp]);</span><br><span class="line">ans = max(ans,a[fp]+a[r]);</span><br><span class="line"><span class="keyword">int</span> adl = max(a[l],a[fp])-max(a[l],a[r]),adr = max(a[r],a[fp])-max(a[l],a[r]);</span><br><span class="line"><span class="keyword">if</span>(l&lt;=fp)&#123;</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,l+<span class="number">1</span>,fp<span class="number">-1</span>,adl);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,l+<span class="number">1</span>,n<span class="number">-1</span>,adl);</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,fp<span class="number">-1</span>,adl);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(r&gt;=fp)&#123;</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,fp+<span class="number">1</span>,r<span class="number">-1</span>,adr);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,fp+<span class="number">1</span>,n<span class="number">-1</span>,adr);</span><br><span class="line">qadd(<span class="number">1</span>,<span class="number">0</span>,n<span class="number">-1</span>,<span class="number">0</span>,r<span class="number">-1</span>,adr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cho.insert(fp-n);</span><br><span class="line">cho.insert(fp);</span><br><span class="line">cho.insert(fp+n);</span><br><span class="line"><span class="comment">//cout&lt;&lt;fp-n&lt;&lt;' '&lt;&lt;fp&lt;&lt;' '&lt;&lt;fp+n&lt;&lt;endl;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-C-构造"><a href="#Prob-C-构造" class="headerlink" title="Prob C. 构造"></a>Prob C. 构造</h2><blockquote><p><em>Solved by YangDavid at 02:06 (+1)</em></p></blockquote><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>给定两个长度为 $n$ 的排列 $p,q$ 及正整数 $0 \leq k\leq \frac {n(n-1)}{2}$，你需要构造两个长度为 $n$ 的数列 $a,b$ 满足：</p><ul><li>$-n \leq a_i,b_i \leq n$</li><li>$a_{p_1} \leq a_{p_2} \leq \ldots \leq a_{p_n}$ </li><li>$b_{q_1} \leq b_{q_2} \leq \ldots \leq b_{q_n}$</li><li>满足下列条件的二元组 $(i,j)$ 个数恰为 $k$ :<ul><li>$1\leq i &lt; j \leq n$</li><li>$a_i + b_j &lt; 0$</li></ul></li></ul><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>我们按照 $\{q_1,q_2,\ldots,q_n\}$ 的顺序将数字 $-n,-n+1,\ldots,-1$ 插入 $b$ 的指定位置。假如当前正在向 $q_m$ 位置插入 $-n+m-1$，那么我们的行动方案是：</p><ul><li>如果 $q_m-1 \leq k$ ：把 $k$ 减去 $q_m - 1$ ，因为我们有把握 $(1,q_m),(2,q_m),\ldots,(q_m-1,q_m)$ 都能够成为有效的二元组。然后就考虑下一个位置了。</li><li>否则，按照 $p$ 的顺序将 $a$ 的 $[1,q_m-1]$ 区间中的前 $q_m-1-k$ 大的元素全部赋值为 $n-(m-1)$ ，这样这些数与 $b_{q_m}$ 恰好不会形成二元组，与之前的都可以形成二元组。然后再将之后所有的 $b_i$ 直接赋值为 $n$ 保证其不产生任何一个二元组。将 $a_i$ 按限制的情况赋值即可，没有限制的可以很小的都直接赋值为 $-n$，剩下的赋值为 $n-(m-1)$ 即可完成构造。</li></ul><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月23日 星期日 14时24分19秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">333333</span>;</span><br><span class="line">ll n, k, a[maxn], b[maxn], p[maxn] ,q[maxn], solved = <span class="literal">false</span>, where[maxn];</span><br><span class="line">ll wp[maxn], kcpy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(b, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> b);</span><br><span class="line">    <span class="built_in">memset</span>(a, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> a);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;n, &amp;k); kcpy = k;</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;p[i]), wp[i] = p[i];</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;q[i]), where[i] = q[i];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k &gt;= where[i] - <span class="number">1</span>) k -= (where[i] - <span class="number">1</span>), b[where[i]] = -n + i - <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            b[where[i]] = -n + i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">int</span> more = where[i] - <span class="number">1</span> - k;</span><br><span class="line">            <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; pos;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = n; j &gt;= <span class="number">1</span> &amp;&amp; more; --j) <span class="keyword">if</span>(wp[j] &lt; where[i]) &#123;</span><br><span class="line">                a[wp[j]] = n - (i - <span class="number">1</span>);</span><br><span class="line">                more--;</span><br><span class="line">                pos.push_back(j);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> start = pos.back(), end = pos.front();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = start; j &lt;= end; ++j)</span><br><span class="line">                a[wp[j]] = n - (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                a[wp[j]] = -n;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = start + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                a[wp[j]] = n - (i - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j)</span><br><span class="line">                b[where[j]] = n;</span><br><span class="line">            solved = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!solved) rep(i, n) a[i] = -n;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    rep(i, n) <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, a[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    rep(i, n) <span class="built_in">printf</span>(<span class="string">"%lld%c"</span>, b[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-D-线段树"><a href="#Prob-D-线段树" class="headerlink" title="Prob D. 线段树"></a>Prob D. 线段树</h2><blockquote><p><em>Upsolved by hdmmblz (+18)</em></p></blockquote><p>详见 cyy 博客？</p><h2 id="Prob-E-BM-算法"><a href="#Prob-E-BM-算法" class="headerlink" title="Prob E. BM 算法"></a>Prob E. BM 算法</h2><blockquote><p><em>Upsolved by hdmmblz (+5)</em> </p></blockquote><p>详见 cyy 博客。</p><h2 id="Prob-F-签到"><a href="#Prob-F-签到" class="headerlink" title="Prob F. 签到"></a>Prob F. 签到</h2><blockquote><p><em>Solved by hdmmblz at 00:16 (+)</em></p></blockquote><p>并查集入门题。</p><h2 id="Prob-G-拆分数，五边形数"><a href="#Prob-G-拆分数，五边形数" class="headerlink" title="Prob G. 拆分数，五边形数"></a>Prob G. 拆分数，五边形数</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>计数：求 $2n$ 个点，没有完美匹配，但是加上任何一条当前没有的边就会有完美匹配的互不同构无向简单图的数量。</p><p>$n\leq 5\cdot 10^5$ ，时限 5000 ms</p><h3 id="Hint"><a href="#Hint" class="headerlink" title="Hint"></a>Hint</h3><p>感觉只要提到考虑“同构”的无向图计数，而且数据范围还这么大的题目，很多都和整数分拆有关。像 Wannafly Winter Camp Day 7 Div. 1 G同构 一样。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>根据 <a href="https://en.wikipedia.org/wiki/Tutte%E2%80%93Berge_formula" target="_blank" rel="noopener">Tutte–Berge formula</a>：</p><blockquote><p>The theorem states that the size of a maximum matching of a graph $G=(V,E)$ equals</p><p><img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/554898c328ce8fa31e71fd86f48203cc8e269d67" alt="{\displaystyle {\frac {1}{2}}\min _{U\subseteq V}\left(|U|-\operatorname {odd} (G-U)+|V|\right),}"></p><p>where $\displaystyle \operatorname {odd} (H)$ counts how many of the <a href="https://en.wikipedia.org/wiki/Connected_component_(graph_theory" target="_blank" rel="noopener">connected components</a>) of the graph $H$ have an odd number of vertices.</p></blockquote><p>答案的图一定是包含若干个（不妨设为 $x\geq 1$ 个）度数为 $n-1$ 的顶点，然后去掉这 $x$ 个点后恰好余下 $x+2$ 个联通分量，且每个联通分量中恰有奇数个点。</p><p>对于固定的 $x$ ，这等价于将 $2n-x$ 分拆为 $x+2$ 个奇数，等价于将 $2n-2x-2$ 分拆为 $x+2$ 个非负偶数，等价于把 $n-x-1$ 个数分拆为 $x+2$ 个非负数，等价于将 $n+1$ 分拆为 $x+2$ 个正整数。</p><p>对 $x$ 求和，即可得到原问题等价于将  $n+1$ 分拆为 $2$ 个以上的正整数，即 $P(n+1)-1$ ，P(x) i表示 x 的整数分拆方案数。</p><h3 id="About-整数分拆"><a href="#About-整数分拆" class="headerlink" title="About 整数分拆"></a>About 整数分拆</h3><p>五边形数方法，复杂度 $O(n^{1.5})$ 。说来话长，明天再补。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月24日 星期一 21时31分50秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">510000</span>, MOD = <span class="number">998244353</span>, inv2 = (MOD + <span class="number">1</span>) / <span class="number">2</span>;</span><br><span class="line"><span class="keyword">int</span> n, penta[maxn], part[maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span>(x &gt;= MOD) x -= MOD; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123; x = mo(x + y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    part[<span class="number">0</span>] = part[<span class="number">1</span>] = penta[<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">3</span>; penta[i<span class="number">-2</span>] &lt;= x; i += <span class="number">2</span>) </span><br><span class="line">        penta[i] = penta[i<span class="number">-2</span>] + <span class="number">3</span>*(i&gt;&gt;<span class="number">1</span>) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">4</span>; penta[i<span class="number">-2</span>] &lt;= x; i += <span class="number">2</span>)</span><br><span class="line">        penta[i] = penta[i<span class="number">-2</span>] + <span class="number">3</span>*(i&gt;&gt;<span class="number">1</span>) - <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= x; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">2</span>; i - penta[j] &gt;= <span class="number">0</span>; ++j)</span><br><span class="line">            upd(part[i], (((j&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>)?<span class="number">1</span>:<span class="number">-1</span>) * part[i-penta[j]]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    init(n+<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mo(part[n+<span class="number">1</span>] - <span class="number">1</span>));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-H-另类构造"><a href="#Prob-H-另类构造" class="headerlink" title="Prob H. 另类构造"></a>Prob H. 另类构造</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>要你构造一个二分图，左右边点数都是 $n$。称左边的一个点集 $A$ 是 critical 的，当且仅当它和它对应的右边点的点集 $N(A)$ 满足：<br>$$<br>\mid N(A)\mid &lt; \mid A \mid<br>$$<br>现在给定 $k$ ，要求构造的二分图 critical 点集数量恰好为 $k$ </p><p>数据范围：$1\leq n \leq 20, 0\leq k &lt; 2^n$</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>解答就一句话：Young’s diagram satisfies the condition. Write and check.</p><p>Young’s diagram 这里具体指的是左边第一个点与右边 $\{1,2,\ldots,p_1\}$ 相连，第二个点与右边 $\{1,2,\ldots,p_2\}$ 相连，左边第 $n$ 个点右边 $\{1,2,\ldots,p_n\}$ 相连，并且 $p_1\leq p_2 \leq \ldots \leq p_n$ 。感觉这一步观察需要很深很深的构造直觉，简直想不到。</p><p>然后就是暴力 dp 了。令 $dp(n,m,k)$ 表示当前考虑到左边第 $n$ 个点，这个点与右边第 $m$ 个点对应，并且一共产生了 $k$  个 critical subset 是否可能。暴力转移，用 bitset 优化即可。要求构造方案，就倒着找一下即可。</p><p>复杂度 $O(n^3 \cdot 2^n)$ ，需要一定常数优化。</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月24日 星期一 11时28分08秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> GCC optimize(<span class="meta-string">"O3"</span>, <span class="meta-string">"Ofast"</span>)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>), maxn = <span class="number">29</span>, N = <span class="number">21</span>;</span><br><span class="line"><span class="built_in">bitset</span>&lt;maxs&gt; dp[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> C[maxn][maxn], suf[maxn][maxn];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    C[<span class="number">0</span>][<span class="number">0</span>] = suf[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; ++i) &#123;</span><br><span class="line">        C[i][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= i; ++j)</span><br><span class="line">            C[i][j] = C[i<span class="number">-1</span>][j<span class="number">-1</span>] + C[i<span class="number">-1</span>][j];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">            suf[i][j] = suf[i][j + <span class="number">1</span>] + C[i][j];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> n, k;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;k);</span><br><span class="line"></span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> nj = j; nj &lt;= n; ++nj) &#123;</span><br><span class="line">                <span class="keyword">int</span> nk = suf[i][nj];</span><br><span class="line">                dp[i + <span class="number">1</span>][nj] |= dp[i][j] &lt;&lt; nk;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pii ans = &#123;<span class="number">-1</span>, <span class="number">-1</span>&#125;;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; length(n + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= n; ++j) <span class="keyword">if</span>(dp[n][j][k])</span><br><span class="line">        ans = &#123;j, k&#125;;</span><br><span class="line">    assert(ans.first != <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> len = n - <span class="number">1</span>; len &gt;= <span class="number">0</span>; --len) &#123;</span><br><span class="line">        length[len + <span class="number">1</span>] = ans.first;</span><br><span class="line">        cnt += ans.first;</span><br><span class="line">        <span class="keyword">int</span> nk = suf[len][ans.first], p = ans.second - nk;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= ans.first; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[len][j][p]) &#123;</span><br><span class="line">                ans = &#123;j, p&#125;;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= length[i]; ++j)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d %d\n"</span>, i, j); </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-I-染色多项式，拉格郎日插值"><a href="#Prob-I-染色多项式，拉格郎日插值" class="headerlink" title="Prob I. 染色多项式，拉格郎日插值"></a>Prob I. 染色多项式，拉格郎日插值</h2><blockquote><p><em>Upsolved by YangDavid</em></p></blockquote><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>现有一个图，满足对于任何七个顶点组成的集合 $A$，都 $\exists a,b\in A,c\notin A$ 满足 $a\to b$ 的任何一条路径都必须经过 $c$ 。现在要求你求出这张图分别用 $1,2,\ldots,n$ 种颜色进行顶点染色的方案数。</p><p>数据范围 $1\leq n,m\leq 10^5$</p><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>那个古怪的条件到底是在说什么呢？考虑任何联通的 7 个顶点，都会使要求无法满足。那么自然每个联通块的大小都小于 7。由此就可以暴力每个联通块求染色多项式了。这里采用的是状压 dp + 拉格朗日插值的方法，每个联通块复杂度是 $O(k \cdot 3^k + k^2)$ , k 是联通块大小。具体做法是先 $O(3^k)$ 预处理出有效的染同种颜色的点集，然后 $dp[c][S]$ 表示已用 $c$ 种颜色，把 $S$ 这个顶点集染过色的方法数，枚举子集转移 dp。然后 $dp[0][FULL],dp[1][FULL],\ldots,dp[n][FULL]$ 这 $n+1$ 个点即可插值求出染色多项式。</p><p>之后考虑如何多点求值。如果 $n$ 个染色多项式暴力求值会变成 $O(n^2)$ 显然不行。实际上很多染色多项式都是相同的，打表知只有 73 种本质不同的染色多项式，因此每一种多项式记录一下数量，求值时快速幂即可满足时间要求。</p><p>总复杂度：$O(\frac nk \cdot ( k \cdot 3^k + k^2) + 73 \cdot n \cdot \log n) = O(n\cdot 3^k + 73 n\log n)$ </p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月23日 星期日 20时06分37秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">while</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L *x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">poly</span> &#123;</span> <span class="comment">// naive polynomial ops</span></span><br><span class="line">    <span class="keyword">int</span> deg;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; coef, at;</span><br><span class="line">    poly(<span class="keyword">int</span> degree): deg(degree) &#123;</span><br><span class="line">        coef.resize(deg + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span>&amp; <span class="keyword">operator</span> [] (<span class="keyword">int</span> idx) &#123; <span class="keyword">return</span> coef[idx]; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">get_at</span><span class="params">(<span class="keyword">int</span> to)</span> </span>&#123;</span><br><span class="line">        at.resize(to + <span class="number">1</span>, <span class="number">0</span>);</span><br><span class="line">        at[<span class="number">0</span>] = coef[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= to; ++i) &#123;</span><br><span class="line">            at[i] = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = deg; j &gt;= <span class="number">0</span>; --j)</span><br><span class="line">                at[i] = mo(muln(i, at[i]) + coef[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    poly <span class="keyword">operator</span> * (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="function">poly <span class="title">res</span><span class="params">(deg + rhs.deg)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= deg; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= rhs.deg; ++j) &#123;</span><br><span class="line">                res[i + j] = mo(res[i + j] + muln(coef[i], rhs.coef[j]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    poly <span class="keyword">operator</span> * (<span class="keyword">int</span> d) <span class="keyword">const</span> &#123;</span><br><span class="line">        poly res = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= deg; ++i)</span><br><span class="line">            res[i] = muln(res[i], d);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">poly <span class="title">divide</span><span class="params">(<span class="keyword">int</span> d)</span> <span class="keyword">const</span> </span>&#123; <span class="comment">// divide by (x - d)</span></span><br><span class="line">        poly cp = *<span class="keyword">this</span>, res(deg - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> g = deg; g &gt;= <span class="number">1</span>; --g) &#123;</span><br><span class="line">            res[g - <span class="number">1</span>] = cp[g];</span><br><span class="line">            cp[g - <span class="number">1</span>] = mo(cp[g - <span class="number">1</span>] + muln(cp[g], d));</span><br><span class="line">            cp[g] = <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        assert(cp[<span class="number">0</span>] == <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    poly <span class="keyword">operator</span> + (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg &gt; rhs.deg) &#123;</span><br><span class="line">            poly ans = *<span class="keyword">this</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= rhs.deg; ++i)</span><br><span class="line">                ans[i] = mo(ans[i] + rhs.coef[i]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            poly ans = rhs;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= deg; ++i)</span><br><span class="line">                ans[i] = mo(ans[i] + coef[i]);</span><br><span class="line">            <span class="keyword">return</span> ans;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> != (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg != rhs.deg) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = deg; i &gt;= <span class="number">0</span>; --i) <span class="keyword">if</span>(coef[i] != rhs.coef[i])</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> poly&amp; rhs) <span class="keyword">const</span> &#123; <span class="keyword">return</span> !(*<span class="keyword">this</span> != rhs); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function">poly <span class="title">interpolate</span><span class="params">(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;pii&gt;&amp; pt)</span> </span>&#123;</span><br><span class="line">    poly v(0), tmp(1), ans(pt.size() - 1); v[0] = tmp[1] = 1;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : pt) &#123;</span><br><span class="line">        tmp[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">        tmp[<span class="number">0</span>] = mo(-g.first);</span><br><span class="line">        v = v * tmp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sz = pt.size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> coef = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; sz; ++j) <span class="keyword">if</span>(j != i)</span><br><span class="line">            coef = muln(coef, mo(pt[i].first - pt[j].first));</span><br><span class="line">        coef = inv(coef);</span><br><span class="line">        ans = ans + v.divide(pt[i].first) * muln(pt[i].second, coef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; Graph;</span><br><span class="line"><span class="function">poly <span class="title">chromatic_polynomial</span><span class="params">(Graph g)</span> </span>&#123; <span class="comment">// index starts with 0 !</span></span><br><span class="line">    <span class="keyword">int</span> n = g.size(), full = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; dp(n + <span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(<span class="number">1</span> &lt;&lt; n, <span class="number">0</span>));</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; invalid(<span class="number">1</span> &lt;&lt; n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> j : g[i])</span><br><span class="line">            invalid[(<span class="number">1</span>&lt;&lt;i) | (<span class="number">1</span>&lt;&lt;j)] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt;= full; ++S)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> T = S; T; T = (T - <span class="number">1</span>) &amp; S)</span><br><span class="line">            <span class="keyword">if</span>(T != S) invalid[S] |= invalid[T];</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> c = <span class="number">1</span>; c &lt;= n; ++c) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt;= full; ++S) &#123;</span><br><span class="line">            <span class="keyword">int</span> fan = full ^ S;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> T = fan; ; T = (T - <span class="number">1</span>) &amp; fan) &#123;</span><br><span class="line">                <span class="keyword">if</span>(!invalid[T])</span><br><span class="line">                    dp[c][S | T] = mo(dp[c][S | T] + dp[c - <span class="number">1</span>][S]);</span><br><span class="line">                <span class="keyword">if</span>(T == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">vector</span>&lt;pii&gt; pts(n + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i)</span><br><span class="line">        pts[i] = &#123;i, dp[i][full]&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> interpolate(pts);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="keyword">int</span> vis[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;poly&gt; chp;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pcnt;</span><br><span class="line"><span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; ng;</span><br><span class="line"><span class="keyword">int</span> cc_cnt, nidx[maxn], cidx;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    vis[v] = cc_cnt, nidx[v] = cidx++;</span><br><span class="line">    ng.push_back(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;());</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!vis[g]) dfs(g);</span><br><span class="line">        ng[nidx[v]].push_back(nidx[g]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        <span class="keyword">int</span> x, y;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;x, &amp;y);</span><br><span class="line">        G[x].push_back(y);</span><br><span class="line">        G[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(!vis[i]) &#123;</span><br><span class="line">        cc_cnt++, cidx = <span class="number">0</span>;</span><br><span class="line">        ng.clear();</span><br><span class="line">        dfs(i);</span><br><span class="line">        poly chrome = chromatic_polynomial(ng);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">bool</span> found = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="keyword">int</span>(chp.size()); ++j) <span class="keyword">if</span>(chp[j] == chrome) &#123;</span><br><span class="line">            pcnt[j]++;</span><br><span class="line">            found = <span class="literal">true</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!found) pcnt.push_back(<span class="number">1</span>), chp.push_back(chrome);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> &amp;g : chp)</span><br><span class="line">        g.get_at(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> f = <span class="number">1</span>; f &lt;= n; ++f) &#123; </span><br><span class="line">        <span class="keyword">int</span> val = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">int</span>(chp.size()); ++i) &#123;</span><br><span class="line">            val = muln(val, qpow(chp[i].at[f], pcnt[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, val, <span class="string">" \n"</span>[f == n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-J-模型转化，WQS二分，斜率优化dp"><a href="#Prob-J-模型转化，WQS二分，斜率优化dp" class="headerlink" title="Prob J. 模型转化，WQS二分，斜率优化dp"></a>Prob J. 模型转化，WQS二分，斜率优化dp</h2><blockquote><p><em>Upsolved by YangDavid (+5)</em></p></blockquote><h3 id="Description-5"><a href="#Description-5" class="headerlink" title="Description"></a>Description</h3><p>给定一个数列 $a$ ，要求构造方案把它恰好分为 $k$ 个部分，记第 i 段的最大值为 $m_i$ ，第 i 段所有数的和为 $s_i$，要求你的构造满足：<br>$$<br>\forall  i\in [1,k-1],\text{  } |s_i - s_{i+1}| \leq \max(m_i,m_{i+1})<br>$$</p><h3 id="Solution-5"><a href="#Solution-5" class="headerlink" title="Solution"></a>Solution</h3><p>看起来就非常不可做，这也是这场比赛的一道防 AK 题。下面一步一步地讲明做法。</p><p><strong>第一步：模型转化</strong> </p><p>定理：如果把序列分成 $k$ 段，最小化 $\sum\limits_{i=1}^{k} s_i^2$ ，构造出的序列即满足要求。</p><p>证明：反证法，假如已经最小化上面的和之后仍然不满足。不妨设 1,2 段不满足，且 $s_1-s_2 &gt; \max(m_1,m_2)$ 。令 $x$ 为 $s_1$ 最右边的数，如果将其划入 $s_2$ ，则 $\sum\limits_{i=1}^{k} s_i^2$ 会变大如下数值：<br>$$<br>\begin{aligned}<br>b &amp;= (s_1 - x)^2 + (s_2 + x)^2 - s_1^2 - s_2^2\\<br>  &amp;= 2x(x-(s_1-s_2))<br>\end{aligned}<br>$$<br>由于 $s_1 - s_2 &gt; \max(m_1,m_2) \geq x$ ，故 $b&lt;0$ ，于是我们得到了一种调整方案使得 $\sum\limits_{i=1}^{k} s_i^2$ 变小，这与我们之前的假设矛盾，因此定理证毕。</p><p><strong>第二步：WQS 二分</strong></p><p>转化到上面的问题时，对于一个经验丰富的选手来说就做完了。可是之前没见过这个题怎么办啊！那就可以开始愉快的 DFS 学习过程了 23333</p><p>WQS 二分经常用于题目给了一个选物品的限制条件，要求刚好选<em>m</em>个，让你最大化（最小化）权值，然后其特点就是当选的物品越多的时候权值越大（越小）。设选 <em>j</em> 的数所的到的 dp 最大值为 <em>g</em>(<em>j</em>)，然后发现 <em>g</em>(<em>j</em>) 关于<em>j</em> 的<strong>斜率单调不增</strong>，也就是一个上凸包，并且如果这题没有刚好选 <em>m</em> 个的限制的时候就可以 dp 降维的话，那么就可以考虑一下 WQS 二分。（出处：<a href="https://www.cnblogs.com/CreeperLKF/p/9045491.html" target="_blank" rel="noopener">关于WQS二分算法以及其一个细节证明</a>）</p><p>这道题就可以。（这道题就是 WQS 论文的例题4 ）。降维后要给每件物品附上 $C$ 的权值之后，状态转移方程如下：<br>$$<br>dp(i) = \max_{0\leq j &lt; i} dp(j) + (sum(i)-sum(j))^2 + C<br>$$<br>这个 dp 可以进行斜率优化，写为下面的形式：<br>$$<br>dp(j) + sum^2(j) = 2sum(i)sum(j) + dp(i) - sum^2(i) - C<br>$$<br>可以注意到，要维护一个下凸包，新加入的点一定在凸包右侧，询问的斜率是单调不减的。因此斜率优化可以用单调队列维护，复杂度 $O(n)$。</p><p><strong>第三步：构造方案</strong></p><p>但是这样还没有完成，题目是要求构造方案的，而构造方案时可能会存在多点共线的情况。形式地说，附加权值是 $x$ 时跑斜率优化得到的个数 $C_1 &gt; k$ ，而附加权值为 $x+1$ 时得到的个数 $C_2&lt;k$ ，恰好无法二分到 $k$ 。</p><p>我们应该抓住问题的本质。无法二分到 $k$ 本质上因为斜率优化时多点共线，而胡乱转移 dp 就可能出现这种情况。仔细分析转移过程，是有很多种转移的过程就是从队头若干个斜率相等的点任取一个作为决策，然后将新的点加入队尾。考虑跑两次斜率优化 dp。</p><p>首先跑一次斜率优化 dp，每次决策都取斜率相等的点中长度最长的，找到长度最长的解，将每个位置的答案记为$dp_1[i]$, 长度记为 $len[i]$。</p><p>然后第二次斜率优化时，我们可以知道相比于第一次，长度需要缩短 $x = len[n] - k$ 。然后转移的时候就选择一个决策，使得转移之后的长度大于等于 $len[i] - x$ ，而又尽量接近 $len[i]-x$。</p><p>这两种决策都可以直接使用一个变量来维护，细节很多，编写代码时应当万分小心。</p><p>另：这道题斜率优化 dp 过程笔者没有找到避免使用 <code>__int128</code> 的方法，如果有这种方法，请指出。</p><h3 id="Code-5"><a href="#Code-5" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月29日 星期六 20时28分54秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll __int128</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;__int128, ll&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">double</span> db;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> BUFF_SIZE = <span class="number">1</span> &lt;&lt; <span class="number">20</span>;</span><br><span class="line"><span class="keyword">char</span> BUFF[BUFF_SIZE],*BB,*BE;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() (BB == BE ? (BE = (BB = BUFF) + fread(BUFF,1,BUFF_SIZE,stdin),BB == BE ? EOF : *BB++) : *BB++)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">111111</span>;</span><br><span class="line"><span class="keyword">const</span> ll INFL = <span class="number">0x3f3f3f3f3f3f3f3f</span>LL;</span><br><span class="line">ll n, k, a[maxn], sum[maxn], opt[maxn];</span><br><span class="line">pii dp[maxn]; <span class="comment">// &#123;min square sum, max item number&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> r(x) (q[q.size() + (x)])</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">CHT</span><span class="params">(ll C)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">auto</span> y = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> dp[j].first + sum[j] * sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> x = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> kk = [&amp;](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> <span class="number">2</span> * sum[i]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> getv = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j)-&gt;pii &#123; <span class="keyword">return</span> &#123;dp[j].first + (sum[i]-sum[j])*(sum[i]-sum[j]) + C, dp[j].second+<span class="number">1</span>&#125;; &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) &lt; (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; kk(i) == kk(i<span class="number">-1</span>)) opt[i] = opt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> opt[i] = q[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) == (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dp[opt[i]].second &lt; dp[q[<span class="number">0</span>]].second) opt[i] = q[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span>(dp[opt[i]].second &lt; dp[q[<span class="number">1</span>]].second) opt[i] = q[<span class="number">1</span>];</span><br><span class="line">            q.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        dp[i] = getv(i, opt[i]);</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; (y(r(<span class="number">-1</span>))-y(r(<span class="number">-2</span>)))*(x(i)-x(r(<span class="number">-1</span>))) &gt; (y(i)-y(r(<span class="number">-1</span>)))*(x(r(<span class="number">-1</span>))-x(r(<span class="number">-2</span>))))</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp[n].second;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ll pos[maxn];</span><br><span class="line">pii dp2[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Construct</span><span class="params">(ll C)</span> </span>&#123;</span><br><span class="line">    ll ss = dp[n].second - k;</span><br><span class="line">    <span class="keyword">auto</span> y = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> dp[j].first + sum[j] * sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> x = [&amp;](<span class="keyword">int</span> j) &#123; <span class="keyword">return</span> sum[j]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> kk = [&amp;](<span class="keyword">int</span> i) &#123; <span class="keyword">return</span> <span class="number">2</span> * sum[i]; &#125;;</span><br><span class="line">    <span class="keyword">auto</span> getv = [&amp;](<span class="keyword">int</span> i, <span class="keyword">int</span> j)-&gt;pii &#123; <span class="keyword">return</span> &#123;dp[j].first + (sum[i]-sum[j])*(sum[i]-sum[j]) + C, dp2[j].second+<span class="number">1</span>&#125;; &#125;;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    q.push_back(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) &lt; (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i))</span><br><span class="line">            q.pop_front();</span><br><span class="line">        <span class="keyword">if</span>(i&gt;<span class="number">1</span> &amp;&amp; kk(i) == kk(i<span class="number">-1</span>)) opt[i] = opt[i - <span class="number">1</span>];</span><br><span class="line">        <span class="keyword">else</span> opt[i] = q[<span class="number">0</span>];</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">auto</span> need = [&amp;](<span class="keyword">int</span> o) &#123; <span class="keyword">return</span> ss-dp[i].second+dp2[o].second+<span class="number">1</span>; &#125;;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; y(q[<span class="number">1</span>])-y(q[<span class="number">0</span>]) == (x(q[<span class="number">1</span>])-x(q[<span class="number">0</span>]))*kk(i)) &#123;</span><br><span class="line">            <span class="keyword">if</span>(need(q[<span class="number">0</span>]) == <span class="number">0</span>) opt[i] = q[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(need(q[<span class="number">1</span>]) == <span class="number">0</span>) opt[i] = q[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(need(q[<span class="number">0</span>]) &lt; need(opt[i])) opt[i] = q[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">if</span>(need(q[<span class="number">1</span>]) &lt; need(opt[i])) opt[i] = q[<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            q.pop_front();</span><br><span class="line">        &#125;</span><br><span class="line">        dp2[i] = getv(i, opt[i]);</span><br><span class="line">        <span class="keyword">while</span>(q.size() &gt; <span class="number">1</span> &amp;&amp; (y(r(<span class="number">-1</span>))-y(r(<span class="number">-2</span>)))*(x(i)-x(r(<span class="number">-1</span>))) &gt; (y(i)-y(r(<span class="number">-1</span>)))*(x(r(<span class="number">-1</span>))-x(r(<span class="number">-2</span>))))</span><br><span class="line">            q.pop_back();</span><br><span class="line">        q.push_back(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dp2[n].second;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">undef</span> r</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">read(n, k); <span class="comment">// deal with 0!!!</span></span><br><span class="line">    rep(i, n) read(a[i]), sum[i] = sum[i - <span class="number">1</span>] + a[i];</span><br><span class="line">    ll l = <span class="number">0</span>, r = INFL;</span><br><span class="line">    <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">        ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">int</span> ver = CHT(mid);</span><br><span class="line">        <span class="keyword">if</span>(ver &gt; k) l = mid + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(ver == k) &#123; l = r = mid; <span class="keyword">break</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(CHT(l) &lt; k) l--;</span><br><span class="line">    Construct(l);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ver;</span><br><span class="line">    <span class="keyword">int</span> cur = n;</span><br><span class="line">    <span class="keyword">while</span>(cur) &#123;</span><br><span class="line">        ver.push_back(cur);</span><br><span class="line">        cur = opt[cur];</span><br><span class="line">    &#125;</span><br><span class="line">    reverse(ver.begin(), ver.end());</span><br><span class="line">    ver.pop_back();</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">    <span class="keyword">bool</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ver) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-K-数学"><a href="#Prob-K-数学" class="headerlink" title="Prob K. 数学"></a>Prob K. 数学</h2><blockquote><p><em>Solved by nocriz, YangDavid</em></p></blockquote><h3 id="Description-6"><a href="#Description-6" class="headerlink" title="Description"></a>Description</h3><p>给你一个长度不超过 $3\cdot 10^5$ 的字符串，你可以进行在它的任意位置进行任意次下列操作：</p><ul><li>找到连续的 <code>aa</code> ，将它们删去；</li><li>找到连续的 <code>bbb</code> ，将它们删去；</li><li>找到任意连续的 <code>ababab</code> ，将它们删去；</li><li>在任意位置插入 <code>aa</code></li><li>在任意位置插入 <code>bbb</code></li><li>在任意位置插入 <code>ababab</code></li></ul><p>现在问你由原字符串能得到的长度为 $x$ 的本质不同的字符串有多少个？</p><p>数据范围：$x\leq 10^9$</p><h3 id="Solution-6"><a href="#Solution-6" class="headerlink" title="Solution"></a>Solution</h3><p>wzk: 这题简直不能做啊，无从下手<br>yd: 连暴力的 dp 都没法写啊。。。<br>wzk: 我发现好像字符串之间有一些蛮有趣的等价关系，比如 <code>abb</code> 可以等价于 <code>baba</code>  。<br>yd: 这个性质有点厉害啊，我仔细看看。诶，这么做的话，我先按操作 5,6 把原字符串消除，再用这条规则就可以杜绝掉非开头处 bb 连续出现的情况了。那么答案串一定等价于下面字符串的某一个子串：<br>$$<br>bbababa<br>$$<br>（在草稿纸上列出了所有 18 种可能的字符串，并且把相互的转移都讨论清楚了）</p><p>yd: 这样好像就做完了，首先建出图来，识别出原串是哪一种；然后就是个矩阵快速幂了。复杂度 $O(18^3 \cdot \log x)$ 。<br>wzk: 用不用考虑这 18 中串的等价的情况呢？<br>yd: 应该不用吧。。。<br>wzk: 好的，我来写。<br>wzk: What，怎么过不了样例啊。哦我发现等价的情况是影响答案的，有 6 对等价的字符串呢。合并等价情况之后还剩下 12 种，这样就可以过样例了。看吧，果然 AC 了。</p><p>赛后：题解上说这个图是 tetrahedral symmetric group 的表示。有点高端啊，有时间研究研究。</p><h3 id="Code-6"><a href="#Code-6" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> set0(x) memset(x,0,sizeof(x))</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> l[<span class="number">20</span>] = &#123;<span class="number">1</span>,<span class="number">0</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">5</span>,<span class="number">4</span>&#125;,r[<span class="number">20</span>] = &#123;<span class="number">6</span>,<span class="number">2</span>,<span class="number">9</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> trans[<span class="number">18</span>][<span class="number">18</span>],ans[<span class="number">18</span>][<span class="number">18</span>],buf[<span class="number">18</span>][<span class="number">18</span>],same[<span class="number">18</span>][<span class="number">18</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">char</span> ch[<span class="number">300030</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">6</span>;i&lt;<span class="number">18</span>;i++)&#123;</span><br><span class="line">l[i] = (l[i<span class="number">-6</span>]+<span class="number">6</span>)%<span class="number">18</span>;</span><br><span class="line">r[i] = (r[i<span class="number">-6</span>]+<span class="number">6</span>)%<span class="number">18</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;ch&gt;&gt;m;</span><br><span class="line"><span class="keyword">int</span> reqr = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch[i] == <span class="string">'a'</span>)reqr = l[reqr];</span><br><span class="line"><span class="keyword">else</span> reqr = r[reqr];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++) &#123;</span><br><span class="line">ans[i][i] = <span class="number">1</span>;</span><br><span class="line">same[i][i] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">12</span>;i+=<span class="number">6</span>)&#123;</span><br><span class="line">same[i][(i+<span class="number">11</span>)%<span class="number">18</span>] = <span class="number">1</span>;</span><br><span class="line">same[(i+<span class="number">11</span>)%<span class="number">18</span>][i] = <span class="number">1</span>;</span><br><span class="line">same[i+<span class="number">1</span>][(i+<span class="number">10</span>)%<span class="number">18</span>] = <span class="number">1</span>;</span><br><span class="line">same[(i+<span class="number">10</span>)%<span class="number">18</span>][i+<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++) trans[i][l[i]] = trans[i][r[i]] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(m)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(m&amp;<span class="number">1</span>)&#123;</span><br><span class="line">set0(buf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">18</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">18</span>;k++) buf[i][j] = (<span class="number">1l</span>l*trans[i][k]*ans[k][j]+buf[i][j])%mod;</span><br><span class="line"><span class="built_in">memcpy</span>(ans,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">&#125;</span><br><span class="line">set0(buf);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">18</span>;i++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">18</span>;j++)</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>;k&lt;<span class="number">18</span>;k++) buf[i][j] = (<span class="number">1l</span>l*trans[i][k]*trans[k][j]+buf[i][j])%mod;</span><br><span class="line"><span class="built_in">memcpy</span>(trans,buf,<span class="keyword">sizeof</span>(buf));</span><br><span class="line">m&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> rans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;<span class="number">18</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(same[reqr][j])rans = (rans+ans[<span class="number">0</span>][j])%mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;rans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;b&gt;&lt;font size=&quot;10&quot; face=&quot;courier new, monospace&quot;&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;A&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;B&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;C&lt;/span&gt;&lt;span style=&quot;color:#ee82ee;&quot;&gt;D&lt;/span&gt;&lt;span style=&quot;color:#ee82ee;&quot;&gt;E&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;F&lt;/span&gt;&lt;span style=&quot;color:#ee82ee;&quot;&gt;G&lt;/span&gt;&lt;span style=&quot;color:#ee82ee;&quot;&gt;H&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;I&lt;/span&gt;&lt;span style=&quot;color:#ee28ee;&quot;&gt;J&lt;/span&gt;&lt;span style=&quot;color:#00ff00;&quot;&gt;K&lt;/span&gt;&lt;/font&gt;&lt;/b&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
      <category term="一般图最大匹配" scheme="http://yoursite.com/tags/%E4%B8%80%E8%88%AC%E5%9B%BE%E6%9C%80%E5%A4%A7%E5%8C%B9%E9%85%8D/"/>
    
      <category term="五边形数" scheme="http://yoursite.com/tags/%E4%BA%94%E8%BE%B9%E5%BD%A2%E6%95%B0/"/>
    
      <category term="染色多项式" scheme="http://yoursite.com/tags/%E6%9F%93%E8%89%B2%E5%A4%9A%E9%A1%B9%E5%BC%8F/"/>
    
      <category term="拉格郎日插值" scheme="http://yoursite.com/tags/%E6%8B%89%E6%A0%BC%E9%83%8E%E6%97%A5%E6%8F%92%E5%80%BC/"/>
    
      <category term="WQS二分" scheme="http://yoursite.com/tags/WQS%E4%BA%8C%E5%88%86/"/>
    
      <category term="斜率优化dp" scheme="http://yoursite.com/tags/%E6%96%9C%E7%8E%87%E4%BC%98%E5%8C%96dp/"/>
    
  </entry>
  
  <entry>
    <title>暑期ACM训练记录</title>
    <link href="http://yoursite.com/2019/06/20/%E6%9A%91%E6%9C%9FACM%E8%AE%AD%E7%BB%83%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/06/20/暑期ACM训练记录/</id>
    <published>2019-06-20T11:40:45.000Z</published>
    <updated>2019-07-22T17:23:35.394Z</updated>
    
    <content type="html"><![CDATA[<p>Everything that kills me makes me feel alive.<br>Everything that drowns me makes me wanna fly.</p><a id="more"></a><h1 id="Personal-Training"><a href="#Personal-Training" class="headerlink" title="Personal Training"></a>Personal Training</h1><p>（注：Virtual Participation 的比赛可以在”一句话题解集锦“中找到题解，正式赛会有博客题解链接。）</p><p>2019.06.20 <em>vp</em> Codeforces Global Round 3 <code>con:4/8</code> <code>sol:6/8</code>  <code>rk:559/5320</code><br>2019.06.22 <em>vp</em> Codeforces Round #569 (Div. 1) <code>con:3/5</code> <code>sol:3/5</code> <code>rk:89/511</code><br>2019.06.30 Educational Codeforces Round 67 (Rated for Div. 2) <code>con:4/7</code> <code>sol:6/7</code> <code>rk:59/5548</code> G<br>2019.07.07 <em>vp</em> Codeforces Round #572 (Div. 1) <code>con:2/6</code> <code>sol:3/6</code> <code>rk:179/519</code> C D E<br>2019.07.09 Helvetic Coding Contest <code>sol:11/14</code><br>2019.07.12 AtCoder Grand Contest 001 <code>sol:6/6</code> <strong>DONE</strong><br>2019.07.12 Codeforces Round #573 (Div. 1) <code>sol:2/6</code><br>2019.07.13 LOJ NOI Round Day 2 <code>sol:100/300</code><br>2019.07.14 AtCoder Grand Contest 002 <code>sol:3/6</code><br>2019.07.14 AtCoder Grand Contest 035 <code>con:2/6</code> <code>sol:5/6</code> <code>rk:159</code> E<br>2019.07.16 NOI2019 Online Mirror Day1 <code>sol:250/300</code><br>2019.07.18 NOI2019 Online Mirror Day2 <code>sol:150/300</code><br>2019.07.20 Codeforces Global Round 4  <code>sol:6/9</code><br>2019.07.21 AtCoder Grand Contest 036 <code>con:3/6</code> <code>sol:4/6</code> <code>rk:124</code> E F</p><h1 id="Team-Training"><a href="#Team-Training" class="headerlink" title="Team Training"></a>Team Training</h1><p>2019.06.23 Petrozavodsk Winter-2019. 300iq Contest 1 <code>con:4/11</code> <code>sol:11/11</code> <code>rk:22/68</code> <strong>DONE</strong><br>2019.06.28 SEERC 2018 <code>con:5/11</code> <code>sol:10/11</code> <code>rk:34/155</code> K<br>2019.07.04 XIX Open Cup named after E.V. Pankratiev. Grand Prix of China <code>con:3/11</code> <code>sol:4/11</code> <code>rk:35/149</code><br>2019.07.18 牛客暑期多校训练赛1 <code>con:5/10</code> <code>sol:9/10</code> <code>rk:40/975</code> G<br>2019.07.20 牛客暑期多校训练赛2 <code>con:3/10</code> <code>sol:6/10</code> <code>rk:41/760</code><br>2019.07.22 杭电多校训练赛1 <code>con:6/13</code> <code>sol:7/13</code> <code>rk:24/995</code></p><h1 id="Algorithm-Learning"><a href="#Algorithm-Learning" class="headerlink" title="Algorithm Learning"></a>Algorithm Learning</h1><p>2019.06.25 单调队列、斜率优化 dp 学习笔记<br>2019.07.08 AC 自动机学习笔记</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Everything that kills me makes me feel alive.&lt;br&gt;Everything that drowns me makes me wanna fly.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Codeforces Round #564 (Div. 1) 自闭记</title>
    <link href="http://yoursite.com/2019/06/08/Codeforces-Round-564-Div-1-%E8%87%AA%E9%97%AD%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/08/Codeforces-Round-564-Div-1-自闭记/</id>
    <published>2019-06-07T16:01:25.000Z</published>
    <updated>2019-06-11T15:48:57.917Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-564-Div-1"><a href="#Codeforces-Round-564-Div-1" class="headerlink" title="Codeforces Round 564 (Div. 1)"></a>Codeforces Round 564 (Div. 1)</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C1</th><th style="text-align:center">C2</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">01:08</td><td style="text-align:center">01:34</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">462</td><td style="text-align:center">461</td><td style="text-align:center">213</td><td style="text-align:center">70</td><td style="text-align:center">22</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">模拟</td><td style="text-align:center">简单数学</td><td style="text-align:center">期望</td><td style="text-align:center">期望</td><td style="text-align:center">构造</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">2031</font></td><td style="text-align:center"><font color="green">1094</font></td><td style="text-align:center"><font color="green">1959</font></td><td style="text-align:center"><font color="green">1959</font></td><td style="text-align:center"><font color="grey">1079</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><ul><li>Solved during contest: <code>2/6</code> </li><li>Upsolved: <code>4/6</code></li><li>Orally upsolved: <code>4/6</code></li><li>Rank: <code>396/553</code></li><li>Rating: (-8)</li></ul><p>又是一个中国场，又是一个 Div. 1，又是一个被签到题吊打系列。。。题目质量还不错，可是不知道为什么，每次打 Div. 1 老是签到签不稳，这根本不行啊。然后 C 题都想对了，但是没时间写了。</p><a id="more"></a><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p>Contest ID: 1172</p><p><a href="https://codeforces.com/contest/1172" target="_blank" rel="noopener">Contest Link</a></p><p><a href="https://codeforces.com/contest/1172/problems" target="_blank" rel="noopener">Problemset Link</a></p><p><a href="https://codeforces.com/blog/entry/67511" target="_blank" rel="noopener">Editorial Link (en)</a></p><p><a href="https://ouuan.github.io/Codeforces-Round-564-%E4%B8%AD%E6%96%87%E9%A2%98%E8%A7%A3/" target="_blank" rel="noopener">Editorial Link(zh)</a></p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Prob-A-麻烦的签到题"><a href="#Prob-A-麻烦的签到题" class="headerlink" title="Prob A. 麻烦的签到题"></a>Prob A. 麻烦的签到题</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>共有 $2n$ 张牌，其中有 $n$ 张是 0 ，另外 n 张分别是 $1,2, \ldots, n$ 。牌桌上有一个某 $n$ 张牌组成的队列，你手中则拿着剩下的 $n$ 张牌。你每次操作都是将手中的一张牌加入队列末尾，并且把队列头的牌加入手牌中。问至少需要几次可以使得队列中的牌从队列头到队列尾恰好为 $1,2,\ldots,n$ 。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>很令人讨厌的签到题，费了我一个小时时间，还 RE 了一次。我写的是贪心+大模拟，每一时刻都检查能否顺着把序列排列出来，如果可以，立即果断行动。否则，如果手中有0就打出0 ，没有 0 就打出最大的牌。可以证明次数不超过 $2n$ ，因此模拟即可。注意特判这种情况：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月07日 星期五 20时31分52秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>;</span><br><span class="line"><span class="keyword">int</span> my[maxn], n, pile[maxn], start = <span class="number">-1</span>, zero, tim, match;</span><br><span class="line"><span class="built_in">set</span>&lt;<span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt; &gt; st;</span><br><span class="line"><span class="built_in">deque</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ins</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">0</span>) zero++;</span><br><span class="line">    <span class="keyword">else</span> st.insert(x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;my[i]);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;pile[i]);</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    againqaq:;</span><br><span class="line">    st.clear();</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) q.pop_back();</span><br><span class="line">    rep(i, n) q.push_back(pile[i]);</span><br><span class="line">    zero = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(pile[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j= i + <span class="number">1</span>; j &lt;= n; ++j) <span class="keyword">if</span>(pile[j] != j - i + <span class="number">1</span>)</span><br><span class="line">                ok = <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">                match = n - i + <span class="number">1</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> tim = max(tim, -pile[i] + i + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(pile[i]) tim = max(tim, -pile[i] + i + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(my[i] == <span class="number">0</span>) zero++;</span><br><span class="line">        <span class="keyword">else</span> st.insert(my[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>, ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(now &lt; tim) match = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(now &lt; tim) &#123;</span><br><span class="line">        <span class="keyword">if</span>(zero) &#123;</span><br><span class="line">            zero--;</span><br><span class="line">            q.push_back(<span class="number">0</span>);</span><br><span class="line">            ins(q.front());</span><br><span class="line">            q.pop_front();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> po = *st.begin(); st.erase(po);</span><br><span class="line">            q.push_back(po);</span><br><span class="line">            tim = max(tim, now + n - po + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        now++, ans++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(match &lt; n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!st.count(match + <span class="number">1</span>)) &#123;</span><br><span class="line">            ok = <span class="literal">false</span>;</span><br><span class="line">            now = ans = match = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">goto</span> againqaq;</span><br><span class="line">        &#125;</span><br><span class="line">        st.erase(match + <span class="number">1</span>);</span><br><span class="line">        q.push_back(match + <span class="number">1</span>);</span><br><span class="line">        ins(q.front());</span><br><span class="line">        q.pop_front();</span><br><span class="line">        match++, now++, ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B-简单数学"><a href="#Prob-B-简单数学" class="headerlink" title="Prob B. 简单数学"></a>Prob B. 简单数学</h2><p>水题。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月07日 星期五 21时26分05秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"><span class="keyword">int</span> n, xp, yp, sz[maxn], ans, fac[maxn], sons[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> v, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    sz[v] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[v]) <span class="keyword">if</span>(g != fa) &#123;</span><br><span class="line">        sons[v]++;</span><br><span class="line">        dfs(g, v);</span><br><span class="line">        sz[v] += sz[g];</span><br><span class="line">        ans = muln(ans, fac[sons[g] + <span class="number">1</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(v == <span class="number">1</span>) ans = muln(ans, fac[sons[v]]);</span><br><span class="line">    <span class="comment">//ans = muln(ans, fac[sons]);</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i&lt;= <span class="number">200010</span>; ++i)</span><br><span class="line">        fac[i] = muln(fac[i - <span class="number">1</span>], i);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n), ans = n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;xp, &amp;yp);</span><br><span class="line">        G[xp].push_back(yp);</span><br><span class="line">        G[yp].push_back(xp);</span><br><span class="line">    &#125;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-C-概率"><a href="#Prob-C-概率" class="headerlink" title="Prob C. 概率"></a>Prob C. 概率</h2><p>结论一猜就中。暴力 dp 即可 $O(m^2)$ 。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月07日 星期五 21时59分19秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">222222</span>, maxm = <span class="number">3333</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y )</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>; </span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">inverse</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> qpow(x, MOD - <span class="number">2</span>); &#125;</span><br><span class="line"><span class="keyword">int</span> a[maxn], w[maxn], n, m, like, diss, tot, dp[maxm][maxm], _inv[maxm * <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> ans[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">inv</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">return</span> _inv[x - tot + m]; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">upd</span><span class="params">(<span class="keyword">int</span> &amp;x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    x += y;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) <span class="keyword">return</span> x - MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> x + MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;w[i]);</span><br><span class="line">    rep(i, n) a[i] ? (like += w[i]) : (diss += w[i]);</span><br><span class="line">    tot = like + diss;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = max(<span class="number">0</span>, tot-m); i &lt;= tot+m; ++i) </span><br><span class="line">        _inv[i - tot + m] = inverse(i);</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> add = <span class="number">0</span>; add &lt;= i; ++add) &#123;</span><br><span class="line">            <span class="keyword">int</span> sub = i - add, nlike = like+add, ndiss = diss-sub;</span><br><span class="line">            <span class="keyword">int</span> ntot = nlike + ndiss, ntot_inv = inv(ntot);</span><br><span class="line">            upd(dp[i + <span class="number">1</span>][add], muln(dp[i][add], muln(ndiss, ntot_inv)));</span><br><span class="line">            upd(dp[i + <span class="number">1</span>][add + <span class="number">1</span>], muln(dp[i][add], muln(nlike, ntot_inv)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> exp_add = <span class="number">0</span>, exp_sub = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> add = <span class="number">0</span>; add &lt;= m; ++add) &#123;</span><br><span class="line">        upd(exp_add, muln(dp[m][add], add));</span><br><span class="line">        upd(exp_sub, muln(dp[m][add], m-add));</span><br><span class="line">    &#125;</span><br><span class="line">    exp_add = muln(exp_add, inverse(like));</span><br><span class="line">    exp_sub = muln(exp_sub, inverse(diss));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i]) <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mo(w[i] + muln(w[i], exp_add))); </span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, mo(w[i] - muln(w[i], exp_sub)));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-D-构造"><a href="#Prob-D-构造" class="headerlink" title="Prob D. 构造"></a>Prob D. 构造</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>在一个 $n\times n$ 的网格里放传送门，指定从第 $i$ 行进从第 $r_i$ 行出，从第 $i$ 列进从第 $c_i$列出，r, c 都是排列，求构造放置传送们的一种方案。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>考虑数学归纳法，只需要解决到第一行的和到第一列的。</p><ul><li><p>如果恰好第一行要到达第一行，第一列要到达第一列，那么就不用管，直接看下一行下一列；</p></li><li><p>否则记第 r 行将要到达第一行，第 c 列将要到达第一列，那么我就在 (r, 1) 和 (1, c) 这两个地方放传送门，并且将第 r 行的目标从第一行改为第一行的目标，把第 c 列的目标改为第一列的目标即可（这个过程本质是链表的删除操作）。由此归纳即可。</p></li></ul><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年06月11日 星期二 22时43分05秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;pii, pii&gt; ppp;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1111</span>;</span><br><span class="line"><span class="keyword">int</span> go_r[maxn], go_c[maxn], n, which_r[maxn], which_c[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;go_r[i]);</span><br><span class="line">        which_r[go_r[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;go_c[i]);</span><br><span class="line">        which_c[go_c[i]] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;ppp&gt; ans;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">if</span>(which_r[i] == i &amp;&amp; which_c[i] == i) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">int</span> r = which_r[i], c = which_c[i];</span><br><span class="line">        ans.push_back(&#123;&#123;which_r[i], i&#125;, &#123;i, which_c[i]&#125;&#125;);</span><br><span class="line">        which_r[go_r[i]] = r;</span><br><span class="line">        which_c[go_c[i]] = c;</span><br><span class="line">        go_r[r] = go_r[i];</span><br><span class="line">        go_c[c] = go_c[i];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> sz = ans.size();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, sz);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : ans)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d %d %d %d\n"</span>, g.first.first, g.first.second, g.second.first, g.second.second);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codeforces-Round-564-Div-1&quot;&gt;&lt;a href=&quot;#Codeforces-Round-564-Div-1&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Round 564 (Div. 1)&quot;&gt;&lt;/a&gt;Codeforces Round 564 (Div. 1)&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C1&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C2&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:08&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:34&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;462&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;461&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;213&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;70&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;22&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;模拟&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;简单数学&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;期望&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;期望&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;构造&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;2031&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1094&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1959&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1959&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;1079&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest: &lt;code&gt;2/6&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Upsolved: &lt;code&gt;4/6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved: &lt;code&gt;4/6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;396/553&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rating: (-8)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;又是一个中国场，又是一个 Div. 1，又是一个被签到题吊打系列。。。题目质量还不错，可是不知道为什么，每次打 Div. 1 老是签到签不稳，这根本不行啊。然后 C 题都想对了，但是没时间写了。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="Codeforces" scheme="http://yoursite.com/tags/Codeforces/"/>
    
  </entry>
  
  <entry>
    <title>2019年ACM-ICPC陕西省赛游记</title>
    <link href="http://yoursite.com/2019/06/02/2019%E5%B9%B4ACM-ICPC%E9%99%95%E8%A5%BF%E7%9C%81%E8%B5%9B%E6%B8%B8%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/06/02/2019年ACM-ICPC陕西省赛游记/</id>
    <published>2019-06-02T13:15:01.000Z</published>
    <updated>2019-06-07T11:42:44.781Z</updated>
    
    <content type="html"><![CDATA[<h1 id="游记"><a href="#游记" class="headerlink" title="游记"></a>游记</h1><p>夺冠了！作为和  <font color="red"><b>nocriz</b></font>，<font color="red"><b>hdmmblz</b></font> 一起组队打的第一场比赛，这也算是一个开门红吧，这次的解题策略与团队合作等诸多方面都做得还不错，出的锅也不算特别多。不过这也仅仅是一个省赛，仅仅是一个起点，以后的路还长，以后的目标需要远大！我们有了方向，有了动力，更有了顶天立地的决心。</p><a id="more"></a><p>不过这次去除两个高中打星队我们才夺的冠，那两个队一个 11 题，一个 10 题，还是被高中省队爷吊打了啊，感觉还是要提高啊。（被“丁教练”教育了qaq）</p><p><img src="education-1.jpg" alt="被教育现场1"> </p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>上午 06:40 就早早地起床，集合，前往 XDU。路上水掉了 wzk 讲的一个张好风出的构造题，感觉海星。</p><p>到了 XDU ，拿好衣服之后打了一个极为自闭的热身赛。首先是发现电脑的 Ubuntu 双系统里面居然没有 vim，没有各种常见编辑器，打算换用 gedit 之后，发现居然没有网络，无法查看题面。一阵忙乱之中我们又改用 windows + Dev-cpp，结果发现电脑又没有 python，g++也没有加入 PATH 环境变量里。这时开始看热身赛的题目，wzk 几分钟秒掉了 A ，我提出了 B 题最短路+欧拉回路的做法，然而<strong>没有人熟悉欧拉回路怎么写</strong>！！！稍微讨论回忆了一下，构思好代码之后 wzk 开始写。cyy 和我思博了，一直对着 C 题自闭。最后 B 没写出来， C 也没做出来。结果 wzk 赛后直接一眼秒掉了 C。总的来看，热身赛什么环境也没来得及测，题目也只 A 了一道，感觉主要就是用来 rp++ 了。</p><p>下图是我们比赛的机位：</p><p><img src="place.jpg" alt="我们的机位（真乱！）"></p><h2 id="正赛"><a href="#正赛" class="headerlink" title="正赛"></a>正赛</h2><p>参加完豪华<del>（简单）</del>的露天开幕式之后马上就要正赛了，感觉心里还蛮没底的。稍微调整了下状态，比赛开始了（喂，比赛没开始为什么大家都开始启封试题册了啊！）。wzk 悄悄以惊人的手速 10 分钟 <strong>1A 了三道签到题EFL</strong> 并拿到了 E  题的一血，简直太强了，这三道题我场上甚至根本没看。</p><p>之后开始多线程， wzk 看 C 写 C，结果 wa 了；这大概经过了 20 分钟，与此同时我和 cyy 互相交换了 H，I，J 三道题的题意。I 题稍微讨论了一下就会了，wzk 打印了 C 题代码，cyy 给 wzk 讲了 I ，wzk 开始写。我发现 H 是擅长的构造，我又发现这题和华东师大校赛的 C 题极为相似，于是决定仔细想 H，过了一会儿就会做了，给 cyy 讲了做法，cyy 觉得很正确，于是我仔细构思了下代码，觉得很好写。wzk 写好 I了，可是 wa 了，找出了好几个细节错误。打印代码后，我上机写 H。cyy 和 wzk 一起小黄鸭，发现了所有错误，改了之后提交，总算<strong>通过了 I 题</strong>，并拿到了一血。过了一会儿，我写完了 H ，测了测样例，手测几组数据，觉得稳得很，于是提交，<strong>1A了 H 题</strong>，并且还拿到了这道题一血。这时我们的士气很高涨，排在 rank 1，I，H 题仅仅有我们队通过，第二名仅仅才 4 道题，拿了两个一血，时间也才仅仅过去 74 分钟。</p><p>继续多线程，wzk 发现交大“免费赠送AC帽”队拿到了 B 题的一血，于是跟了下榜，发现是思博题，于是开始写。cyy 提出几种 J 做法，感觉找到了靠谱做法了，于是又屯下一题。wzk <strong>A掉了 B 题</strong>，cyy 开始给 wzk 讲 J 题，我把没看的题目都看了一遍，主要在想 D 题。wzk 开写 B 了，cyy 提出 K 题解法，但是我有点怀疑正确性。wzk J 题神秘地 TLE 了，在我<del>强烈</del>要求下不辞辛劳把 <code>cin</code> 改为了 <code>fread+getchar</code> ，又手动开了 O3，Ofast，然后就神奇<strong>通过了 J 题</strong>。wzk 确认了 cyy K 题解法的正确性，cyy 上机写 K 题，用了 20 多分钟也写好<strong>过掉了 K 题</strong> 。</p><p>与此同时，我一直在试图对 D 题进入大型分类讨论。我分了一维三种情况以及二位的六种情况，都将思路整理到之上了。wzk 建议看一看 C ，这时我们才意识到 WA 了很久扔在那里的题目。wzk 打算写 A 题试一试，我和 cyy 想了 C 的一些假做法，最后得到的结论 wzk 说就是当时 wa 的代码的思路。我发现有个小情况忘记考虑了，加上去之后大家不太相信正确性，可是我觉得很稳，结果<strong>交上去就 AC 了C题</strong>。</p><p>这时已经封榜了，我们手上有DAG三道题，有 40 分钟的时间。D题所有情况已经讨论完成了，A 题wzk写好了，但是交上去铁定会 TLE。wzk 试图优化 A ，可是没什么头绪。 D 题代码量巨大，细节繁琐，我硬着头皮上去写，cyy 在旁别即时检查。结果最后 2 分钟终于写完了代码，可是没时间调试了，直接交上去 WA 了，本地测了下也过不了样例，没有办法了，被高中生吊打了。</p><p><img src="my-score.jpg" alt="最终提交情况"></p><p>比较幸运的是，正式选手中我们还是拿到了 rank 1，拿到了冠军奖杯。（免费赠送AC帽队第四，他们差点就也 9 题了，真为他们可惜 qwq）</p><p><img src="champion.jpg" alt="champion"></p><p>总的来看：</p><ul><li>Solved during contest: <code>9/12</code> </li><li>Upsolved: <code>9/12</code></li><li>Orally upsolved: <code>9/12</code></li><li>Rank: <code>1/105</code> (Official), <code>3/111</code> (Full rank)</li></ul><p>出现的问题集锦：</p><ul><li>（热身赛）没有人会熟练实现欧拉回路</li><li>大数据读入时仍使用 <code>cin</code></li><li>C 题 wzk 开始想的是正解，结果因为小情况 wa 而误以为算法假了</li><li>最后一个小时还是划了，D 讨论得还是不全面，主要是没有信心，写代码的时候中途我掉线了。</li><li>A 题写好后以为会 TLE 就没有提交，但实际上复杂度是正确的。</li></ul><p>做得比较好的地方集锦：</p><ul><li>基本做到了多线程</li><li>让 wzk 去签到</li><li>快速做出了构造题</li><li>cyy 力排众议，写了 K 题看似无脑的做法通过了</li><li>每次提交前的检查还算仔细</li></ul><h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><a href="http://acm.zju.edu.cn/onlinejudge/searchProblem.do?contestId=1&amp;titlefrom=0&amp;authorfrom=0&amp;sourcefrom=0&amp;query=The+2019+ICPC+China+Shaanxi+Provincial+Programming+Contest" target="_blank" rel="noopener">Practice Link</a></p><p><a href="scoreboard.pdf">Score Board</a>：</p><div class="row">    <embed src="scoreboard.pdf" width="100%" height="550" type="application/pdf"></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;游记&quot;&gt;&lt;a href=&quot;#游记&quot; class=&quot;headerlink&quot; title=&quot;游记&quot;&gt;&lt;/a&gt;游记&lt;/h1&gt;&lt;p&gt;夺冠了！作为和  &lt;font color=&quot;red&quot;&gt;&lt;b&gt;nocriz&lt;/b&gt;&lt;/font&gt;，&lt;font color=&quot;red&quot;&gt;&lt;b&gt;hdmmblz&lt;/b&gt;&lt;/font&gt; 一起组队打的第一场比赛，这也算是一个开门红吧，这次的解题策略与团队合作等诸多方面都做得还不错，出的锅也不算特别多。不过这也仅仅是一个省赛，仅仅是一个起点，以后的路还长，以后的目标需要远大！我们有了方向，有了动力，更有了顶天立地的决心。&lt;/p&gt;
    
    </summary>
    
      <category term="游记" scheme="http://yoursite.com/categories/%E6%B8%B8%E8%AE%B0/"/>
    
    
      <category term="ICPC" scheme="http://yoursite.com/tags/ICPC/"/>
    
  </entry>
  
  <entry>
    <title>一句话题解集锦</title>
    <link href="http://yoursite.com/2019/06/01/%E4%B8%80%E5%8F%A5%E8%AF%9D%E9%A2%98%E8%A7%A3%E9%9B%86%E9%94%A6/"/>
    <id>http://yoursite.com/2019/06/01/一句话题解集锦/</id>
    <published>2019-05-31T16:58:04.000Z</published>
    <updated>2019-07-21T10:29:40.550Z</updated>
    
    <content type="html"><![CDATA[<p>这篇博客主要用来记录平时偶然做到的比较有趣的杂题的简略题解。</p><a id="more"></a><h1 id="2019-5"><a href="#2019-5" class="headerlink" title="2019.5"></a>2019.5</h1><h2 id="2019-05-31"><a href="#2019-05-31" class="headerlink" title="2019.05.31"></a>2019.05.31</h2><p> (Virtual participation of Codeforces Round 562, solved 3/5, rank 118/454)</p><p><a href="https://codeforces.com/contest/1168/problem/A" target="_blank" rel="noopener">CF1168A</a>: 二分思博题。  </p><p><a href="https://codeforces.com/contest/1168/problem/B" target="_blank" rel="noopener">CF1168B</a>: 很有趣的暴力，复杂度证明用到这么一个结论：长度大于 9 的 01 串必定存在 $1\leq x,k \leq n$ 使得 $s_x=s_{x+k} = s_{s+2k}$   </p><p><a href="https://codeforces.com/contest/1168/problem/C" target="_blank" rel="noopener">CF1168C</a>: 按位考虑，在每一种数位如果转移一次不行，那么多次也不行。因此每个位置维护一个 $go_i$ 表示转移到的第一个第 $i$ 位是 1 的数的位置，$O(n\log^2 n)$ 即可预处理。询问时随便找到目标数 y 的一个数位，看原数这个数位要转移到的位置是否小于等于 y 即可。</p><h2 id="2019-06-01"><a href="#2019-06-01" class="headerlink" title="2019.06.01"></a>2019.06.01</h2><p><a href="https://atcoder.jp/contests/m-solutions2019" target="_blank" rel="noopener">AtCoder M-SOLUTIONS Programming Contest</a></p><p>AB: 思博题</p><p>C： 答案是这么一个式子：<br>$$<br>\frac{1}{1-c} \sum_{k=N}^{2N-1} \binom{k-1}{N-1} (A’^N B’^{k-N} + A’^{k-N}B’^{N})<br>$$<br>D: dfs一遍，每次回溯时给这个点标上当时最小的标号即可。</p><p>E：很 tricky 的一道题，除以 $d^k$ 之后变成：<br>$$<br>(\frac xd) \cdot (\frac xd+1) \cdot (\frac xd+2) \cdots \cdot (\frac xd+n-1)<br>$$<br>然后注意到模数是 $10^6+3$ ，因此 $\frac xd$ 这个分数可以表示为模意义整数，之后就是个前缀积水题了。</p><h2 id="2019-06-11"><a href="#2019-06-11" class="headerlink" title="2019.06.11"></a>2019.06.11</h2><p>补掉了 CF1172D 构造题。</p><p>口胡了 BZOJ1046 ，打算有时间开一个最长上升子序列的专题 Blog。</p><p>目前已有的题目：</p><p><a href="https://www.cometoj.com/contest/34/problem/E?problem_id=1477" target="_blank" rel="noopener">Comet OJ #0 E</a>  Problem setter: tangjz，牛逼题。</p><p><a href="https://cn.vjudge.net/problem/HDU-6284" target="_blank" rel="noopener">HDU 6824</a> 上次省赛训练时碰到的题目，和 Comet OJ 的那道题很相似。</p><p><a href="https://codeforces.com/contest/1097/problem/E" target="_blank" rel="noopener">Codeforces 1097E</a> Hello 2019 的题目，早就该补了，但是一直咕咕咕。</p><h2 id="2019-06-20"><a href="#2019-06-20" class="headerlink" title="2019.06.20"></a>2019.06.20</h2><p><a href="https://codeforces.com/contest/1148/" target="_blank" rel="noopener">Codeforces Global Round 3</a> (vp) 期末考试结束，码力恢复计划 1。CF Global Round 的题目质量真的是没得说，一等一的好！这是一个构造题专场，本应是我比较擅长的领域，可是果然是好久没敲代码了啊，感觉多出了不少锅呢。 </p><p>场上完成：</p><p>CF1148A 签到</p><p>CF1148B  two pointers，但是有点 tricky，我 WA 了 4 发。。。</p><p>CF1148C 非常显然的构造</p><p>CF1148D 排序输出即可</p><p>赛后补题：</p><h3 id="CF1148E"><a href="#CF1148E" class="headerlink" title="CF1148E"></a>CF1148E</h3><p>好题。题意是有 n 个<strong>一样</strong>的石子，给出初始位置集合 $my$ 和期望的末尾位置集合 $goal$，问你能不能只使用将两个石子靠近这么一种操作让石子达到期望的末尾位置，要求操作次数不超过 $5\cdot n$ ，并且要输出方案。（不必最小化操作数）。</p><p>这个题目感觉还是很有启发性的，感觉这个模型仿佛在竞赛中时常见到，可是好像以前也没有仔细考虑过。实际上这个题目的结论也是很优雅的。</p><p>如果考虑 $\delta_i = goal_i - my_i$ 这个序列，实际上问题就等价于一个要求输出方案的加权括号匹配问题，直接 two pointers 贪心即可，如果无法匹配则输出 NO。</p><h3 id="CF1148F"><a href="#CF1148F" class="headerlink" title="CF1148F"></a>CF1148F</h3><p>好题。题意是有 $n$ 个物体，每个物体都有 <code>val</code> 和 <code>mask</code> 两种属性，<code>val</code> 可正可负，而初始价值 <code>tot</code> 为所有物品 <code>val</code> 值之和。现在要求你找到一个二进制码 <code>s</code> ，然后对于每一个物体，如果 <code>popcount(mask &amp; s)</code> 是奇数，那么这个物体的 <code>val</code> 值变为其相反数，即 <code>-val</code> 。我们要求你在修改之后得到的新价值 <code>ntot</code> 与初始价值的正负号严格不同，即：$ntot \times tot &lt; 0$ 。这里 mask 的范围是 $[1,2^{63}-1]$</p><p>解法是构造题的另一种常用思路，数学归纳法，不过这道题我是自底向上考虑的。首先，不是一般性，我们假设原始价值之和为正数，我们想方设法使得最终答案为负数。</p><ul><li>注意 mask 只有一位时，问题很平凡，所有物体 mask 都为 1，只需要取 $s=1$ 即可。</li><li>假设 mask 有 k 位，此时 s 已有取值 $s_0$ ，我们决策是否使 $s_0$ 的第 $k+1$ 位设为 1 。我们先假设 $s_0$ 不变，把 mask 在 $[2^k,2^{k+1}-1]$ 范围的 val 按照 $s_0$ 的方式修改，统计一下它们的和。如果这个和小于 0 ，那么皆大欢喜，不用设 1。否则我们就将这一位设为 1 ，可以发现这个 1 只会影响到 $[2^k,2^{k+1}-1]$ 中的数，恰好使和变为其相反数而不产生任何其他影响。这两种方式都保证了 mask 有 $k+1$ 位时的价值为负数。</li></ul><p>模拟上述过程，总复杂度是 $\mathcal O(n \log \max a_i + n \log n)$ 。</p><h2 id="2019-06-22"><a href="#2019-06-22" class="headerlink" title="2019.06.22"></a>2019.06.22</h2><p><a href="https://codeforces.com/contest/1179" target="_blank" rel="noopener">Codeforces Round 569</a> 比赛编号 1179,码力恢复计划 2。这一场居然能够轻松签掉 3 道题，第一次打进前 100，可惜是 vp。感觉还行啊。</p><p><strong>CF1179A</strong> 直接模拟至队列头第一个数为最大数即可，剩下的答案有周期性。复杂度 $O(n+q)$</p><p><strong>CF1179B</strong> 蛮简单的构造题。左上角和右下角各放一个点，每一次分别让这两个点沿 S 型前进即可。</p><p><strong>CF1179C</strong> 首先可以证明 pupil 队伍的顺序与最终答案是没有关系的。然后维护一棵权值线段树，考虑每个价值为 $w_i$ 的物品时区间 $[1,w_i]$ 减去 1， 考虑每个钱数为 $b_i$ 的 pupil 时区间 $[1,b_i]$ 加上 1 。这样最右边的小于 0 的位置就是答案。暴力这么做会要求在线段树上二分，有 TLE 风险（不过出题人好像没有卡这种做法）。实际上将权值线段树的权值总数定为 $1048576 = 2^{20}$ ，然后二分时直接使用节点上的值即可。这样的时间复杂度是 $O(n\log \max a_i + q \log \max a_i)$  ，不加任何常数优化即可通过此题。</p><h1 id="2019-7"><a href="#2019-7" class="headerlink" title="2019.7"></a>2019.7</h1><h2 id="2019-07-21"><a href="#2019-07-21" class="headerlink" title="2019.07.21"></a>2019.07.21</h2><p>银联高校极客挑战赛 C 题。题意：求 $n$ 个节点所有形态的有标号无根树的叶子节点的总和。</p><p>解答：考虑 Prufer 序列。一个节点成为叶子，当且仅当它没有在 Prufer 序列中出现。因此对于任何一个节点，它是叶子对答案的贡献就是 $(n-1)^{n-2}$ 。（因为相当于 Prufer 序列每个位置除了不能选指定的标号，可以选剩下 $n-1$ 种的任何一种）把所有节点贡献加起来，就得到最终的答案是 $n\cdot (n-1)^{n-2}$ 。可以在 $O(\log n)$ 复杂度解决这道题。这道题也可以在 OEIS 上找到答案，数列是 <a href="http://oeis.org/A055541" target="_blank" rel="noopener">A055541</a></p><p>另一种思路是我现场推的，相当于复习了一下斯特林数。首先考虑这个问题：长度为 $n$ ，值域 $[1,m]$ 的序列中恰好出现了 $k$  个不同的数如何计数。一种思路是 dp，显然 $dp(i,j) = j\cdot dp(i-1,j) + (n-j)\cdot dp(i-1,j-1)$ 。可是这样做复杂度显然是不优秀的。事实上这就相当于将 $n$ 个数分为 $k$ 个带“标号”的集合的方案数。我们先将它们分配到无序集合，答案就是第二类斯特林数 $\displaystyle \begin {Bmatrix} n \ k\end {Bmatrix}$ 。之后为每个集合选择标号，方案数是 $P_{m}^k$ ，即 $m$ 的下降幂 $m^{\underline k}$ ，两者相乘即可，答案是 $\displaystyle\begin {Bmatrix} n \ k\end {Bmatrix}\cdot m^{\underline k}$ 。</p><p>回顾斯特林数的下面几个性质：<br>$$<br>\begin {Bmatrix} n \ k\end {Bmatrix} = k\begin {Bmatrix} n-1 \ k\end {Bmatrix} + \begin {Bmatrix} n-1 \ k-1\end {Bmatrix} \\<br>\sum_{k=0}^{n} \begin {Bmatrix} n \ k\end {Bmatrix} x^{\underline k} =<br>$$</p><p>那么回到这道题，我们枚举恰好出现的数的个数 $i$ ，则叶子数为 $n-i$ ，答案是：<br>$$<br>\begin{aligned}<br>ans &amp;= \sum_{i=1}^{n-2} (n-i) \left \{ \frac{n-2}{i}\right\} \cdot n^{\underline i} \\<br> &amp;=<br>\end{aligned}<br>$$</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这篇博客主要用来记录平时偶然做到的比较有趣的杂题的简略题解。&lt;/p&gt;
    
    </summary>
    
      <category term="题解" scheme="http://yoursite.com/categories/%E9%A2%98%E8%A7%A3/"/>
    
    
  </entry>
  
  <entry>
    <title>Gym 102192 训练报告</title>
    <link href="http://yoursite.com/2019/05/26/Gym-102192-%E8%AE%AD%E7%BB%83%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/05/26/Gym-102192-训练报告/</id>
    <published>2019-05-26T07:28:36.000Z</published>
    <updated>2019-06-02T16:32:15.620Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018-Chinese-Multi-University-Training-Nanjing-U-Contest"><a href="#2018-Chinese-Multi-University-Training-Nanjing-U-Contest" class="headerlink" title="2018 Chinese Multi-University Training, Nanjing U Contest"></a>2018 Chinese Multi-University Training, Nanjing U Contest</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th><th style="text-align:center">L</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">1:25</td><td style="text-align:center"></td><td style="text-align:center"><font color="red">(7)</font></td><td style="text-align:center">2:16</td><td style="text-align:center">0:17</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">4:55</td><td style="text-align:center">2:35</td><td style="text-align:center"></td><td style="text-align:center">4:56</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"></td><td style="text-align:center"><font color="red"><b>*7</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+</b></font></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">308</td><td style="text-align:center">55</td><td style="text-align:center">2</td><td style="text-align:center">270</td><td style="text-align:center">811</td><td style="text-align:center">2</td><td style="text-align:center">12</td><td style="text-align:center">1</td><td style="text-align:center">20</td><td style="text-align:center">329</td><td style="text-align:center">18</td><td style="text-align:center">39</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">容斥</td><td style="text-align:center">几何</td><td style="text-align:center"></td><td style="text-align:center">构造</td><td style="text-align:center">模拟</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">SAM</td><td style="text-align:center">LIS</td><td style="text-align:center"></td><td style="text-align:center">贪心</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">1239</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">1586</font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy+</font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><p>真·第一次正式训练，感觉合作得还蛮愉快的。不过最后半个小时有点没有按照正式比赛要求，三人三机了。以后还是一定要避免这种问题，协商好上机时间，严格三人单机。</p><ul><li>Solved during contest: <code>6/12</code> </li><li>Upsolved: <code>7/12</code></li><li>Orally upsolved: <code>7/12</code></li><li>Rank: <code>25/824</code></li></ul><a id="more"></a><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="https://codeforces.com/gym/102192" target="_blank" rel="noopener">Contest Link</a></p><p><a href="Gym102192-statements.pdf">Statements</a></p><p><a href="solutions.pdf">Official Editorial</a></p><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><p>开场我从中间看了 E，发现是个签到的模拟题，就开始写，17 分钟<strong>过了 E</strong>。</p><p>cyy 说 J 是思博题，于是上机写，我和 wzk 看了 A ，中途 wzk 提出 C 题的很难写的一种做法。又看了下 D，没什么思路，决定集中精力想 A 。 wzk 反应过来是一道容斥原理裸题，经过验证是正确的。于是让 cyy 下机小黄鸭，wzk 写 A ，但是交上去 WA 了。我提醒了一个可能爆 <code>int</code> 的地方，改了之后就 <strong>AC</strong> 了。</p><p>wzk 想要写 C，可是场上没什么人过；cyy 继续下机小黄鸭。我和 wzk 讨论起了 D 。对于都是偶数的情况，首先我提出了 $\max(h,w)$ 的显然构造，wzk 迅速提出了一种更优的 $\max (h,w) + \lfloor \frac{\min(h,w)}{2}\rfloor$ 的构造，我稍微魔改了一下，得到了稍微更优秀一些的  $\max (h,w) + \lceil\frac{\min(h,w)}{2}\rceil$ 的构造。我们一致认为已经足够优秀，于是写了一下这种做法，可是交上去还是 WA 了。wzk 马上反应出在最上面添加形如 <code>((((</code> 一行，最下面添加形如 <code>))))</code> 的一行更加优秀，答案变成了 $h+w-4$ 。这次的构造已经非常优秀了，于是魔改之后，我们<strong>过了 D</strong>。cyy J 题总算也调完了，交上去一发<strong>过了 J</strong>。这时排名大概 60 左右，感觉还不怎么行。</p><p>下面又进入了一段机位空出来的时间，没有新的题可以做了。wzk 打算写 C 题，场上 B 题过了一大片，可是没想好怎么做。和 cyy 大致讨论了一些情况，可是谁都没有底去写。 wzk 说 C 题快调试完了，就没去管。我给 cyy 说了字符串题 I 题，cyy 提出了 SAM 建出后缀树树链剖分，再加一个线段树维护答案的不可写做法。 cyy 将其简化为了广义 SAM + 虚树 + 线段树合并 + 线段树的 <del>同样不可写的</del> 做法， cyy 开始构思代码。我发现榜上 L 题通过人数增长很快，费了好大力气读懂了题目，发现可能直接贪心就完事了。和 cyy 讨论了一下，发现和校赛 B 有点类似，可能直接用一个 <code>map</code> 维护就可以了。可是需要支持一个类似平衡树 <code>split</code> 的一个毒瘤操作，感觉有点坨屎。后来我发现直接暴力删除，复杂度就是对的，构思了下代码，觉得很可写。这时已经 <code>4:20</code> ，wzk 的 C 题莫名奇妙地 RE 了。这时分歧出现了，我要写 L 题，cyy 想写 I 题，wzk 想调试 C 题。由于时间不多，只好三人三机了一会儿。最后 <code>4:55</code> 左右，我和 cyy 同时写完了。我一发过了样例，稍微小黄鸭一下改了一个很傻的错误，心里很没底就交了。 cyy 稍微靠前 1 分钟的时候交了。这时 cf 返回了两个 AC，<strong>过掉了I和L两道题</strong> 。于是最终排名看起来还行。</p><p>比赛过程出现的锅：</p><ul><li>A 题有个地方忘记开 <code>long long</code></li><li>J  题没有想好就开始写，浪费不少机时</li><li>B 题思博题，没有人想去写，结果最后就没有过</li><li>中期一直卡在 C 题上，花费了不少机时，最后 IL 两道题都比较有思路，只得三人三机了一会儿。正式比赛还-是要避免这种问题。</li></ul><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>已知的题目难度顺序：</p><ul><li>Very Easy：E</li><li>Easy: A, D, J</li><li>Mid Easy: L</li><li>Mid Hard: I</li></ul><h2 id="Prob-A-容斥"><a href="#Prob-A-容斥" class="headerlink" title="Prob A. 容斥"></a>Prob A. 容斥</h2><blockquote><p><em>Solved by nocriz at 01:25 (+1)</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给定 $n,m,k$ 求多项式：<br>$$<br>(1+x+x^2+\cdots+x^{n-1})^m<br>$$<br>的 $k$ 次方项的值。</p><p>数据范围：多组询问，$T\leq 400 ,n,m,k\leq 10^5, \sum n, \sum m,\sum k \leq 2\cdot 10^6$</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>考虑组合意义，$m$ 个 $[0,n-1]$ 之间的数要凑出 k 的方案数。假如没有 $n-1$ 的限制多简单啊，直接答案就是组合数 $\binom{k+m-1}{m-1}$。可是如果有限制，我们就可以考虑容斥原理。考虑至少有 $i$ 个数超过限制的方案数，那么首先把这 i 个数选出来之后，就是要凑出 $k-in$ 的方案数了。所以至少有 i 个数的答案为：<br>$$<br>f(i) = \binom{m}{i} \cdot \binom{k-in+m-1}{m-1}<br>$$<br>最终总的答案为：<br>$$<br>ans = \sum_{i=0}^{\lfloor \frac ik \rfloor} f(i) \cdot  (-1)^i<br>$$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a+b)&gt;=mod?a+b-mod:a+b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sub</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a-b)&lt;<span class="number">0</span>?a-b+mod:a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sq</span><span class="params">(<span class="keyword">int</span> x)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*x*x%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mul</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> <span class="number">1l</span>l*a*b%mod;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">pow</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;<span class="keyword">return</span> b==<span class="number">0</span>?<span class="number">1</span>:((b&amp;<span class="number">1</span>)?mul(a,sq(<span class="built_in">pow</span>(a,b/<span class="number">2</span>))):(sq(<span class="built_in">pow</span>(a,b/<span class="number">2</span>))));&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="keyword">int</span> fac[N],invfac[N];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">C</span><span class="params">(<span class="keyword">int</span> n,<span class="keyword">int</span> m)</span></span>&#123;<span class="keyword">return</span> mul(fac[n],mul(invfac[m],invfac[n-m]));&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">fac[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;N;i++)&#123;</span><br><span class="line">fac[i] = mul(fac[i<span class="number">-1</span>],i);</span><br><span class="line">&#125;</span><br><span class="line">invfac[N<span class="number">-1</span>] = <span class="built_in">pow</span>(fac[N<span class="number">-1</span>],mod<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=N<span class="number">-2</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line">invfac[i] = mul(invfac[i+<span class="number">1</span>],i+<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cout&lt;&lt;C(6,4)&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="keyword">int</span> n,m,k;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m&gt;&gt;k;</span><br><span class="line"><span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="number">1l</span>l*(n<span class="number">-1</span>)*m&lt;k)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i*n&lt;=k;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line">ans = sub(ans,mul(C(k-i*n+m<span class="number">-1</span>,m<span class="number">-1</span>),C(m,i)));</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">ans = add(ans,mul(C(k-i*n+m<span class="number">-1</span>,m<span class="number">-1</span>),C(m,i)));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;ans&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><h2 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h2><h2 id="Prob-D-构造好题"><a href="#Prob-D-构造好题" class="headerlink" title="Prob D. 构造好题"></a>Prob D. 构造好题</h2><blockquote><p><em>Solved by nocriz at 02:16 (+1)</em></p></blockquote><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>称一个括号矩阵的行是好的，当且仅当这一行从左往右读得到的括号序列是匹配的；称一个列是好的，当且仅当这一列从上往下读是匹配的。现在你需要构造一个 $h\times w$ 的括号矩阵，使得好的行的数目+好的列的数目最大。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>当行或者列有至少一个是奇数时，问题都变得很平凡。</p><p>当行或者列都是偶数时，特判掉一些小情况，然后对于大情况考虑下面的构造：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">((((((((</span><br><span class="line">(()()())</span><br><span class="line">()()()()</span><br><span class="line">(()()())</span><br><span class="line">()()()()</span><br><span class="line">))))))))</span><br></pre></td></tr></table></figure><p>即：第一行、最后一行、第一列、最后一列如上图那样，其他行没两行循环一次这样构造。可以看到只有第一行、最后一行、第一列、最后一列没有匹配，答案是 $h+w-4$ 。应当可以证明对于大情况，这种构造是最优的。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">char</span> ans[<span class="number">220</span>][<span class="number">220</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,m,swped = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mp</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="keyword">char</span> c)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(swped)swap(i,j);</span><br><span class="line">ans[i][j] = c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> T;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">swped = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;n&gt;&gt;m;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;"Case :"&lt;&lt;n&lt;&lt;' '&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">if</span>(m%<span class="number">2</span> == <span class="number">1</span> ||  (n%<span class="number">2</span> == <span class="number">0</span> &amp;&amp; n&lt;m))&#123;</span><br><span class="line">swped = <span class="number">1</span>;</span><br><span class="line">swap(n,m);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//cerr&lt;&lt;n&lt;&lt;' '&lt;&lt;m&lt;&lt;endl;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(i&amp;<span class="number">1</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&amp;<span class="number">1</span>) mp(i,j,<span class="string">')'</span>);</span><br><span class="line"><span class="keyword">else</span> mp(i,j,<span class="string">'('</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">mp(i,<span class="number">0</span>,<span class="string">'('</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;m<span class="number">-2</span>;j++)&#123;</span><br><span class="line"><span class="keyword">if</span>(j&amp;<span class="number">1</span>) mp(i,j+<span class="number">1</span>,<span class="string">')'</span>);</span><br><span class="line"><span class="keyword">else</span> mp(i,j+<span class="number">1</span>,<span class="string">'('</span>);</span><br><span class="line">&#125;</span><br><span class="line">mp(i,m<span class="number">-1</span>,<span class="string">')'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(m&gt;<span class="number">6</span> &amp;&amp; n%<span class="number">2</span> == <span class="number">0</span>)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)mp(<span class="number">0</span>,i,<span class="string">'('</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)mp(n<span class="number">-1</span>,i,<span class="string">')'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(swped)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;m;i++)<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cout</span>&lt;&lt;ans[i]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span>  <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-E-模拟"><a href="#Prob-E-模拟" class="headerlink" title="Prob E. 模拟"></a>Prob E. 模拟</h2><blockquote><p><em>Solved by YangDavid at 00:17 (+)</em></p></blockquote><p>模拟题意即可。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年05月26日 星期日 21时32分31秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">char</span> a[<span class="number">10</span>][<span class="number">10</span>], op[<span class="number">10</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clock</span><span class="params">(<span class="keyword">char</span>&amp; a, <span class="keyword">char</span>&amp; b, <span class="keyword">char</span> &amp;d, <span class="keyword">char</span> &amp;e)</span> </span>&#123;</span><br><span class="line">swap(a, d);</span><br><span class="line">swap(d, e);</span><br><span class="line">swap(e, b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">rc</span><span class="params">(<span class="keyword">char</span> &amp;a, <span class="keyword">char</span> &amp;b, <span class="keyword">char</span> &amp;d,<span class="keyword">char</span> &amp;e)</span> </span>&#123;</span><br><span class="line">swap(b, e);</span><br><span class="line">swap(d, e);</span><br><span class="line">swap(d, a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">rep(i, <span class="number">3</span>) <span class="built_in">scanf</span>(<span class="string">"%s"</span>, a[i] + <span class="number">1</span>);</span><br><span class="line">rep(i, n) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, op);</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'1'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">1</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">Clock(a[<span class="number">1</span>][<span class="number">1</span>], a[<span class="number">1</span>][<span class="number">2</span>], a[<span class="number">2</span>][<span class="number">1</span>], a[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> rc(a[<span class="number">1</span>][<span class="number">1</span>], a[<span class="number">1</span>][<span class="number">2</span>], a[<span class="number">2</span>][<span class="number">1</span>], a[<span class="number">2</span>][<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'2'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">1</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">Clock(a[<span class="number">1</span>][<span class="number">2</span>], a[<span class="number">1</span>][<span class="number">3</span>], a[<span class="number">2</span>][<span class="number">2</span>], a[<span class="number">2</span>][<span class="number">3</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> rc(a[<span class="number">1</span>][<span class="number">2</span>], a[<span class="number">1</span>][<span class="number">3</span>], a[<span class="number">2</span>][<span class="number">2</span>], a[<span class="number">2</span>][<span class="number">3</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'3'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">1</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">Clock(a[<span class="number">2</span>][<span class="number">1</span>], a[<span class="number">2</span>][<span class="number">2</span>], a[<span class="number">3</span>][<span class="number">1</span>], a[<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> rc(a[<span class="number">2</span>][<span class="number">1</span>], a[<span class="number">2</span>][<span class="number">2</span>], a[<span class="number">3</span>][<span class="number">1</span>], a[<span class="number">3</span>][<span class="number">2</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(op[<span class="number">0</span>] == <span class="string">'4'</span>) &#123;</span><br><span class="line"><span class="keyword">if</span>(op[<span class="number">1</span>] == <span class="string">'C'</span>) &#123;</span><br><span class="line">Clock(a[<span class="number">2</span>][<span class="number">2</span>], a[<span class="number">2</span>][<span class="number">3</span>], a[<span class="number">3</span>][<span class="number">2</span>], a[<span class="number">3</span>][<span class="number">3</span>]);</span><br><span class="line">&#125; <span class="keyword">else</span> rc(a[<span class="number">2</span>][<span class="number">2</span>],a[<span class="number">2</span>][<span class="number">3</span>], a[<span class="number">3</span>][<span class="number">2</span>], a[<span class="number">3</span>][<span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">rep(i, <span class="number">3</span>) <span class="built_in">printf</span>(<span class="string">"%s\n"</span>, a[i] + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) &#123;</span><br><span class="line">solve();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2><h2 id="Prob-G"><a href="#Prob-G" class="headerlink" title="Prob G."></a>Prob G.</h2><h2 id="Prob-H"><a href="#Prob-H" class="headerlink" title="Prob H."></a>Prob H.</h2><h2 id="Prob-I-广义后缀自动机"><a href="#Prob-I-广义后缀自动机" class="headerlink" title="Prob I. 广义后缀自动机"></a>Prob I. 广义后缀自动机</h2><blockquote><p><em>Solved by hdmmblz at 04:55 (+)</em></p></blockquote><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>待更。</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>待更。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> mod=<span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">suffix_automaton</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="built_in">string</span> s;</span><br><span class="line">    <span class="keyword">int</span> son[<span class="number">1000005</span>][<span class="number">26</span>],pre[<span class="number">1000005</span>],step[<span class="number">1000005</span>],last,total,rt[<span class="number">1000005</span>];</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">push_back</span><span class="params">(<span class="keyword">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">step[++total]=v;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">        total=last=<span class="number">0</span>;</span><br><span class="line">        <span class="built_in">memset</span>(son,<span class="number">0</span>,<span class="keyword">sizeof</span>(son));</span><br><span class="line">        <span class="built_in">memset</span>(pre,<span class="number">0</span>,<span class="keyword">sizeof</span>(pre));</span><br><span class="line">        <span class="built_in">memset</span>(step,<span class="number">0</span>,<span class="keyword">sizeof</span>(step));</span><br><span class="line">        pre[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">extend</span><span class="params">(<span class="keyword">int</span> ch)</span></span>&#123;</span><br><span class="line">        push_back(step[last]+<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">int</span> p=last,np=total,q,nq;</span><br><span class="line">        rt[np]++;</span><br><span class="line">        <span class="keyword">for</span>(;!son[p][ch]&amp;&amp;p!=<span class="number">-1</span>;p=pre[p])son[p][ch]=np;</span><br><span class="line">        <span class="keyword">if</span>(p==<span class="number">-1</span>)pre[np]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">            q=son[p][ch];</span><br><span class="line">            <span class="keyword">if</span>(step[q]!=step[p]+<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line">                push_back(step[p]+<span class="number">1</span>);</span><br><span class="line">                nq=total;</span><br><span class="line">                <span class="built_in">memcpy</span>(son[nq],son[q],<span class="keyword">sizeof</span>(son[q]));</span><br><span class="line">                pre[nq]=pre[q];</span><br><span class="line">                pre[q]=pre[np]=nq;</span><br><span class="line">                rt[nq]=rt[q];</span><br><span class="line">                <span class="keyword">for</span>(;son[p][ch]==q;p=pre[p])son[p][ch]=nq;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> pre[np]=q;</span><br><span class="line">        &#125;</span><br><span class="line">        last=np;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;suf;</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">quickpow</span><span class="params">(ll x,ll n)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(n==<span class="number">0</span>)<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    ll res=quickpow(x*x%mod,n/<span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(n%<span class="number">2</span>)res=res*x%mod;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">int</span> n,m,p,mxlen;  </span><br><span class="line"><span class="built_in">string</span> str[<span class="number">1000005</span>];</span><br><span class="line">ll ans[<span class="number">1000005</span>],h[<span class="number">1000005</span>],val[<span class="number">1000005</span>];</span><br><span class="line"><span class="keyword">int</span> vis[<span class="number">1000005</span>];</span><br><span class="line">ll fac[<span class="number">1000005</span>],inv[<span class="number">1000005</span>],pw;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i,j;    </span><br><span class="line">    suf.init();</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">cin</span>&gt;&gt;str[i],mxlen=max(mxlen,(<span class="keyword">int</span>)str[i].size());</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)<span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;h[i]);</span><br><span class="line">    pw=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mxlen;i++)</span><br><span class="line">&#123;</span><br><span class="line">        pw=pw*<span class="number">26</span>%mod;</span><br><span class="line">        fac[i]=(fac[i<span class="number">-1</span>]+pw)%mod;</span><br><span class="line">        inv[i]=quickpow(fac[i],mod<span class="number">-2</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123; </span><br><span class="line">        suf.last=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;str[i].size();j++)</span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">int</span> np=suf.son[suf.last][str[i][j]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">if</span>(np==<span class="number">0</span>||suf.step[np]!=j+<span class="number">1</span>) suf.extend(str[i][j]-<span class="string">'a'</span>);</span><br><span class="line">            <span class="keyword">else</span> suf.last=np;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;n;i++)</span><br><span class="line">&#123;</span><br><span class="line">        p=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(j=<span class="number">0</span>;j&lt;str[i].size();j++)</span><br><span class="line">&#123;</span><br><span class="line">            p=suf.son[p][str[i][j]-<span class="string">'a'</span>];</span><br><span class="line">            <span class="keyword">int</span> prep=p;</span><br><span class="line">            <span class="keyword">while</span>(prep!=<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">                <span class="keyword">if</span>(vis[prep]==i+<span class="number">1</span>) <span class="keyword">break</span>;</span><br><span class="line">                vis[prep]=i+<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">if</span>(!val[prep]) val[prep]=h[i];</span><br><span class="line">                <span class="keyword">else</span> val[prep]=val[prep]*h[i]%mod;</span><br><span class="line">                prep=suf.pre[prep];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="keyword">for</span>(i=suf.total;i&gt;=<span class="number">1</span>;i--)</span><br><span class="line">&#123;</span><br><span class="line">        (ans[suf.step[suf.pre[i]]+<span class="number">1</span>]+=val[i])%mod;</span><br><span class="line">        (ans[suf.step[i]+<span class="number">1</span>]-=val[i])%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mxlen;i++)ans[i]=(ans[i]+ans[i<span class="number">-1</span>]+mod)%mod;</span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=mxlen;i++)ans[i]=(ans[i]+ans[i<span class="number">-1</span>]+mod)%mod;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;m);</span><br><span class="line">    <span class="keyword">while</span>(m--)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;len);</span><br><span class="line">        len=min(len,mxlen);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans[len]*inv[len]%mod);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-J-LIS"><a href="#Prob-J-LIS" class="headerlink" title="Prob J. LIS"></a>Prob J. LIS</h2><blockquote><p><em>Solved by hdmmblz at 02:35 (+)</em></p></blockquote><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>待更。</p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>待更。</p><h3 id="Code-3"><a href="#Code-3" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="keyword">int</span> n,q,i,Q,s1[<span class="number">200005</span>],T,m,s2[<span class="number">200005</span>],sq,ans[<span class="number">200005</span>],val[<span class="number">200005</span>],stk[<span class="number">200005</span>],bag,a[<span class="number">200005</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> pos,num,id;</span><br><span class="line">&#125;query[<span class="number">200005</span>];</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node a, node b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a.pos&gt;b.pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">fin</span><span class="params">(<span class="keyword">int</span> *gg, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> mid;</span><br><span class="line"><span class="keyword">if</span> (gg[r]&lt;=x)<span class="keyword">return</span> r;</span><br><span class="line"><span class="keyword">while</span> (l &lt; r)</span><br><span class="line">&#123;</span><br><span class="line">mid=(l+r+<span class="number">1</span>)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (gg[mid] &lt;= x)l=mid;</span><br><span class="line"><span class="keyword">else</span> r=mid<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line"><span class="keyword">while</span> (T--)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;q);</span><br><span class="line"><span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"><span class="built_in">memset</span>(s1,<span class="number">0</span>,<span class="keyword">sizeof</span>(s1));</span><br><span class="line"><span class="built_in">memset</span>(s1,<span class="number">0</span>,<span class="keyword">sizeof</span>(s2));</span><br><span class="line"><span class="built_in">memset</span>(s1,<span class="number">0</span>,<span class="keyword">sizeof</span>(val));</span><br><span class="line"><span class="built_in">memset</span>(s1,<span class="number">0</span>,<span class="keyword">sizeof</span>(stk));</span><br><span class="line"><span class="built_in">memset</span>(s1,<span class="number">0</span>,<span class="keyword">sizeof</span>(a));</span><br><span class="line">bag=n; sq=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> last=<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;a[i]);</span><br><span class="line"><span class="keyword">if</span> (last&lt;a[i])</span><br><span class="line">&#123;</span><br><span class="line">s1[++sq]=i;s2[sq]=a[i];last=a[i];</span><br><span class="line">&#125;</span><br><span class="line">val[i]=sq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">1</span>;i&lt;=q;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;query[i].pos,&amp;query[i].num);</span><br><span class="line">query[i].id=i;</span><br><span class="line">&#125;</span><br><span class="line">s2[<span class="number">0</span>]=<span class="number">-1e9</span>;s1[<span class="number">0</span>]=<span class="number">0</span>;s1[sq+<span class="number">1</span>]=s2[sq+<span class="number">1</span>]=<span class="number">1e9</span>;</span><br><span class="line">sort(query+<span class="number">1</span>,query+<span class="number">1</span>+q,cmp);</span><br><span class="line"><span class="keyword">for</span> (i=n,Q=<span class="number">1</span>;i&gt;=<span class="number">1</span>;)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (query[Q].pos == i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> &amp;res = ans[query[Q].id];</span><br><span class="line">res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> left;</span><br><span class="line"><span class="keyword">if</span> (s1[sq]&lt;query[Q].pos)</span><br><span class="line">&#123;</span><br><span class="line">left= sq;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> left=fin(s1,<span class="number">0</span>,sq,i);</span><br><span class="line"><span class="keyword">if</span>(s1[left]==i)left--;</span><br><span class="line">res=left;</span><br><span class="line"><span class="keyword">if</span> (s2[left]&lt;query[Q].num)res++;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">query[Q].num=s2[left];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (stk[bag]&gt;query[Q].num)</span><br><span class="line">&#123;</span><br><span class="line">res+=n-bag+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stk[n]&gt;query[Q].num)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> pps=fin(stk,bag,n,query[Q].num);</span><br><span class="line">res+=n-pps;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">Q++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(stk[bag]&gt;a[i])</span><br><span class="line">&#123;</span><br><span class="line">stk[--bag]=a[i--];</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos=fin(stk,bag,n,a[i]);</span><br><span class="line">stk[pos]=a[i--];bag=pos;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">1</span>;i&lt;=q;i++)<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,ans[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-K"><a href="#Prob-K" class="headerlink" title="Prob K."></a>Prob K.</h2><h2 id="Prob-L-贪心"><a href="#Prob-L-贪心" class="headerlink" title="Prob L. 贪心"></a>Prob L. 贪心</h2><blockquote><p><em>Solved by YangDavid at 04:56 (+)</em></p></blockquote><h3 id="Description-4"><a href="#Description-4" class="headerlink" title="Description"></a>Description</h3><p>你开着一家公司生产电脑，一共有 $k$ 天，但是每一天的行情都会有所变化。具体来说，第 $i$ 天收到的客户需求为 $d_i$ 台电脑，购买 1 份原件的价格为 $c_i$ ，将 1 份原件组装成一台电脑的成本 $m_i$ ，每天最多组装 $p_i$ 台电脑。为了起到一定缓冲作用，公司拥有一个仓库，可以无限存放原件，但是从第 $i$ 天到第 $i+1$ 天的时间段里最多存放 $e_i$ 台电脑，并且存放 1 份原件需要 $R_i$ 的费用，存放 1 台电脑需要 $E_i$ 的费用。</p><p>现在把上面的信息都给你，你能够满足客户的需求吗？如果可以，你所花费的最小成本是多少？</p><p>数据范围：$T \leq 200$ 组数据，每组 $k\leq 50000$ ，其他值的值域 $[0, 10000]$</p><h3 id="Solution-4"><a href="#Solution-4" class="headerlink" title="Solution"></a>Solution</h3><p>这道题直接贪心即可。能否满足客户需求是很平凡的问题，下面具体叙述贪心求最小成本的过程。</p><p>首先因为原件没有容量限制，每天买电脑的成本是可以贪心的。第 $i$ 天买电脑的最优成本为 ：<br>$$<br>best_i = \min (c_i, \min_{1\leq j&lt;i} (best_j + \sum_{k=j}^{i-1} R_k))<br>$$<br>实际上直接用一个变量维护一个之前的最优答案即可。</p><p>之后用类似于校赛 B 题的做法，我们考虑把电脑购买成本塞进<code>map</code> 里，即直接用 <code>map</code> 维护所有决策，电脑的购买成本。<code>map[i]=j</code> 表示单价为 $i$ 的电脑有 $j$ 个。每次处理需求就是从 map 删去前 $d_i$ 小，然后加进答案；处理仓库缩小的情况就是删去多余的大的元素。这两个直接暴力就可以了，因为每一天最多在 map 里插入一个元素。由此均摊下来复杂度是 $O(T\cdot k\log k)$ 的，可以轻松通过此题。</p><h3 id="Code-4"><a href="#Code-4" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年05月26日 星期日 17时55分19秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> int ll</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">333333</span>;</span><br><span class="line"><span class="keyword">int</span> k, c[maxn], d[maxn], m[maxn], p[maxn], e[maxn], R[maxn], E[maxn], n;</span><br><span class="line"><span class="keyword">int</span> pref[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; mp;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">mp.clear();</span><br><span class="line"><span class="keyword">int</span> _tot = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;n);</span><br><span class="line">rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld%lld"</span>, &amp;c[i], &amp;d[i], &amp;m[i], &amp;p[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i)</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%lld%lld%lld"</span>, &amp;e[i], &amp;R[i], &amp;E[i]);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">_tot = min(_tot, e[i - <span class="number">1</span>]);</span><br><span class="line">_tot += p[i];</span><br><span class="line">_tot -= d[i];</span><br><span class="line"><span class="keyword">if</span>(_tot &lt; <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line"><span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> best = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">c[i] = min(c[i], best + R[i<span class="number">-1</span>]);</span><br><span class="line">best = c[i];</span><br><span class="line">&#125;</span><br><span class="line">pref[<span class="number">1</span>] = E[<span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i)</span><br><span class="line">   pref[i] = pref[i - <span class="number">1</span>] + E[i];</span><br><span class="line">ll ans = <span class="number">0</span>; _tot = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> np = m[i] + c[i] - pref[i - <span class="number">1</span>], del = d[i];</span><br><span class="line">mp[np] += p[i], _tot += p[i];</span><br><span class="line"><span class="keyword">while</span>(del) &#123;</span><br><span class="line"><span class="keyword">auto</span> it = mp.begin();</span><br><span class="line"><span class="keyword">int</span> elim = min(it-&gt;second, del);</span><br><span class="line">del -= elim, it-&gt;second -= elim;</span><br><span class="line">_tot -= elim;</span><br><span class="line">ans += <span class="number">1L</span>L * elim * (it-&gt;first + pref[i - <span class="number">1</span>]);</span><br><span class="line"><span class="keyword">if</span>(it-&gt;second == <span class="number">0</span>) mp.erase(it);</span><br><span class="line">&#125;</span><br><span class="line">del = max(<span class="number">0L</span>L, _tot - e[i]);</span><br><span class="line"><span class="keyword">while</span>(del) &#123;</span><br><span class="line"><span class="keyword">auto</span> it = mp.rbegin();</span><br><span class="line"><span class="keyword">int</span> elim = min(it-&gt;second, del);</span><br><span class="line">del -= elim, it-&gt;second -= elim;</span><br><span class="line">_tot -= elim;</span><br><span class="line"><span class="keyword">if</span>(it -&gt; second == <span class="number">0</span>) mp.erase(it-&gt;first);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">signed</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%lld"</span>, &amp;T);</span><br><span class="line"><span class="keyword">while</span>(T--) solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018-Chinese-Multi-University-Training-Nanjing-U-Contest&quot;&gt;&lt;a href=&quot;#2018-Chinese-Multi-University-Training-Nanjing-U-Contest&quot; class=&quot;headerlink&quot; title=&quot;2018 Chinese Multi-University Training, Nanjing U Contest&quot;&gt;&lt;/a&gt;2018 Chinese Multi-University Training, Nanjing U Contest&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;K&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;L&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:25&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(7)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2:16&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:17&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4:55&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2:35&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4:56&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*7&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;308&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;55&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;270&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;811&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;12&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;20&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;329&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;18&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;39&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;容斥&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;几何&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;构造&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;模拟&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;SAM&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;LIS&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1239&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;1586&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;p&gt;真·第一次正式训练，感觉合作得还蛮愉快的。不过最后半个小时有点没有按照正式比赛要求，三人三机了。以后还是一定要避免这种问题，协商好上机时间，严格三人单机。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest: &lt;code&gt;6/12&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Upsolved: &lt;code&gt;7/12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved: &lt;code&gt;7/12&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;25/824&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="容斥原理" scheme="http://yoursite.com/tags/%E5%AE%B9%E6%96%A5%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>Google Code Jam Round 2 游记</title>
    <link href="http://yoursite.com/2019/05/19/Google-Code-Jam-Round-2-%E6%B8%B8%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/05/19/Google-Code-Jam-Round-2-游记/</id>
    <published>2019-05-19T13:02:28.000Z</published>
    <updated>2019-05-31T16:22:19.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Google-Code-Jam-Round-2"><a href="#Google-Code-Jam-Round-2" class="headerlink" title="Google Code Jam Round 2"></a>Google Code Jam Round 2</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center"><font color="green"><strong>22</strong></font></td><td style="text-align:center">-</td><td style="text-align:center"><font color="green"><strong>26</strong></font></td><td style="text-align:center"><font color="red">(0)</font></td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+2</b></font></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">1052</td><td style="text-align:center">269</td><td style="text-align:center">171</td><td style="text-align:center">73</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">思维</td><td style="text-align:center"></td><td style="text-align:center">类欧几里得</td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><ul><li>Solved during contest: <code>2/4</code> <code>48/100 pt</code> </li><li>Upsolved: <code>2/4</code> <code>48/100 pt</code></li><li>Orally upsolved: <code>2/4</code> <code>48/100 pt</code></li><li>Rank: <code>315/3600</code></li><li>C 题撞大运了，正好就是之前写过的在有理数开区间内寻找分母最小的有理数的模板题，套模板就 AC 了。</li></ul><p>所以。。可以拿到一件 Google 衬衫了？感觉海星。</p><a id="more"></a><p>P.S. 正式比赛前不要打其他比赛！！！真的会 rp– ！！！第二天陕西邀请赛就炸飞了，从来没有碰见过前期读错题的情况有没有！</p><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="https://codingcompetitions.withgoogle.com/codejam/round/0000000000051679" target="_blank" rel="noopener">比赛及题解链接</a></p><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><p>打省赛之前要打 GCJ ，从 22:00 到  00:30 ，也真的是有点刺激。</p><p>开场看了 A ，和 CYY 稍微讨论了一下发现是思博题，一发 AC 了。</p><p>看了眼 B，感觉是个乱搞、调参数的交互题。</p><p>CYY 提议看 C，开始没懂题目要干什么，后来发现就是给定一个有理数开区间，要在这个区间里找到一个分母最小的有理数。这不就是模板题吗？我打开博客，复制了 <a href="https://yang2002.github.io/2019/02/23/Opentrains-1513%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/" target="_blank" rel="noopener">Opentrains 1513 训练报告</a> 里的模板，仔细写了一会儿，交了之后一发 AC 了。可是 cyy wa 了。分析原因可能是 INF 开得过大了，我顿时发现我也开得有点大，有很大概率会 FST。于是改成 $10^9 +7$ 交了一发，又有点担心，于是把所有数都改成 <code>__int128</code> 试了一下，好在最后也是 AC 了。</p><p>CYY 提议 D 题写高斯消元法，可是特殊情况有点多，后期没来得及写完。于是就两道题 48 分滚粗了。可是貌似 C 题会正解的人不多？所以排名看来也还可以，可以轻易拿到 GCJ 的 T 恤了啊，感觉海星。但是这对第二天的 debuff 可不小啊 QAQ，省赛就打得一坨屎。</p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Prob-A-去重"><a href="#Prob-A-去重" class="headerlink" title="Prob A. 去重"></a>Prob A. 去重</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>你要给两种化学元素赋上质量 $v_1,v_2$，给你了 $n$ 种分子，由二元组 $(c_1,c_2)$ 表示，代表有 $c_1$ 个 1 号原子，有 $c_2$ 个 2 号原子构成，然后分子的质量为 $c_1 \cdot v_1+c_2\cdot v_2$。问赋值之后分子按照价值从小到大排序之后按照分子名称编号组成的排列有多少种不同的方式。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>显然可以直接钦定 $v_2=kv_1,v_1=1$，然后把 $k$ 当横坐标，每一种分子质量代表纵坐标，则每一分子都可以用一条直线表示。这些直线位于 y 轴右侧交点的横坐标去重后的个数加上 1 即为答案。至于找直线交点，两两枚举然后暴力即可。</p><p>每一个测试的时间复杂度 $O(n^2 \log n)$</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">666</span>;</span><br><span class="line"><span class="keyword">int</span> n, kase;</span><br><span class="line">pii pt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">set</span>&lt;pii&gt; se;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n) <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;pt[i].first, &amp;pt[i].second);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = i + <span class="number">1</span>; j &lt;= n; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span>((pt[i].first-pt[j].first)*(pt[i].second-pt[j].second)&gt;=<span class="number">0</span>) <span class="keyword">continue</span>;</span><br><span class="line">            ll nu = <span class="built_in">abs</span>(pt[i].first - pt[j].first);</span><br><span class="line">            ll de = <span class="built_in">abs</span>(pt[i].second - pt[j].second);</span><br><span class="line">            ll d = __gcd(nu, de);</span><br><span class="line">            nu /= d, de /= d;</span><br><span class="line">            <span class="keyword">if</span>(se.count(&#123;nu, de&#125;)) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                se.insert(&#123;nu, de&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: %d\n"</span>, ++kase, <span class="keyword">int</span>(se.size()+ <span class="number">1</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><p>留坑。</p><h2 id="Prob-C-类欧几里得"><a href="#Prob-C-类欧几里得" class="headerlink" title="Prob C. 类欧几里得"></a>Prob C. 类欧几里得</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>和 A 题相同的背景，这一次我们给出了分子的排列，要你找到任何一种合法的院子质量分配方案 $v_1,v_2$ 使得排列中的分子按照质量从小到大的顺序排列。要求尽量使 $v_1$ 最小，在多组 $v_1$ 已经最小的答案里要求 $v_2$ 最小。</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>还是和 A 题类似的钦定方法，那么排列的任何两个相邻元素都满足左边小于等于右边，就可以列出来一个一次不等式，解出来会得出一个形如 $x&gt; \frac pq$ 或者 $x&lt;\frac pq$ 的条件，然后把这些条件综合起来即可将问题转化为下面的：</p><blockquote><p>在有理数开区间 $(\frac mn,\frac pq)$ 中找到一个有理数 $\frac xy$ ，使它的分母尽量地小，与此同时分子也尽量地小。</p></blockquote><p>这就是类欧几里得算法论文题！ <a href="https://yang2002.github.io/2019/02/23/Opentrains-1513%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/" target="_blank" rel="noopener">Opentrains 1513 训练报告</a> 里有这个模板，这里再不厌其烦地把这个算法的内容阐述（摘抄）一遍：</p><ul><li>首先，如果 $\frac mn$与 $\frac pq$ 之间有整数，那么问题已经解决了；</li><li>否则，一定有$r-l\leq1$。两个数同时减去 $l$ 的整数部分 $[l]$，得到的答案也是等价的。即：问题转化为$m&lt;n,p\leq q$ 的情况。</li><li>这时，要让 $y$ 最小， $x$ 一定也要最小，因此，可以两边直接取倒数，得到：$\frac qp &lt; \frac xy &lt; \frac nm$</li><li>这样递归下去即可。可以看到左右边界化为小于1的步骤相当于取模，分子分母量级会减小一半，因此复杂度为 $\log \min(n, q)$。</li></ul><p>还要注意一个细节：题目所有数据都是 $10^9$ 的，因此 <code>INF</code> 设为 $10^9+7$ 即可。如果 <code>INF</code> 设得过大，可能反而会溢出，产生意料不到的错误。</p><p>每一组测试数据的时间复杂度是 $O(n + \log 10^9)$。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;ll, ll&gt; pii;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ABS(x) ( (x)&gt;0 ? (x) : (-(x)) )</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">frac</span> &#123;</span></span><br><span class="line">    ll nu, de;</span><br><span class="line">    frac(ll a = <span class="number">0</span>, ll b = <span class="number">1</span>): nu(a), de(b) &#123; simplify(); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">simplify</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(de &lt; <span class="number">0</span>) de = -de, nu = -nu;</span><br><span class="line">        ll g = __gcd(ABS(nu), ABS(de));</span><br><span class="line">        nu /= g, de /= g;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">flip</span><span class="params">()</span> </span>&#123; swap(nu, de); &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> + (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll d = de * rhs.de / __gcd(ABS(de), ABS(rhs.de));</span><br><span class="line">        ll u = nu * (d / de) + rhs.nu * (d / rhs.de);</span><br><span class="line">        <span class="keyword">return</span> frac(u, d);</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> - (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll d = de * rhs.de / __gcd(ABS(de), ABS(rhs.de));</span><br><span class="line">        ll u = nu * (d / de) - rhs.nu * (d / rhs.de);</span><br><span class="line">        <span class="keyword">return</span> frac(u, d);</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> * (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        frac res = frac(nu * rhs.nu, de * rhs.de);</span><br><span class="line">        res.simplify();</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> - () <span class="keyword">const</span> &#123;</span><br><span class="line">        frac ret = *<span class="keyword">this</span>;</span><br><span class="line">        <span class="keyword">if</span>(de &lt; <span class="number">0</span>) ret.de = -de;</span><br><span class="line">        <span class="keyword">else</span> ret.nu = -nu;</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line">    frac <span class="keyword">operator</span> / (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span> * frac(rhs.de, rhs.nu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de &lt; rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> == (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de == rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt;= (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de &lt;= rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &gt; (<span class="keyword">const</span> frac&amp; rhs) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> nu * rhs.de &gt; rhs.nu * de;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">ll <span class="title">floor</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nu / de; &#125;</span><br><span class="line">    <span class="function">ll <span class="title">ceil</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> nu / de + (nu % de != <span class="number">0</span>); &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">frac <span class="title">SearchBetween</span><span class="params">(frac l, frac r)</span> </span>&#123;</span><br><span class="line">    l.simplify(), r.simplify();</span><br><span class="line">    ll lb = l.<span class="built_in">floor</span>();</span><br><span class="line">    <span class="keyword">if</span>(lb &gt; <span class="number">0</span>) l.nu -= lb * l.de, r.nu -= lb * r.de;</span><br><span class="line">    <span class="keyword">if</span>(r.nu &gt; r.de) <span class="keyword">return</span> frac(<span class="number">1</span> + lb, <span class="number">1</span>);</span><br><span class="line">    frac res = SearchBetween(frac(r.de, r.nu), frac(l.de, l.nu));</span><br><span class="line">    res.flip();</span><br><span class="line">    <span class="keyword">return</span> frac(lb, <span class="number">1</span>) + res;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> kase = <span class="number">0</span>, n;</span><br><span class="line">pii pt[<span class="number">6666</span>];</span><br><span class="line">frac low(0, 1), high(100000000000LL, 1);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    low = frac(<span class="number">0</span>, <span class="number">1</span>), high = frac(<span class="number">100000000000L</span>L, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Case #%d: "</span>, ++kase);</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    rep(i, n)</span><br><span class="line">        read(pt[i].first, pt[i].second);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        ll val = (pt[i].second-pt[i+<span class="number">1</span>].second)*(pt[i].first-pt[i+<span class="number">1</span>].first);</span><br><span class="line">        <span class="keyword">if</span>(val == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pt[i+<span class="number">1</span>].first &gt; pt[i].first || pt[i+<span class="number">1</span>].second &gt; pt[i].second)</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pt[i+<span class="number">1</span>].first &gt; pt[i].first) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(val &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(pt[i+<span class="number">1</span>].second &gt; pt[i].second) &#123;</span><br><span class="line">                low = max(low, frac(pt[i].first - pt[i+<span class="number">1</span>].first, pt[i+<span class="number">1</span>].second - pt[i].second));</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(pt[i+<span class="number">1</span>].second &lt; pt[i].second) &#123;</span><br><span class="line">                high = min(high, frac(pt[i].first - pt[i+<span class="number">1</span>].first, pt[i+<span class="number">1</span>].second - pt[i].second));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// printf("&gt; low = %lld/%lld, high = %lld/%lld\n", low.nu, low.de, high.nu, high.de);</span></span><br><span class="line">    low.simplify(), high.simplify();</span><br><span class="line">    <span class="keyword">if</span>(low &gt; high || low == high) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"IMPOSSIBLE"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    frac ans = SearchBetween(low, high);</span><br><span class="line">    write(ans.de);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">    write(ans.nu);</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="meta">#<span class="meta-keyword">ifdef</span> FREOPEN</span></span><br><span class="line">        freopen(<span class="string">"in.txt"</span>, <span class="string">"r"</span>, <span class="built_in">stdin</span>);</span><br><span class="line">        <span class="comment">// freopen("out.txt", "w", stdout);</span></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><p>留坑。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Google-Code-Jam-Round-2&quot;&gt;&lt;a href=&quot;#Google-Code-Jam-Round-2&quot; class=&quot;headerlink&quot; title=&quot;Google Code Jam Round 2&quot;&gt;&lt;/a&gt;Google Code Jam Round 2&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;22&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;-&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;26&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(0)&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+2&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1052&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;269&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;171&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;思维&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;类欧几里得&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest: &lt;code&gt;2/4&lt;/code&gt; &lt;code&gt;48/100 pt&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Upsolved: &lt;code&gt;2/4&lt;/code&gt; &lt;code&gt;48/100 pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved: &lt;code&gt;2/4&lt;/code&gt; &lt;code&gt;48/100 pt&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;315/3600&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;C 题撞大运了，正好就是之前写过的在有理数开区间内寻找分母最小的有理数的模板题，套模板就 AC 了。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以。。可以拿到一件 Google 衬衫了？感觉海星。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="类欧几里得" scheme="http://yoursite.com/tags/%E7%B1%BB%E6%AC%A7%E5%87%A0%E9%87%8C%E5%BE%97/"/>
    
  </entry>
  
  <entry>
    <title>JSCPC 2018 训练实录</title>
    <link href="http://yoursite.com/2019/05/16/JSCPC-2018-%E8%AE%AD%E7%BB%83%E5%AE%9E%E5%BD%95/"/>
    <id>http://yoursite.com/2019/05/16/JSCPC-2018-训练实录/</id>
    <published>2019-05-15T16:40:01.000Z</published>
    <updated>2019-05-31T16:21:52.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2018江苏大学生程序设计竞赛（JSCPC）"><a href="#2018江苏大学生程序设计竞赛（JSCPC）" class="headerlink" title="2018江苏大学生程序设计竞赛（JSCPC）"></a>2018江苏大学生程序设计竞赛（JSCPC）</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th><th style="text-align:center">G</th><th style="text-align:center">H</th><th style="text-align:center">I</th><th style="text-align:center">J</th><th style="text-align:center">K</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">0:13</td><td style="text-align:center">1:45</td><td style="text-align:center">2:58</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">1:01</td><td style="text-align:center">1:17</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">4:10</td><td style="text-align:center">0:45</td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">122</td><td style="text-align:center">58</td><td style="text-align:center">27</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">95</td><td style="text-align:center">86</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">30</td><td style="text-align:center">120</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">模拟</td><td style="text-align:center">二分</td><td style="text-align:center">莫队</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">排序</td><td style="text-align:center">贪心</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">思维</td><td style="text-align:center">容斥</td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">508</font></td><td style="text-align:center"><font color="green">518</font></td><td style="text-align:center"><font color="blue">2620</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">947</font></td><td style="text-align:center"><font color="green">1409</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">817</font></td><td style="text-align:center"><font color="green">648</font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="green">Easy</font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Template</td><td style="text-align:center"><font color="red">Red</font></td><td style="text-align:center"><font color="blue">blue</font></td><td style="text-align:center"><font color="green">green</font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center">$\mathcal{O}$</td><td style="text-align:center"><font color="red">(0)</font></td><td style="text-align:center">★</td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><ul><li>Solved during contest: <code>7/11</code> </li><li>Upsolved: <code>7/11</code></li><li>Orally upsolved: <code>7/11</code></li><li>Rank: <code>8/156</code></li></ul><a id="more"></a><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="https://cn.vjudge.net/contest/300755#overview" target="_blank" rel="noopener">比赛链接</a></p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><p>题目难度：</p><p>Very Easy:  A, F<br>Easy: B, G, K<br>Medium Easy: C, J</p><h2 id="Prob-A-签到"><a href="#Prob-A-签到" class="headerlink" title="Prob A. 签到"></a>Prob A. 签到</h2><blockquote><p><em>Solved at 00:13 (+1)</em></p></blockquote><p>模拟题意即可。不要看错题意。由于前三道题目是一个系列，这里把定义的 $h$ 值概念摘抄如下：</p><blockquote><p>The h-index of an author is the largest h where he has at least h papers with citations not less than h. </p></blockquote><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">444444</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n;</span><br><span class="line">ll mn[maxn];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= n; ++i) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i ; --i) mn[i] = (a[i] + mn[i+<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = n; i &gt;= <span class="number">0</span>; --i) <span class="keyword">if</span>(i &lt;= mn[i]) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, i);</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B-奇怪的二分"><a href="#Prob-B-奇怪的二分" class="headerlink" title="Prob B. 奇怪的二分"></a>Prob B. 奇怪的二分</h2><blockquote><p><em>Solved at 01:45 (+)</em></p></blockquote><p>首先可以看到最大的 $h$ 满足二分性质：小于这个数的所有 $h$ 都可行，大于的都不可行。</p><p>考虑二分，考虑如何验证一个 $h$ 是否合法。我们先放上 $h$ 个论文，每篇论文只工作一小时，作为满足要求的 h 篇。然后如果剩下的时间只放在这 $h$ 篇上，这时至少需要的时间是：<br>$$<br>\lceil \frac{h-1-a}{a}\rceil + \lceil \frac{h-2-a}{a}\rceil + \lceil \frac{h-3-a}{a}\rceil + \cdots + \lceil \frac{1-a}{a}\rceil<br>$$<br>但是我们还可以增加一些水论文，即增加一篇工作 $1$ 的论文，然后引用上面的 h 篇。可以发现加过一篇水论文之后，至少需要的时间刚好减去了上式的第一项，即变为了：<br>$$<br>\lceil \frac{h-2-a}{a}\rceil + \lceil \frac{h-3-a}{a}\rceil + \cdots + \lceil \frac{1-a}{a}\rceil<br>$$<br>每增加一篇水论文都会使求和减少一项，而每一项求和只要不小于 0，就至少为 1，因此使用水论文永远是划算的。我们可以发现，检查 h 时，我们应当使用 $\min(0,h-a)$ 份水论文。</p><p>对于一个 h，需要的时间至少为 $h + \min(0,h-a)$ 。由此二分即可。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line">ll n, a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">judge</span><span class="params">(ll h)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> h + max(h - a, <span class="number">0L</span>L) &lt;= n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; a) &#123;</span><br><span class="line">        ll l = <span class="number">0</span>, r = n;</span><br><span class="line">        <span class="keyword">while</span>(l &lt; r) &#123;</span><br><span class="line">            ll mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(l == r - <span class="number">1</span>) mid = r;</span><br><span class="line">            <span class="keyword">if</span>(judge(mid)) l = mid;</span><br><span class="line">            <span class="keyword">else</span> r = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, l);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-C-莫队"><a href="#Prob-C-莫队" class="headerlink" title="Prob C. 莫队"></a>Prob C. 莫队</h2><blockquote><p><em>Solved at 02:58 by YangDavid, thinking whr (+)</em></p></blockquote><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>给出数组 $a$ ，有 $q$ 个询问，求区间 $a[l,r]$ 的 $h$ 值。</p><p>数据范围：$n,q \leq 10^5$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution 1"></a>Solution 1</h3><p>（莫队算法，904 ms / 2000 ms）</p><p>回顾求 $h$ 的过程，我们将论文引用次数装进一个计数数组，然后在这个计数数组中从后往前扫，扫到 i 位置时，比较后缀和 $\sum_{j=i}^n a_j$，与当前下标 i ，如果后缀和大的话，我们就找到了答案。</p><p>一个比较重要的性质是一个数组加入或删除一个元素之后，其 h 值最多变化 1。由此，根据上面的求 h 过程，我们可以直接 $O(1)$ 地插入删除元素，由此采用莫队算法即可做到 $O(n\sqrt n)$ 的复杂度。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code 1"></a>Code 1</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(register int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = getchar();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = getchar();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = getchar();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">302000</span>, maxB = <span class="number">500</span>;</span><br><span class="line"><span class="keyword">int</span> a[maxn], n, m, pos[maxn], t = <span class="number">0</span>, lenb;</span><br><span class="line"><span class="keyword">int</span> ans[maxn], cur_ans = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Query</span> &#123;</span> <span class="keyword">int</span> l, r, id; &#125; q[maxn];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp1</span><span class="params">(<span class="keyword">const</span> Query &amp;q1, <span class="keyword">const</span> Query &amp;q2)</span> </span>&#123;<span class="keyword">return</span> q1.l &lt; q2.l; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">bool</span> <span class="title">cmp2</span><span class="params">(<span class="keyword">const</span> Query &amp;q1, <span class="keyword">const</span> Query &amp;q2)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> pos[q1.l] &lt; pos[q2.l] || (pos[q1.l] == pos[q2.l] &amp;&amp; q1.r &lt; q2.r);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> vcnt[maxn], rsum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">DealFirst</span><span class="params">(<span class="keyword">int</span> l, <span class="keyword">int</span> r)</span> </span>&#123;</span><br><span class="line"><span class="comment">//    printf("&gt; Deal First [%d, %d]: \n", l, r);</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt;= r; ++i)</span><br><span class="line">        vcnt[a[i]]++;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> res = n; res &gt;= <span class="number">0</span>; --res) &#123;</span><br><span class="line">        rsum += vcnt[res];</span><br><span class="line">        <span class="keyword">if</span>(rsum &gt;= res) <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line">    assert(<span class="literal">false</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Ins</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vcnt[x]++;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= cur_ans) rsum++;</span><br><span class="line">    <span class="keyword">if</span>(rsum - vcnt[cur_ans] &gt;= cur_ans + <span class="number">1</span>) &#123;</span><br><span class="line">        rsum -= vcnt[cur_ans];</span><br><span class="line">        cur_ans++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    vcnt[x]--;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= cur_ans) rsum--;</span><br><span class="line">    <span class="keyword">if</span>(rsum &lt; cur_ans) &#123;</span><br><span class="line">        cur_ans--;</span><br><span class="line">        rsum += vcnt[cur_ans];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(vcnt, <span class="number">0</span>, <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * (n + <span class="number">10</span>));</span><br><span class="line">    cur_ans = rsum = <span class="number">0</span>;</span><br><span class="line">    rep(i, n) read(a[i]);</span><br><span class="line">    rep(i, m) &#123;</span><br><span class="line">        read(q[i].l, q[i].r);</span><br><span class="line">        q[i].id = i;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(q + <span class="number">1</span>, q + m + <span class="number">1</span>, cmp1);</span><br><span class="line">    t = <span class="built_in">sqrt</span>(m + <span class="number">0.5</span>), lenb = m / t;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i)</span><br><span class="line">        pos[i] = (i - <span class="number">1</span>) / lenb + <span class="number">1</span>;</span><br><span class="line">    sort(q + <span class="number">1</span>, q + m + <span class="number">1</span>, cmp2);</span><br><span class="line">    cur_ans = DealFirst(q[<span class="number">1</span>].l, q[<span class="number">1</span>].r);</span><br><span class="line">    ans[q[<span class="number">1</span>].id] = cur_ans;</span><br><span class="line">    <span class="keyword">int</span> cur_l = q[<span class="number">1</span>].l, cur_r = q[<span class="number">1</span>].r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> qn = <span class="number">2</span>; qn &lt;= m; ++qn) &#123;</span><br><span class="line">        <span class="keyword">int</span> nl = q[qn].l, nr = q[qn].r;</span><br><span class="line"><span class="comment">//        printf("&gt; Deal [%d, %d]: \n", nl, nr);</span></span><br><span class="line">        <span class="keyword">if</span>(cur_r &lt; nr) <span class="keyword">for</span>(<span class="keyword">int</span> i = cur_r + <span class="number">1</span>; i &lt;= nr; ++i) Ins(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(cur_r &gt; nr) <span class="keyword">for</span>(<span class="keyword">int</span> i = cur_r; i &gt; nr; --i) Del(a[i]);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(cur_l &gt; nl) <span class="keyword">for</span>(<span class="keyword">int</span> i = cur_l - <span class="number">1</span>; i &gt;= nl; --i) Ins(a[i]);</span><br><span class="line">        <span class="keyword">if</span>(cur_l &lt; nl) <span class="keyword">for</span>(<span class="keyword">int</span> i = cur_l; i &lt; nl; ++i) Del(a[i]);</span><br><span class="line">        ans[q[qn].id] = cur_ans;</span><br><span class="line">        cur_l = nl, cur_r = nr;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    rep(i, m) write(ans[i]), <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m))</span><br><span class="line">        solve();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><p>留坑。</p><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><p>留坑。</p><h2 id="Prob-F-排序"><a href="#Prob-F-排序" class="headerlink" title="Prob F. 排序"></a>Prob F. 排序</h2><blockquote><p><em>Solved at 01:01 (+1)</em></p></blockquote><p>直接排序即可，但是可能炸 <code>long long</code>，需要用 <code>__int128</code>。思博题。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> __int128 ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">33333</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line"><span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line"><span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">x *= f;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">item</span> &#123;</span></span><br><span class="line">    ll a, b, c;</span><br><span class="line">    <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span> &lt; (<span class="keyword">const</span> item&amp; r) <span class="keyword">const</span> &#123;</span><br><span class="line">        ll lhs = (a + b) * (r.a + r.b + r.c);</span><br><span class="line">        ll rhs = (r.a + r.b) * (a + b + c);</span><br><span class="line">        <span class="keyword">if</span>(lhs != rhs) <span class="keyword">return</span> lhs &lt; rhs;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> id &lt; r.id;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">qread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        read(a), read(b), read(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; a[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n)) &#123;</span><br><span class="line">        rep(i, n) a[i].qread(), a[i].id = i;</span><br><span class="line">        sort(a + <span class="number">1</span>, a + n + <span class="number">1</span>);</span><br><span class="line">        rep(i, n) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, a[i].id, <span class="string">" \n"</span>[i == n]);</span><br><span class="line">    &#125;</span><br><span class="line">   </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-G-模拟"><a href="#Prob-G-模拟" class="headerlink" title="Prob G. 模拟"></a>Prob G. 模拟</h2><ul><li>首先，判断 c 的个数是否相同，然后判断 c 分割开的各个只由 a,b 组成的部分是否等价。</li><li>其次，如何判断两个只由 a,b 组成的部分是否等价？<code>ab</code> 可以交换为 <code>ba</code>，因此可以直接将两个部分排好序，变为若干个 a 加若干个 b 的形式。然后由于 <code>aa</code>, <code>bb</code> 可以直接消去，按照奇偶性， a, b 的奇偶相同则等价。</li></ul><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">11111</span>;</span><br><span class="line"><span class="built_in">string</span> s, t;</span><br><span class="line"><span class="built_in">vector</span>&lt;pii&gt; ss, tt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; s &gt;&gt; t) &#123;</span><br><span class="line">        ss.clear(), tt.clear();</span><br><span class="line">        <span class="keyword">int</span> a = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : s) &#123;</span><br><span class="line">            <span class="keyword">if</span>(g == <span class="string">'c'</span>) &#123;</span><br><span class="line">                ss.emplace_back(a&amp;<span class="number">1</span>, b&amp;<span class="number">1</span>);</span><br><span class="line">                a = b = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'a'</span>) a++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'b'</span>) b++;</span><br><span class="line">        &#125;</span><br><span class="line">        ss.emplace_back(a&amp;<span class="number">1</span>, b&amp;<span class="number">1</span>);</span><br><span class="line">        a = b = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : t) &#123;</span><br><span class="line">            <span class="keyword">if</span>(g == <span class="string">'c'</span>) &#123;</span><br><span class="line">                tt.emplace_back(a&amp;<span class="number">1</span>, b&amp;<span class="number">1</span>);</span><br><span class="line">                a = b = <span class="number">0</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'a'</span>) a++;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(g == <span class="string">'b'</span>) b++;</span><br><span class="line">        &#125;</span><br><span class="line">        tt.emplace_back(a&amp;<span class="number">1</span>, b&amp;<span class="number">1</span>);</span><br><span class="line">        a = b = <span class="number">0</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(ss.size() != tt.size()) &#123;</span><br><span class="line">            <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> sz = ss.size(), ok = <span class="literal">true</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; sz; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(ss[i].first != tt[i].first || ss[i].second != tt[i].second) &#123;</span><br><span class="line">                <span class="built_in">puts</span>(<span class="string">"No"</span>);</span><br><span class="line">                <span class="keyword">goto</span> tag;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"Yes"</span>);</span><br><span class="line">        tag:;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-H"><a href="#Prob-H" class="headerlink" title="Prob H."></a>Prob H.</h2><p>留坑。</p><h2 id="Prob-I"><a href="#Prob-I" class="headerlink" title="Prob I."></a>Prob I.</h2><p>留坑。</p><h2 id="Prob-J-思维题"><a href="#Prob-J-思维题" class="headerlink" title="Prob J. 思维题"></a>Prob J. 思维题</h2><p>明天再写。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">122222</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000007</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L* x * y % MOD; &#125;</span><br><span class="line"><span class="keyword">int</span> p2[maxn], n;</span><br><span class="line"><span class="built_in">string</span> s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    p2[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">102000</span>; ++i)</span><br><span class="line">        p2[i] = muln(p2[i<span class="number">-1</span>], <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; s) &#123;</span><br><span class="line">        reverse(s.begin(), s.end());</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">int</span>(s.length()) &lt; n) s += <span class="string">'0'</span>;</span><br><span class="line">        reverse(s.begin(), s.end());</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> zero = <span class="number">0</span>, ans = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;  i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span>(s[i] == <span class="string">'0'</span>) zero++;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = muln(ans, muln(p2[zero]<span class="number">-1</span>, p2[n-i<span class="number">-1</span>]));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans % MOD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-K-容斥"><a href="#Prob-K-容斥" class="headerlink" title="Prob K. 容斥"></a>Prob K. 容斥</h2><p>毒瘤分类讨论容斥题，whr 写的，我没仔细看。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line">ll a,b,c,d;</span><br><span class="line">ll ans;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b&gt;&gt;c&gt;&gt;d)</span><br><span class="line">    &#123;</span><br><span class="line">        ans=<span class="number">0</span>;</span><br><span class="line">        ll tmp1=d/<span class="number">2018</span>-(c<span class="number">-1</span>)/<span class="number">2018</span>;</span><br><span class="line">        ans+=tmp1*(b-a+<span class="number">1</span>);</span><br><span class="line">        ll tmp2=d/<span class="number">1009</span>-(c<span class="number">-1</span>)/<span class="number">1009</span>;</span><br><span class="line">        ans+=(tmp2-tmp1)*(b/<span class="number">2</span>-(a<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">        ll tmp3=b/<span class="number">2018</span>-(a<span class="number">-1</span>)/<span class="number">2018</span>;</span><br><span class="line">        ans+=tmp3*(d-c+<span class="number">1</span>);</span><br><span class="line">        ll tmp4=b/<span class="number">1009</span>-(a<span class="number">-1</span>)/<span class="number">1009</span>;</span><br><span class="line">        ans+=(tmp4-tmp3)*(d/<span class="number">2</span>-(c<span class="number">-1</span>)/<span class="number">2</span>);</span><br><span class="line">        <span class="comment">//cout&lt;&lt;tmp1&lt;&lt;" "&lt;&lt;tmp2&lt;&lt;" "&lt;&lt;tmp3&lt;&lt;" "&lt;&lt;tmp4;</span></span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;ans-tmp1*tmp4-tmp2*tmp3+tmp1*tmp3&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;2018江苏大学生程序设计竞赛（JSCPC）&quot;&gt;&lt;a href=&quot;#2018江苏大学生程序设计竞赛（JSCPC）&quot; class=&quot;headerlink&quot; title=&quot;2018江苏大学生程序设计竞赛（JSCPC）&quot;&gt;&lt;/a&gt;2018江苏大学生程序设计竞赛（JSCPC）&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;G&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;H&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;I&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;J&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;K&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:13&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:45&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2:58&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:01&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:17&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4:10&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:45&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;122&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;58&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;27&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;95&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;86&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;30&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;120&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;模拟&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;二分&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;莫队&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;排序&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;思维&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;容斥&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;508&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;518&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;2620&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;947&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1409&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;817&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;648&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Template&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;Red&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;blue&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;green&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;$\mathcal{O}$&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(0)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest: &lt;code&gt;7/11&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Upsolved: &lt;code&gt;7/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved: &lt;code&gt;7/11&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;8/156&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="莫队" scheme="http://yoursite.com/tags/%E8%8E%AB%E9%98%9F/"/>
    
      <category term="思维题" scheme="http://yoursite.com/tags/%E6%80%9D%E7%BB%B4%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Codeforces Round 559 (Div. 1) 比赛记录</title>
    <link href="http://yoursite.com/2019/05/13/Codeforces-Round-559-Div-1-%E6%AF%94%E8%B5%9B%E8%AE%B0%E5%BD%95/"/>
    <id>http://yoursite.com/2019/05/13/Codeforces-Round-559-Div-1-比赛记录/</id>
    <published>2019-05-13T10:44:54.000Z</published>
    <updated>2019-05-29T16:06:03.889Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Codeforces-Round-559-Div-1"><a href="#Codeforces-Round-559-Div-1" class="headerlink" title="Codeforces Round 559 (Div. 1)"></a>Codeforces Round 559 (Div. 1)</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">00:21</td><td style="text-align:center"><font color="red">(2)</font></td><td style="text-align:center">01:38</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center">AC</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="red"><b>*</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">415</td><td style="text-align:center">204</td><td style="text-align:center">258</td><td style="text-align:center">77</td><td style="text-align:center">2</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">贪心</td><td style="text-align:center">构造</td><td style="text-align:center">拓扑排序</td><td style="text-align:center">结论</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">1577</font></td><td style="text-align:center"><font color="green">489</font></td><td style="text-align:center"><font color="blue">2763</font></td><td style="text-align:center"><font color="green">1307</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">Mid-</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="blue">Mid</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>又一次打 Div. 1，题目质量还不错。前期一直在写 C 题的线段树，结果 B 题构造题却没时间做了。猜了好几个结论，总算猜到正确的了，但是没来得及提交。还是有点遗憾的，微微掉了 5 分 rating ，不过也无妨，毕竟还是要在比赛中不断成长的。</p><ul><li>Solved during contest: <code>2/6</code> </li><li>Upsolved: <code>4/6</code></li><li>Orally upsolved: <code>4/6</code></li><li>Rank: <code>246/425</code></li><li>Rating: <font color="purple"><b>2052</b></font> (-5)</li></ul><a id="more"></a><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p>比赛编号：1158</p><p><a href="https://codeforces.com/contest/1158" target="_blank" rel="noopener">比赛链接</a></p><p><a href="https://codeforces.com/blog/entry/66993" target="_blank" rel="noopener">官方题解连接</a></p><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Prob-A-贪心"><a href="#Prob-A-贪心" class="headerlink" title="Prob A. 贪心"></a>Prob A. 贪心</h2><p>模拟题意贪心即可。需要特判一些情况。</p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">555555</span>;</span><br><span class="line">ll b[maxn], g[maxn], n, m, ming = <span class="number">0x3f3f3f3f</span>, maxb = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n, m);</span><br><span class="line">    rep(i, n) read(b[i]), maxb = max(maxb, b[i]);</span><br><span class="line">    rep(i, m) read(g[i]), ming = min(ming, g[i]);</span><br><span class="line">    <span class="keyword">if</span>(maxb &gt; ming) &#123;</span><br><span class="line">        <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">multiset</span>&lt; <span class="keyword">int</span>, greater&lt;<span class="keyword">int</span>&gt; &gt; boys;</span><br><span class="line">    ll ans = <span class="number">0</span>, rem = m - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) </span><br><span class="line">        ans += <span class="number">1L</span>L * b[i] * m, boys.insert(b[i]);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span>(m == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(maxb == g[<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(n == <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(ming == b[<span class="number">1</span>]) <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">"-1"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) <span class="keyword">if</span>(g[i] &gt; maxb) &#123;</span><br><span class="line">        <span class="keyword">if</span>(boys.empty()) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">        ans += (g[i] - *boys.begin());</span><br><span class="line">        <span class="keyword">if</span>(--rem == <span class="number">0</span>) &#123;</span><br><span class="line">            boys.erase(boys.begin()), rem = m - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-B-构造"><a href="#Prob-B-构造" class="headerlink" title="Prob B. 构造"></a>Prob B. 构造</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>定义一个字符串 $s$ 的子串 $t$ 是好的，当且仅当这个子串仅仅在 $s$ 中出现了一次。</p><p>给定 $n,k$ ，要你构造出一个长度为 $n$ 的 01 串，使得好子串中长度最短的长度为 $k$。</p><p>数据范围：$n,k\leq 100000$，$n-k$ 是偶数。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>（目前还不清楚证明）令 $d=\frac {n-k}2$ ，当长度没达到 $n$ 的时候，不断尝试放入 $d$ 个 1，之后放入 1 个 0即可。具体实现参见下面代码。</p><p>证明留坑。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n , k;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; k;</span><br><span class="line">    <span class="keyword">int</span> dif = (n - k) / <span class="number">2</span>, t = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(t &lt; n) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; dif &amp;&amp; t &lt; n; ++i) &#123;</span><br><span class="line">            <span class="built_in">putchar</span>(<span class="string">'1'</span>), t++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(t &lt; n) <span class="built_in">putchar</span>(<span class="string">'0'</span>), t++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Prob-C-线段树优化建图-拓扑排序-或-思维-DFS"><a href="#Prob-C-线段树优化建图-拓扑排序-或-思维-DFS" class="headerlink" title="Prob C. 线段树优化建图+拓扑排序 或 思维+DFS"></a>Prob C. 线段树优化建图+拓扑排序 或 思维+DFS</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>对于一个 $n$ 个数的排列 $p$，我们定义它在 $i$ 位置的 $next$ 值为 $[i+1,n]$ 范围内第一个大于 $p_i$ 的数，如果不存在，则为 $n+1$ 。如 <code>{3,1,2,4}</code> 的 next 值为 <code>{4,2,4,5}</code> 。</p><p>现在给你了一个残缺的 next 值数组，即有些位置的 next 值是不确定的。你需要根据 next 数组构造出任何一个满足条件的排列，或者报告没有可能的 next 数组。</p><p>数据范围 $n\leq 5\cdot 10^5$</p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>考虑建出大小关系图，让小数向大数连边。首先，显然 $i\to nxt(i)$ 之间一定是有边的。然后，可以发现 $\forall x\in [i+1,nxt(i)-1]$ ，i 没有与 x 连边，必然说明 $x&lt;i$ 。事实上连完这些边也足够了，跑一下拓扑排序即可得到最后结果。上面连边的过程用线段树优化建图即可完成。我场上的解法稍微观察了一些其他性质，发现每个位置最多连两条边，然后是用了个支持区间覆盖的线段树实现的。这类解法时间复杂度 $O(n\log n)$ ，十分显然。</p><div><div class="fold_hider"><div class="close hider_title">线段树解法代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> gc() getchar()</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T &amp;x)</span></span>&#123;</span><br><span class="line">    x = <span class="number">0</span>; <span class="keyword">int</span> f = <span class="number">1</span>; <span class="keyword">char</span> ch = gc();</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch) ) &#123; <span class="keyword">if</span>(ch == <span class="string">'-'</span>) f = <span class="number">-1</span>; ch = gc();&#125;</span><br><span class="line">    <span class="keyword">while</span>( <span class="built_in">isdigit</span>(ch) ) &#123;x = x * <span class="number">10</span> + ch - <span class="number">48</span>; ch = gc();&#125;</span><br><span class="line">    x *= f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span>... Args&gt; <span class="function"><span class="keyword">void</span> <span class="title">read</span><span class="params">(T&amp; x, Args&amp;... args)</span></span></span><br><span class="line"><span class="function"></span>&#123; read(x), read(args...); &#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt; <span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(T x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="built_in">putchar</span>(<span class="string">'-'</span>), write(-x);</span><br><span class="line">    <span class="keyword">if</span>(x &gt; <span class="number">9</span>) write(x / <span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x % <span class="number">10</span> + <span class="string">'0'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">555555</span>;</span><br><span class="line"><span class="keyword">int</span> n, a[maxn], nxt[maxn], fa[maxn];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> lson (o &lt;&lt; 1)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rson (o &lt;&lt; 1 | 1)</span></span><br><span class="line"><span class="keyword">int</span> node[maxn * <span class="number">4</span>];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pushdown</span><span class="params">(<span class="keyword">int</span> o)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(node[o] != <span class="number">0</span>) &#123;</span><br><span class="line">        node[lson] = node[o];</span><br><span class="line">        node[rson] = node[o];</span><br><span class="line">        node[o] = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">modify</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> ql, <span class="keyword">int</span> qr, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(ql &gt; qr) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= l &amp;&amp; r &lt;= qr) &#123;</span><br><span class="line">        node[o] = v;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pushdown(o);</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(ql &lt;= mid) modify(lson, l, mid, ql, qr, v);</span><br><span class="line">    <span class="keyword">if</span>(qr &gt; mid) modify(rson, mid + <span class="number">1</span>, r, ql, qr, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">recover</span><span class="params">(<span class="keyword">int</span> o, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> *arr)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l == r) &#123;</span><br><span class="line">        arr[l] = node[o];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    pushdown(o);</span><br><span class="line">    recover(lson, l, mid, arr);</span><br><span class="line">    recover(rson, mid + <span class="number">1</span>, r, arr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    read(n);</span><br><span class="line">    rep(i, n) read(a[i]), G[i].clear();</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; indeg(n + <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    G[n + <span class="number">1</span>].clear();</span><br><span class="line">    <span class="built_in">memset</span>(nxt, <span class="number">-1</span>, <span class="keyword">sizeof</span> (<span class="keyword">int</span>) * (n + <span class="number">15</span>));</span><br><span class="line">    modify(<span class="number">1</span>, <span class="number">1</span>, n, <span class="number">1</span>, n, <span class="number">-1</span>);</span><br><span class="line">    <span class="built_in">set</span>&lt;<span class="keyword">int</span>&gt; bar;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) <span class="keyword">if</span>(a[i] != <span class="number">-1</span>) &#123;</span><br><span class="line">        nxt[i] = a[i];</span><br><span class="line">        <span class="keyword">while</span>(!bar.empty() &amp;&amp; i &gt;= *bar.begin()) bar.erase(bar.begin());</span><br><span class="line">        <span class="keyword">if</span>(!bar.empty() &amp;&amp; a[i] &gt; *bar.begin()) &#123; <span class="built_in">puts</span>(<span class="string">"-1"</span>); <span class="keyword">return</span>; &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            modify(<span class="number">1</span>, <span class="number">1</span>, n, i + <span class="number">1</span>, a[i] - <span class="number">1</span>, i);</span><br><span class="line">            bar.insert(a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    recover(<span class="number">1</span>, <span class="number">1</span>, n, fa);</span><br><span class="line">    rep(i, n) &#123;</span><br><span class="line">        <span class="keyword">if</span>(nxt[i] != <span class="number">-1</span> &amp;&amp; nxt[i] != n + <span class="number">1</span>) G[i].push_back(nxt[i]), indeg[nxt[i]]++;</span><br><span class="line">        <span class="keyword">if</span>(fa[i] != <span class="number">-1</span> &amp;&amp; fa[i] != n + <span class="number">1</span>) G[i].push_back(fa[i]), indeg[fa[i]]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; q;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans(n + <span class="number">10</span>, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    rep(i, n) <span class="keyword">if</span>(indeg[i] == <span class="number">0</span>) q.push(i);</span><br><span class="line">    <span class="keyword">while</span>(!q.empty()) &#123;</span><br><span class="line">        <span class="keyword">int</span> tp = q.front(); q.pop();</span><br><span class="line">        ans[tp] = ++cur;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> g : G[tp]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(--indeg[g] == <span class="number">0</span> &amp;&amp; g != n + <span class="number">1</span>) q.push(g);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    rep(i, n) <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, ans[i], <span class="string">" \n"</span>[i == n]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) solve();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>另一类做法留坑。</p><h2 id="Prob-D-优雅结论"><a href="#Prob-D-优雅结论" class="headerlink" title="Prob D. 优雅结论"></a>Prob D. 优雅结论</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给定 $n$ 个点的位置以及长度为 $n-2$ 的仅包含 <code>L</code> <code>R</code> 两种字母的字符串，要求构造一个 $[1,n]$ 的排列，使得将点按照 $p_1 \to p_2 \to p_3 \to \cdots \to p_n$ 的顺序连线时，满足：</p><ul><li>连的线互不相交</li><li>对于任意 $i\in \{2,3,\cdots,n-1\}$ ，如果 $s_{i-1}=L$ ，则 $p_{i-1} \to p_i \to p_{i+1}$ 这段折线是向左拐；否则是向右拐</li></ul><p>如果无法构造出来，就输出 <code>-1</code> 。</p><p>数据范围：$n\leq 2000$</p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>我们断言永远可以构造得出这样的排列，构造方法如下：</p><p>取 $n$ 个点形成的凸包上的任何一点为起点（这一步可以直接取 y 坐标最小的），然后将剩下的点按照极角排序，如果这一步要求的是 <code>L</code> ，则选极角最大的点；否则选极角最小的点。显然这样做满足了左拐右拐的条件，并且容易归纳地证明这样的构造是不会相交的。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Author       : YangDavid</span></span><br><span class="line"><span class="comment"> * Created Time : 2019年05月29日 星期三 18时12分50秒</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1; i &lt;= n; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2222</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Point</span> &#123;</span></span><br><span class="line">ll x, y;</span><br><span class="line">Point(ll xp=<span class="number">0</span>, ll yp=<span class="number">0</span>): x(xp), y(yp) &#123;&#125;</span><br><span class="line">Point <span class="keyword">operator</span> - (<span class="keyword">const</span> Point&amp; rhs) &#123; <span class="keyword">return</span> Point(x-rhs.x, y-rhs.y); &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">scan</span><span class="params">()</span> </span>&#123; <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;x, &amp;y); &#125;</span><br><span class="line">&#125; p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, vis[maxn], cur;</span><br><span class="line"><span class="keyword">char</span> s[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function">ll <span class="title">cross</span><span class="params">(Point A, Point B)</span> </span>&#123; <span class="keyword">return</span> A.x*B.y - A.y*B.x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Left</span><span class="params">(Point pt, Point O, Point A)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cross(A-O, pt-O) &gt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Right</span><span class="params">(Point pt, Point O, Point A)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> cross(A-O, pt-O) &lt; <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">rep(i, n) p[i].scan();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">cur = <span class="number">1</span>;</span><br><span class="line">rep(i, n) <span class="keyword">if</span>(p[i].y &lt; p[cur].y) cur = i;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; ans;</span><br><span class="line">ans.push_back(cur);</span><br><span class="line"></span><br><span class="line">rep(i, n - <span class="number">2</span>) &#123;</span><br><span class="line">vis[cur] = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">int</span> has = <span class="literal">false</span>, idx = <span class="number">-1</span>;</span><br><span class="line">rep(j, n) <span class="keyword">if</span>(!vis[j]) &#123;</span><br><span class="line"><span class="keyword">if</span>(!has) has = <span class="literal">true</span>, idx = j;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span>(s[i] == <span class="string">'L'</span> &amp;&amp; Right(p[j], p[cur], p[idx])) idx = j;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i] == <span class="string">'R'</span> &amp;&amp; Left(p[j], p[cur], p[idx])) idx = j;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">cur = idx;</span><br><span class="line">vis[cur] = <span class="literal">true</span>;</span><br><span class="line">ans.push_back(cur);</span><br><span class="line">&#125;</span><br><span class="line">rep(i, n) <span class="keyword">if</span>(!vis[i]) ans.push_back(i);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">auto</span> g : ans)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, g);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Codeforces-Round-559-Div-1&quot;&gt;&lt;a href=&quot;#Codeforces-Round-559-Div-1&quot; class=&quot;headerlink&quot; title=&quot;Codeforces Round 559 (Div. 1)&quot;&gt;&lt;/a&gt;Codeforces Round 559 (Div. 1)&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;00:21&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;(2)&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;01:38&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;AC&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;red&quot;&gt;&lt;b&gt;*&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;415&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;204&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;258&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;77&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;构造&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;拓扑排序&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;结论&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1577&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;489&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;2763&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;1307&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid-&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;Mid&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;又一次打 Div. 1，题目质量还不错。前期一直在写 C 题的线段树，结果 B 题构造题却没时间做了。猜了好几个结论，总算猜到正确的了，但是没来得及提交。还是有点遗憾的，微微掉了 5 分 rating ，不过也无妨，毕竟还是要在比赛中不断成长的。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest: &lt;code&gt;2/6&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Upsolved: &lt;code&gt;4/6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved: &lt;code&gt;4/6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;246/425&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rating: &lt;font color=&quot;purple&quot;&gt;&lt;b&gt;2052&lt;/b&gt;&lt;/font&gt; (-5)&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
      <category term="构造" scheme="http://yoursite.com/tags/%E6%9E%84%E9%80%A0/"/>
    
      <category term="拓扑排序" scheme="http://yoursite.com/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
      <category term="线段树" scheme="http://yoursite.com/tags/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>Comet OJ Contest #3 比赛报告</title>
    <link href="http://yoursite.com/2019/05/10/Comet-OJ-Contest-3-%E6%AF%94%E8%B5%9B%E6%8A%A5%E5%91%8A/"/>
    <id>http://yoursite.com/2019/05/10/Comet-OJ-Contest-3-比赛报告/</id>
    <published>2019-05-10T14:14:29.000Z</published>
    <updated>2019-05-13T11:32:56.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Comet-OJ-Contest-3"><a href="#Comet-OJ-Contest-3" class="headerlink" title="Comet OJ Contest #3"></a>Comet OJ Contest #3</h1><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><table><thead><tr><th style="text-align:left">Status</th><th style="text-align:center">A</th><th style="text-align:center">B</th><th style="text-align:center">C</th><th style="text-align:center">D</th><th style="text-align:center">E</th><th style="text-align:center">F</th></tr></thead><tbody><tr><td style="text-align:left">Contest</td><td style="text-align:center">0:07</td><td style="text-align:center">0:30</td><td style="text-align:center">1:39</td><td style="text-align:center">2:33</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Upsolve</td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"><font color="green"><strong>OK</strong></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Attempt</td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"><font color="green"><b>+1</b></font></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">AC count</td><td style="text-align:center">559</td><td style="text-align:center">272</td><td style="text-align:center">49</td><td style="text-align:center">14</td><td style="text-align:center">4</td><td style="text-align:center">1</td></tr><tr><td style="text-align:left">Tag</td><td style="text-align:center">暴力</td><td style="text-align:center">贪心</td><td style="text-align:center">dp</td><td style="text-align:center">线性基</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:left">Coding</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="blue">blue</font></td><td style="text-align:center"><font color="blue">blue</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Thinking</td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="green">Easy+</font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td><td style="text-align:center"><font color="grey"><b>?</b></font></td></tr><tr><td style="text-align:left">Stars</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">★</td><td style="text-align:center">★</td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table><p>注：$\mathcal O$ 表示口头通过。</p><ul><li>Solved during contest: <code>4/6</code> </li><li>Upsolved: <code>4/6</code></li><li>Orally upsolved: <code>4/6</code></li><li>Rank: <code>11/642</code></li></ul><p>差点进前 10 拿小裙子系列。。感觉这一场是后期疯狂卡常数的比赛。C 题我的 dp 是 $O(nm\log m)$ 的，卡了下常数才通过；D 题是带修改区间线性基模板题（ CF587E ），我直接魔改了一下 CF 跑得最快的 <code>whzzt</code> 的代码就通过了。</p><a id="more"></a><h2 id="Contest-Materials"><a href="#Contest-Materials" class="headerlink" title="Contest Materials"></a>Contest Materials</h2><p><a href="https://www.cometoj.com/contest/38/problems" target="_blank" rel="noopener">比赛链接</a></p><h2 id="Replay"><a href="#Replay" class="headerlink" title="Replay"></a>Replay</h2><h1 id="Tutorials"><a href="#Tutorials" class="headerlink" title="Tutorials"></a>Tutorials</h1><h2 id="Prob-A"><a href="#Prob-A" class="headerlink" title="Prob A."></a>Prob A.</h2><h2 id="Prob-B"><a href="#Prob-B" class="headerlink" title="Prob B."></a>Prob B.</h2><h2 id="Prob-C"><a href="#Prob-C" class="headerlink" title="Prob C."></a>Prob C.</h2><h2 id="Prob-D"><a href="#Prob-D" class="headerlink" title="Prob D."></a>Prob D.</h2><h2 id="Prob-E"><a href="#Prob-E" class="headerlink" title="Prob E."></a>Prob E.</h2><h2 id="Prob-F"><a href="#Prob-F" class="headerlink" title="Prob F."></a>Prob F.</h2>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Comet-OJ-Contest-3&quot;&gt;&lt;a href=&quot;#Comet-OJ-Contest-3&quot; class=&quot;headerlink&quot; title=&quot;Comet OJ Contest #3&quot;&gt;&lt;/a&gt;Comet OJ Contest #3&lt;/h1&gt;&lt;h2 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#Overview&quot; class=&quot;headerlink&quot; title=&quot;Overview&quot;&gt;&lt;/a&gt;Overview&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;Status&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;A&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;B&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;C&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;D&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;E&lt;/th&gt;
&lt;th style=&quot;text-align:center&quot;&gt;F&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Contest&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:07&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;0:30&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1:39&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;2:33&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Upsolve&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;strong&gt;OK&lt;/strong&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Attempt&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;&lt;b&gt;+1&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;AC count&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;559&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;272&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;49&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;14&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;4&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Tag&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;暴力&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;贪心&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;dp&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;线性基&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Coding&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;blue&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;blue&quot;&gt;blue&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Thinking&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;green&quot;&gt;Easy+&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;font color=&quot;grey&quot;&gt;&lt;b&gt;?&lt;/b&gt;&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Stars&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;★&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;td style=&quot;text-align:center&quot;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：$\mathcal O$ 表示口头通过。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Solved during contest: &lt;code&gt;4/6&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;Upsolved: &lt;code&gt;4/6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Orally upsolved: &lt;code&gt;4/6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Rank: &lt;code&gt;11/642&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;差点进前 10 拿小裙子系列。。感觉这一场是后期疯狂卡常数的比赛。C 题我的 dp 是 $O(nm\log m)$ 的，卡了下常数才通过；D 题是带修改区间线性基模板题（ CF587E ），我直接魔改了一下 CF 跑得最快的 &lt;code&gt;whzzt&lt;/code&gt; 的代码就通过了。&lt;/p&gt;
    
    </summary>
    
      <category term="比赛" scheme="http://yoursite.com/categories/%E6%AF%94%E8%B5%9B/"/>
    
    
  </entry>
  
  <entry>
    <title>集合幂级数、FMT、FWT学习笔记</title>
    <link href="http://yoursite.com/2019/04/27/%E9%9B%86%E5%90%88%E5%B9%82%E7%BA%A7%E6%95%B0-FMT-FWT%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/04/27/集合幂级数-FMT-FWT学习笔记/</id>
    <published>2019-04-27T06:37:00.000Z</published>
    <updated>2019-05-31T16:45:59.560Z</updated>
    
    <content type="html"><![CDATA[<p>受这几天看到的不少高维前缀和题目的影响，我决定系统地学习一下集合幂级数的一套理论了。内容主要来自2015年吕凯风（VFleaKing）国家集训队论文《集合幂级数的性质与应用及其快速算法》（pdf版本会放在附录里），包括<strong>集合并卷积、集合对称差卷积、子集卷积、快速莫比乌斯变换、快速莫比乌斯反演、快速沃尔什变换及逆变换</strong>等，以及附带进行的一些练习。</p><p>[TODO] 把练习第一题搞清楚<br>[TODO] 把第三道论文题学会</p><a id="more"></a><h1 id="引言及定义"><a href="#引言及定义" class="headerlink" title="引言及定义"></a>引言及定义</h1><p>类似数列的生成函数，对于集合，我们引入集合幂级数来解决一些有关集合的动态规划问题。</p><blockquote><p>定义：设  $F$ 是一个域，则称函数 $f:2^U\to F$ 是 F 上的一个形式幂级数，记 $f_S=f(S)$ 为集合幂级数第 $S$ 项的系数。</p></blockquote><p>我们记为：<br>$$<br>f=\sum_{S\subseteq 2^U} f_S x^S<br>$$<br>显然可以定义集合幂级数的加法：$(f+g)(S) = f(S)+g(S)$ ，减法也类似。这两种运算都是 $O(2^n)$ 的。</p><p>如何定义乘法？为了保证乘法对加法的分配律，若 $h=f\cdot g$ ，我们应该有：<br>$$<br>\sum_{S\in 2^U} h_S x^S = \big(\sum_{L\in2^U}f_Lx^L\big) \cdot (\sum_{R\in 2^U} g_R x^R) = \sum_{L\in 2^U} \sum_{R\in 2^U} (f_L x^L) \cdot (g_R x^R)<br>$$<br>因此我们只需要规定 $(f_L x^L) \cdot (g_R x^R)$ 的运算结果，我们希望它是以某种集合运算乘起来的。我们设一个 $2^U$ 中满足交换律、结合律、空集是单位元的二元运算 $\ast$ ，那么我们就可以定义 $(f_L x^L) \cdot (g_R x^R) = (f_L g_R) x^{L\ast R}$ 。至此集合幂级数形成了一个交换环，并且包含了整个 $F$ 作为子环。</p><p>常见定义 $\ast$ 为集合并运算、集合对称差运算以及子集卷积，我们一一解决。</p><h1 id="集合并卷积（FWT-or）"><a href="#集合并卷积（FWT-or）" class="headerlink" title="集合并卷积（FWT_or）"></a>集合并卷积（FWT_or）</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p>即给出两个集合幂级数 $f,g$ ，求 $h = f\ast g$  满足：<br>$$<br>h_S = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cup R = S] f_L g_R \tag{1}<br>$$<br>怎么做呢？暴力做是 $O(4^n)$ 的，一种做法是分治乘法，可是总感觉在理论价值上面会逊色一些。有没有类似 FFT 的一种变换，使得变换后将卷积直接变成点乘呢？莫比乌斯变换做到了这一点。</p><p>我们定义集合幂级数 $f$ 的莫比乌斯变换 $\hat{f} $为：<br>$$<br>\hat{f_S} = \sum_{T\subseteq S} f_T<br>$$<br>反过来，如何求莫比乌斯逆变换呢（常常称为莫比乌斯反演）？<a href="http://vfleaking.blog.uoj.ac/slide/87#/23" target="_blank" rel="noopener">有关反演看这里：《炫酷反演魔术》</a>。很容易由容斥原理，我们又有：（这一步建议在纸上推导一下，要不然可能会觉得不直观）<br>$$<br>f_S = \sum_{T\subseteq S} (-1)^{|S|-|T|} \hat{f_T}<br>$$<br>现在，我们可以解决 (1) 中的问题了。对 (1) 式的左右两边同时做莫比乌斯变换<br>$$<br>\begin{aligned}<br>\hat{h_S} &amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cup R \subseteq S] f_L g_R\\<br>&amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\subseteq S][ R \subseteq S] f_L g_R\\<br>&amp; = (\sum_{L\subseteq S}f_L) (\sum_{R\subseteq S}g_R)\\<br>&amp; = \hat{f_S}\hat{g_S}<br>\end{aligned}<br>$$<br>因此，我们想要的性质是成立的。只需要把 $f,g$ 做莫比乌斯变换，点乘起来，然后再做莫比乌斯反演即可得到集合并卷积。</p><p>如何进行莫比乌斯变换呢？可以使用递推，设 $\hat f^{(i)}_S$ 表示只考虑 $S\oplus T\subseteq \{1,\cdots,i\}$ 的子集 $T$ 时的莫比乌斯变换第 $S$ 项，令 $\hat f_S^{(0)} = f_S$ ，那么对于每个不包含 $i$ 的 $S$ 有：<br>$$<br>\hat{f_S^{(i)}} = \hat{f_S}^{(i-1)}\\<br>\hat{f}_{S\cup\{i\}} ^{(i)} = \hat f_{S\cup\{i\}}^{(i-1)} + \hat f _S ^{(i-1)}<br>$$<br>由此递推计算即可。复杂度 $O(n2^n)$</p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>代码非常简短，<code>dmt</code> 变量为 1 时表示正变换，为 -1 时表示逆变换。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_or(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(A[S|(<span class="number">1</span>&lt;&lt;i)] + dmt*A[S]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合交卷积（FWT-and）"><a href="#集合交卷积（FWT-and）" class="headerlink" title="集合交卷积（FWT_and）"></a>集合交卷积（FWT_and）</h1><p>由于 $S\cap T = C_U(\bar S \cup \bar T)$，因此将S、T翻转之后，可以直接用FWT_or导出。可是实际上还有更简洁的实现，如下面代码所示。</p><p>复杂度 $O(n2^n)$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_and(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S] = mo(A[S] + dmt*A[S|(<span class="number">1</span>&lt;&lt;i)]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="集合对称差卷积（FWT-xor）"><a href="#集合对称差卷积（FWT-xor）" class="headerlink" title="集合对称差卷积（FWT_xor）"></a>集合对称差卷积（FWT_xor）</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><p>这一回把 $\ast$ 定义为集合对称差。即给出两个集合幂级数 $f,g$ 求 $h = f\ast g$  ：<br>$$<br>h_S = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\oplus R=S] f_L g_R \tag 2<br>$$<br>分治乘法在这里也是可行的，但是对应的变换方法是什么呢？这次我们使用快速沃尔什变换及其逆变换（本质上是高维 FFT）。</p><p>快速沃尔什变换：<br>$$<br>\hat{f_S} = \sum_{T\subseteq 2^U} f_T (-1) ^{|S\cap T|}<br>$$<br>其逆变换为：（我没有找到靠谱证明）<br>$$<br>f_S = \frac {1}{2^n}\sum_{T\subseteq 2^U} \hat{f_T}(-1)^{|S\cap T|}<br>$$<br>沃尔什变换是具体如何解决（2）式的问题的呢？我们基于下面的事实：<br>$$<br>\frac {1}{2^n}\sum_{T\subseteq 2^U} (-1)^{|S\cap T|} = [S=\oslash]<br>$$<br>化简过程如下：<br>$$<br>\begin{aligned}<br>h_S &amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\oplus R\oplus S = \oslash] f_L g_R\\<br>&amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} \frac{1}{2^n} \sum_{T\subseteq 2^n} (-1)^{|S\cap (L\oplus R \oplus S)|} f_l g_R\\<br>&amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} \frac{1}{2^n} \sum_{T\subseteq 2^n} (-1)^{|T\cap L|} (-1)^{|T\cap R|}(-1)^{|T\cap S|} f_l g_R\\<br>&amp; = \frac{1}{2^n} \sum_{T\subseteq 2^n} (-1)^{|T\cap S|} \Big(\sum_{L\subseteq 2^U} (-1)^{|T\cap L|} f_L\Big)<br>\Big(\sum_{R\subseteq 2^U} (-1)^{|T\cap R|} g_R\Big)\\<br>&amp; = \frac{1}{2^n} \sum_{L\subseteq 2^U} (-1)^{|L\cap S|} \hat{f_S} \hat{g_S}<br>\end{aligned}<br>$$<br>即： $\hat{h_S} = \hat{f_S} \cdot \hat{g_S}$</p><p>注：在理论上，这种变换还有一个小问题，就是特征为2的 $F$ 上上述算法会失效，因为上述算法涉及乘以 $\frac {1}{2^n}$ 。不过一般情况下不会成问题。</p><p>接下来考虑如何计算快速沃尔什变换。依然可以使用递推，设 $\hat f^{(i)}_S$ 表示只考虑 $S\oplus T\subseteq \{1,\cdots,i\}$ 的子集 $T$ 时的沃尔什变换第 $S$ 项，令 $\hat f_S^{(0)} = f_S$ ，那么对于每个不包含 $i$ 的 $S$ 有：<br>$$<br>\hat{f_S^{(i)}} = \hat{f_S}^{(i-1)}+\hat{f}_{S\cup\{i\}}^{(i-1)}\\<br>\hat{f}_{S\cup\{i\}} ^{(i)} = \hat f _S ^{(i-1)} - \hat f_{S\cup\{i\}}^{(i-1)}<br>$$<br>由此递推计算即可。复杂度 $O(n2^n)$</p><h2 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fwt_xor(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = A[S], r = A[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            A[S] = mo(l + r);</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(dmt==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> inv2 = qpow(qpow(<span class="number">2</span>, MOD<span class="number">-2</span>), n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; m; ++S)</span><br><span class="line">            A[S] = muln(A[S], inv2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="子集卷积"><a href="#子集卷积" class="headerlink" title="子集卷积"></a>子集卷积</h1><p>这一部分感觉论文讲得有点自闭，推荐 <a href="https://www.cnblogs.com/Dance-Of-Faith/p/8818211.html" target="_blank" rel="noopener">Dance Of Faith 的这篇博客</a> 。</p><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><p>考虑这种形式的卷积如何处理：<br>$$<br>h_S = \sum_{T\subseteq S} f_T g_{S-T} \tag 3<br>$$<br>实际上，这种卷积等价于定义 $\ast$ 为不相交集合的并，即<br>$$<br>L \ast R =<br>\begin{cases}<br>  \varnothing, &amp; L \cap R \neq \varnothing \\<br>  L \cup R, &amp; \text{otherwise}<br>\end{cases}<br>$$<br>我们稍微改写一下 （3） 式：<br>$$<br>\begin{aligned}<br>h_S &amp; = \sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [L\cap R = \varnothing] [L\cup R = S] f_L g_R \\<br>&amp; =\sum_{L\subseteq 2^U} \sum_{R\subseteq 2^U} [|L| + |R| = |S|][L\cup R = S] f_L g_R<br>\end{aligned}<br>$$<br>我们只需要处理掉 $|L|+|R| = |S|$ 这一项。实际上我们直接加一维表示集合的大小，暴力处理即可。</p><p>具体来讲，初始时，我们先只把 $f_{pc(S),S}$ （<code>pc(S)</code> 表示 <code>popcount</code> ，即 S 二进制表示中有多少位是 1 ）的值赋成原来的 $f_{S}$（$g$ 也使用同样的操作），然后对每一个 $f_i$ 做一遍FMT，点值相乘时这么卷积：$h_{i, S} = \sum\limits_{j = 0}^{i} f_{j,S} * g_{i - j, S}$ 。代码很简洁，如下所示：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; subset_conv(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(Len);</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; siga(Base+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(Len,<span class="number">0</span>)), sigb = siga, sigh = siga;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        siga[pc[S]][S] = A[S], sigb[pc[S]][S] = B[S];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Base; ++i) &#123;</span><br><span class="line">        fmt_or(siga[i], <span class="number">1</span>);</span><br><span class="line">        fmt_or(sigb[i], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line">                sigh[i][S] = mo(sigh[i][S] + muln(siga[j][S], sigb[i-j][S]));</span><br><span class="line">        fmt_or(sigh[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        H[S] = sigh[pc[S]][S];</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>FWT_OR</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if FMT : f[S|(1&lt;&lt;i)] += f[S]</span><br><span class="line">if IFMT: f[S|(1&lt;&lt;i)] -= f[S]</span><br></pre></td></tr></table></figure><p>FWT_AND</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if FMT : f[S] += f[S|(1&lt;&lt;i)]</span><br><span class="line">if IFMT: f[S] -= f[S|(1&lt;&lt;i)]</span><br></pre></td></tr></table></figure><p>FWT_XOR：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">l = f[S], r = f[S|(1&lt;&lt;i)]</span><br><span class="line">f[S] = l + r</span><br><span class="line">f[S|(1&lt;&lt;i)] = l - r</span><br><span class="line">if IFMT: </span><br><span class="line">    f[S] /= qpow(2, n)</span><br></pre></td></tr></table></figure><p>子集卷积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>, n + <span class="number">1</span>):</span><br><span class="line">    F[i] = FWT_OR(f[i])</span><br><span class="line">    G[i] = FWT_OR(g[i])</span><br><span class="line">    <span class="keyword">for</span> S <span class="keyword">in</span> range(<span class="number">0</span>, Len):</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">0</span>, i + <span class="number">1</span>):</span><br><span class="line">            H[i][S] += F[j][S] * G[i-j][S]</span><br><span class="line">    H[i] = IFWT_OR(H[i])</span><br><span class="line"><span class="keyword">for</span> S <span class="keyword">in</span> range(<span class="number">0</span>, Len):</span><br><span class="line">    h[S] = H[bc[S]][S]</span><br></pre></td></tr></table></figure><p>完整板子代码如下，由于没有采用类似 FFT 蝴蝶操作的优化，效率不是很高，在LOJ的子集卷积模板题上跑了 <code>4500/5000 ms</code>。<a href="https://www.luogu.org/problemnew/solution/P4717" target="_blank" rel="noopener">Luogu 4717</a></p><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 0, i##_end_ = (n); i &lt; i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Template starts here</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MOD = <span class="number">1000000009</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line">    <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line">    <span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Len, Base; <span class="comment">// Ensure these values are calculated!!!!</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_or(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(A[S|(<span class="number">1</span>&lt;&lt;i)] + dmt*A[S]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fmt_and(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dmt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>)</span><br><span class="line">            A[S] = mo(A[S] + dmt*A[S|(<span class="number">1</span>&lt;&lt;i)]);</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; fwt_xor(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="keyword">int</span> dwt = <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = A[S], r = A[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            A[S] = mo(l + r);</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(dwt==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> inv2 = qpow(Len, MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            A[S] = muln(A[S], inv2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; conv(<span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; A, <span class="keyword">const</span> <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&amp; B, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(*fn)(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;,<span class="keyword">int</span>)) &#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; aa = fn(A, <span class="number">1</span>), bb = fn(B, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Len; ++i)</span><br><span class="line">        aa[i] = muln(aa[i], bb[i]);</span><br><span class="line">    aa = fn(aa, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">return</span> aa;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pc;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">get_popcount</span><span class="params">(<span class="keyword">int</span> sz)</span> </span>&#123;</span><br><span class="line">    pc.resize(sz, <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; sz; ++i)</span><br><span class="line">        pc[i] = pc[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; subset_conv(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; A, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; B) &#123;</span><br><span class="line">    get_popcount(Len);</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; H(Len);</span><br><span class="line">    <span class="built_in">vector</span>&lt; <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &gt; siga(Base+<span class="number">1</span>, <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;(Len,<span class="number">0</span>)), sigb = siga, sigh = siga;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        siga[pc[S]][S] = A[S], sigb[pc[S]][S] = B[S];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= Base; ++i) &#123;</span><br><span class="line">        siga[i] = fmt_or(siga[i], <span class="number">1</span>);</span><br><span class="line">        sigb[i] = fmt_or(sigb[i], <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= i; ++j)</span><br><span class="line">                sigh[i][S] = mo(sigh[i][S] + muln(siga[j][S], sigb[i-j][S]));</span><br><span class="line">        sigh[i] = fmt_or(sigh[i], <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">        H[S] = sigh[pc[S]][S];</span><br><span class="line">    <span class="keyword">return</span> H;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// Template ends here</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> first = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> g : v) &#123;</span><br><span class="line">        <span class="keyword">if</span>(first) first = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">putchar</span>(<span class="string">' '</span>);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d"</span>, g);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">putchar</span>(<span class="string">'\n'</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a, b;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    m = Len = <span class="number">1</span> &lt;&lt; n, Base = n;</span><br><span class="line">    a.resize(m), b.resize(m);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</span><br><span class="line">    rep(i, m) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;b[i]);</span><br><span class="line">    </span><br><span class="line">    show(conv(a, b, fmt_and));</span><br><span class="line">    show(conv(a, b, fmt_or));</span><br><span class="line">    show(conv(a, b, fwt_xor));</span><br><span class="line">    show(subset_conv(a, b));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h1 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h1><h2 id="HAOI2015-按位或"><a href="#HAOI2015-按位或" class="headerlink" title="[HAOI2015] 按位或"></a>[HAOI2015] 按位或</h2><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p>刚开始你有一个数字0，每一秒钟你会随机选择一个 $[0,2^n-1]$ 的数字，与你手上的数字进行按位或操作。选择数字 $i$ 的概率是 $p_i$。保证 $0\leq p_i \leq1$，$\sum p_i = 1$。问期望多少秒后，你手上的数字变成 $2^n-1$。无穷输出 <code>INF</code></p><p>数据范围：$n\leq 20$</p><p>Source: <a href="https://lydsy.com/JudgeOnline/problem.php?id=4036" target="_blank" rel="noopener">BZOJ4036</a> vfk论文第一道例题。</p><h3 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h3><p>留坑。</p><h2 id="Day8-I-岸边露伴的人生经验"><a href="#Day8-I-岸边露伴的人生经验" class="headerlink" title="Day8 I. 岸边露伴的人生经验"></a>Day8 I. 岸边露伴的人生经验</h2><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p>岸边露伴是一个天才漫画家，他经常用自己的替身天堂之门来查看别人的人生经历，为自己的漫画积累素材。最近他学会了将一个人的人生经历编码成一个 $10$ 维的向量，每一维取值为 $\{0,1,2\}$ 中的一个元素。定义向量$\overrightarrow{V}=(x_1,x_2,\cdots,x_{10})$ 的模长 $|\overrightarrow{V}|$ 为 $\sqrt{x_1^2+x_2^2+\cdots+x_{10}^2}$。令第 $i$ 个人的人生经历对应的向量为$\overrightarrow{V_i}$，则第i<em>i</em>个人和第 $j$ 个人的人生轨迹的差别可以用 $|\overrightarrow{V_i}-\overrightarrow{V_j}|$ 衡量。岸边露伴收集了 $n$ 个人的向量，他想要知道这些人里，人生轨迹差别相同的二元组有多少对，即有多少个四元组 $(i,j,k,l)(1 \le i,j,k,l \le n)$ 满足 $|\overrightarrow{V_i}-\overrightarrow{V_j}|=|\overrightarrow{V_k}-\overrightarrow{V_l}|$ </p><p>数据范围：$n\leq 10^5$</p><p>Source: <a href="https://www.cometoj.com/contest/28/problem/I?problem_id=412" target="_blank" rel="noopener">CCPC-Wannafly Winter Camp Day8 (Div1, onsite) Day 8 Problem I</a></p><h3 id="Solution-1"><a href="#Solution-1" class="headerlink" title="Solution"></a>Solution</h3><p>考虑每个向量取值只有 $\{0,1\}$ 的情况，每个人的向量为一个二进制数，装进桶里，直接进行自己卷积自己的异或 FWT ，这时集合幂级数的每一项都代表这个集合被异或出来的 可能方式。再扫一遍每一个状态，按照 <code>bitcount</code> 统计距离，加入另一个数组，平方一下即可。</p><p>考虑这道题，多了一个 $2$ ，我们只需要把每一个向量中一个数位拆成两个字符即可，将 <code>1</code> 变为 <code>01</code> ，2 变为 <code>10</code> ， <code>0</code> 变为 <code>00</code> ，然后把上一种做法求 <code>bitcount</code> 统计距离的方式稍微改一下就可以了。</p><h3 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Generated by powerful Codeforces Tool</span></span><br><span class="line"><span class="comment"> * Author: YangDavid</span></span><br><span class="line"><span class="comment"> * Time: 2019-04-28 19:15:38</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">202000</span>, maxs = <span class="number">1</span> &lt;&lt; <span class="number">20</span>, BB = <span class="number">20</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> n, dif[<span class="number">10200</span>];</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a(maxs, <span class="number">0</span>), val(maxs, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x &gt;= MOD) x -= MOD;</span><br><span class="line"><span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line"><span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span> dwt)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> l, r;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; BB; ++i) &#123;</span><br><span class="line"><span class="keyword">int</span> mask = (maxs<span class="number">-1</span>) ^ (<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> S = mask; S &gt;= <span class="number">0</span>; S = (S<span class="number">-1</span>)&amp;mask) &#123;</span><br><span class="line">l = a[S], r = a[S | (<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">a[S] = mo(l + r);</span><br><span class="line">a[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line"><span class="keyword">if</span>(S == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(dwt == <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> fac = qpow(qpow(<span class="number">2</span>, MOD - <span class="number">2</span>), BB);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxs; ++i)</span><br><span class="line">a[i] = muln(a[i], fac);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">    <span class="keyword">int</span> msk = <span class="number">0</span>, x;</span><br><span class="line">    rep(j, <span class="number">10</span>) &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;x);</span><br><span class="line">    msk &lt;&lt;= <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">if</span>(x == <span class="number">1</span>) msk += <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(x == <span class="number">2</span>) msk += <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">a[msk]++;</span><br><span class="line">    &#125;</span><br><span class="line">    fwt(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; maxs; ++i)</span><br><span class="line">    a[i] = muln(a[i], a[i]);</span><br><span class="line">    fwt(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    val[<span class="number">0</span>] = <span class="number">0</span>, val[<span class="number">1</span>] = <span class="number">1</span>, val[<span class="number">2</span>] = <span class="number">4</span>, val[<span class="number">3</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">4</span>; S &lt; maxs; S += <span class="number">4</span>) &#123;</span><br><span class="line">    <span class="keyword">int</span> t = val[S &gt;&gt; <span class="number">2</span>];</span><br><span class="line">    val[S] = t;</span><br><span class="line">    val[S+<span class="number">1</span>] = t + <span class="number">1</span>;</span><br><span class="line">    val[S+<span class="number">2</span>] = t + <span class="number">4</span>;</span><br><span class="line">    val[S+<span class="number">3</span>] = t + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; maxs; ++S) &#123;</span><br><span class="line">    dif[val[S]] += a[S];</span><br><span class="line">    &#125;</span><br><span class="line">    ll res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">100</span>; ++i) &#123;</span><br><span class="line">    res = mo(res + <span class="number">1L</span>L * dif[i] * dif[i] % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, res);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="CF1119-H-难题，精妙的-FWT"><a href="#CF1119-H-难题，精妙的-FWT" class="headerlink" title="CF1119 H. 难题，精妙的 FWT"></a>CF1119 H. 难题，精妙的 FWT</h2><h3 id="Description-2"><a href="#Description-2" class="headerlink" title="Description"></a>Description</h3><p>给定 $a,b,c$ ，以及 $n$ 个 $k$ 位 bitmask $A_i,B_i,C_i$ ，求下面 $n$ 个集合幂级数的异或 FWT，即：<br>$$<br>\prod_{1\leq i\leq n} (ax^{A_i}+bx^{B_i}+cx^{C_i})<br>$$<br>数据范围：$n\leq 10^5,k\leq 17,0\leq A_i,B_i,C_i &lt; 2^k,$</p><p>Source: <a href="https://codeforces.com/contest/1119/problem/H" target="_blank" rel="noopener">Codeforces Global Round 2 Problem H</a></p><h3 id="Solution-2"><a href="#Solution-2" class="headerlink" title="Solution"></a>Solution</h3><p>按照正常的 FWT 思路，就是把这 $n$ 个集合幂级数分别求出 FWT，然后再点乘起来，然后再做 IFWT。复杂度是 $O(nk2^k)$ 的，无法通过此题。</p><p>但是这道题需要注意的一点是每一个集合幂级数都只有三项，并且 $a,b,c$ 是固定的。回顾 FWT 的公式：<br>$$<br>\hat{f}(S) = \sum_{T\subseteq 2^U} f(T) (-1)^{|S\cap T|}<br>$$<br>因此每个集合幂级数 FWT 之后也仅仅会有 $\pm a \pm b \pm c$ 这么 8 种项。为了使问题更加简单，我们进行这样的变换： $B_i:=B_i \oplus A_i,C_i := C_i \oplus A_i, A_i := 0$ 。变换之后我们得出的结果的第 $S$ 项就等价于答案的第 $S\oplus xorsum$ 项，其中 $xorsum = \oplus_{i=1}^n A_i$。可以发现，这样做之后只剩下 $a\pm b \pm c$ 这四项了。</p><p>我们的一个重要观察是，将 FWT 之后的这 $n$ 个集合幂级数乘起来的结果中，对于一个固定的位置 $S$ ，这一项的系数一定是 $(a+b+c)^x (a+b-c)^y (a-b+c)^z (a-b-c)^w$ 的形式。如果我们能够把 $x,y,z,w$ 解出来，整个问题就解决了。首先，我们有一个最朴素的关系式：<br>$$<br>x+y+z+w = n<br>$$<br>之后有两种说法，一种是<a href="https://codeforces.com/blog/entry/66411" target="_blank" rel="noopener">官方题解</a>所说的考虑所有 $n$ 个 FWT 之后的幂级数的第 $S$ 项之和，然后再多考虑一个条件即可得到四个方程；另一种则非常简洁、对称、优美，可是我对这种方法还没有简洁优美的证明。这种方法是这样的：</p><ul><li>将 $A_i\oplus B_i$ 的值统计入一个数组 $f$，对 $f$ FWT之后，对于其第 $S$ 项有：$x+y-z-w=f[S]$。</li><li>将 $A_i\oplus C_i$ 的值统计入一个数组 $g$，对 $g$ FWT之后，对于其第 $S$ 项有：$x-y+z-w=g[S]$。</li><li>将 $B_i\oplus C_i$ 的值统计入一个数组 $h$，对 $h$ FWT之后，对于其第 $S$ 项有：$x-y-z+w=h[S]$。</li></ul><p>然后消元法即可。</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* Generated by powerful Codeforces Tool</span></span><br><span class="line"><span class="comment"> * Author: YangDavid</span></span><br><span class="line"><span class="comment"> * Time: 2019-05-02 16:57:53</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> rep(i, n) for(int i = 1, i##_end_ = (n); i &lt;= i##_end_; ++i)</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">102000</span>, MS = (<span class="number">1</span> &lt;&lt; <span class="number">17</span>) + <span class="number">2</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> A[maxn], B[maxn], C[maxn], n, k, full;</span><br><span class="line"><span class="keyword">int</span> AB[MS], AC[MS], BC[MS], ans[MS], out[MS];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span>(x &gt;= MOD) x -= MOD; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) x += MOD; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> <span class="number">1L</span>L * x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> inv2 = qpow(<span class="number">2</span>, MOD - <span class="number">2</span>), inv4 = qpow(<span class="number">4</span>, MOD - <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">fwt</span><span class="params">(<span class="keyword">int</span>* arr, <span class="keyword">int</span> dwt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; k; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; full; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = arr[S], r = arr[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            arr[S] = mo(l + r);</span><br><span class="line">            arr[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> iv = qpow(full, MOD - <span class="number">2</span>);</span><br><span class="line">    <span class="keyword">if</span>(dwt == <span class="number">-1</span>) <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; full; ++S)</span><br><span class="line">        arr[S] = muln(arr[S], iv);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> gg[<span class="number">4</span>], a, b, c, xorsum;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">gett</span><span class="params">(ll s, ll t, ll u, ll v)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x = muln(mo(mo(s+t)+mo(u+v)), inv4);</span><br><span class="line">    <span class="keyword">int</span> y = mo(muln(mo(s+t), inv2) - x);</span><br><span class="line">    <span class="keyword">int</span> z = mo(muln(mo(s+u), inv2) - x);</span><br><span class="line">    <span class="keyword">int</span> w = mo(muln(mo(s+v), inv2) - x);</span><br><span class="line">    <span class="keyword">return</span> muln( muln(qpow(gg[<span class="number">0</span>],x),qpow(gg[<span class="number">1</span>],y)) , muln(qpow(gg[<span class="number">2</span>],z),qpow(gg[<span class="number">3</span>],w)) );</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%d%d"</span>, &amp;n, &amp;k, &amp;a, &amp;b, &amp;c); full = (<span class="number">1</span> &lt;&lt; k);</span><br><span class="line">    gg[<span class="number">0</span>] = mo(mo(a+b)+c), gg[<span class="number">1</span>] = mo(mo(a+b)-c), gg[<span class="number">2</span>] = mo(mo(a-b)+c), gg[<span class="number">3</span>] = mo(mo(a-b)-c);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>, &amp;A[i], &amp;B[i], &amp;C[i]);</span><br><span class="line">        AB[A[i]^B[i]]++, AC[A[i]^C[i]]++, BC[B[i]^C[i]]++;</span><br><span class="line">        xorsum ^= A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    fwt(AB), fwt(AC), fwt(BC);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; full; ++S) &#123;</span><br><span class="line">        ans[S] = gett(n, AB[S], AC[S], BC[S]);</span><br><span class="line">    &#125;</span><br><span class="line">    fwt(ans, <span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; full; ++S)</span><br><span class="line">        out[S] = ans[S ^ xorsum];</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; full; ++S)</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d%c"</span>, out[S], <span class="string">" \n"</span>[S==full<span class="number">-1</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><h2 id="CF662C-超级好题"><a href="#CF662C-超级好题" class="headerlink" title="CF662C 超级好题"></a>CF662C 超级好题</h2><h3 id="Description-3"><a href="#Description-3" class="headerlink" title="Description"></a>Description</h3><p>你有一个 $n$ 行 $m$ 列的 01 矩阵，你可以进行翻转行与翻转列两种操作（翻转即 0 变 1，1 变 0）任意多次，问最后得到的矩阵的 1 的个数最少是多少。</p><p>数据范围：$n\leq 20,m\leq 100000$</p><p>Source: CROC 2016 - Final Round <a href="https://codeforces.com/contest/662/C" target="_blank" rel="noopener">Problem C. Binary Table</a></p><h3 id="Solution-3"><a href="#Solution-3" class="headerlink" title="Solution"></a>Solution</h3><p>注意 $n\leq 20$ 的条件。先考虑 $O(m2^n )$ 暴力怎么做。记第 $j$ 列的数的 bitmask 为 $A_j$ ，我们枚举行的翻转状态的 bitmask为 $S$ ，然后对于每一种状态 $S$，我们查看每一列，第 $j$ 列被变为了 $A_j \oplus S$。考虑这一列是否翻转，显见答案增加了 $\min\{pop(A_j \oplus S), n-pos(A_J\oplus S)\}$，其中 $pop(S)$ 是指 $S$ 二进制表示中 1 的个数。我们记$f(S) = \min\{pop(S),n-pop(S)\}$ ，那么对于行的枚举状态 $S$ 我们得到的答案就是这个：<br>$$<br>\sum_{i=1}^m f(S\oplus A_i)<br>$$<br>由于 $A_j$ 的值域也是 $2^n$，我们记 $A$ 中 $x$ 这个值出现的次数为 $c(x)$，那么上式可以改写为：<br>$$<br>\sum_{T \subseteq 2^n} f(T \oplus S) \cdot c(T)<br>$$<br>是不是有点 FWT 的形式了？进一步地：<br>$$<br>\begin{aligned}<br>ans(S) &amp;= \sum_{T \oplus U = S} f(T) c(U)<br>\end{aligned}<br>$$<br>这不正是 FWT 吗？于是我们求出 $f$ 与 $c$ 的异或 FWT，然后扫一边 ans 数组找最小值即可。</p><h3 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h3><div><div class="fold_hider"><div class="close hider_title">点击显示/隐藏代码</div></div><div class="fold"><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="keyword">int</span>, <span class="keyword">int</span>&gt; pii;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxs = (<span class="number">1</span> &lt;&lt; <span class="number">20</span>) + <span class="number">2333</span>, MOD = <span class="number">998244353</span>;</span><br><span class="line"><span class="keyword">int</span> c[maxs], g[maxs], n, m, full , pop[maxs];</span><br><span class="line"><span class="keyword">char</span> s[<span class="number">22</span>][<span class="number">101010</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">mo</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123; <span class="keyword">if</span>(x &gt;= MOD) <span class="keyword">return</span> x-MOD; <span class="keyword">if</span>(x &lt; <span class="number">0</span>) <span class="keyword">return</span> x+MOD; <span class="keyword">return</span> x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">muln</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (ll)x * y % MOD; &#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">qpow</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(; y; y &gt;&gt;= <span class="number">1</span>, x = muln(x, x))</span><br><span class="line">        <span class="keyword">if</span>(y &amp; <span class="number">1</span>) ret = muln(ret, x);</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> Base, Len;</span><br><span class="line"><span class="function"><span class="keyword">int</span>* <span class="title">fwt</span><span class="params">(<span class="keyword">int</span>* A, <span class="keyword">int</span> dwt = <span class="number">1</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> l, r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; Base; ++i)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S) <span class="keyword">if</span>(~S&gt;&gt;i&amp;<span class="number">1</span>) &#123;</span><br><span class="line">            l = A[S], r = A[S|(<span class="number">1</span>&lt;&lt;i)];</span><br><span class="line">            A[S] = mo(l + r);</span><br><span class="line">            A[S|(<span class="number">1</span>&lt;&lt;i)] = mo(l - r);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">if</span>(dwt==<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">int</span> inv2 = qpow(Len, MOD<span class="number">-2</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt; Len; ++S)</span><br><span class="line">            A[S] = muln(A[S], inv2);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> A;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line">    full = (<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; ++i)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%s"</span>, s[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; m; ++i) &#123;</span><br><span class="line">        <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; ++j)</span><br><span class="line">            res = <span class="number">2</span> * res + s[j][i] - <span class="string">'0'</span>;</span><br><span class="line">        c[res]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">1</span>; S &lt;= full; ++S) &#123;</span><br><span class="line">        pop[S] = pop[S&gt;&gt;<span class="number">1</span>] + (S&amp;<span class="number">1</span>);</span><br><span class="line">        g[S] = min(pop[S], n - pop[S]);</span><br><span class="line">    &#125;</span><br><span class="line">    Len = <span class="number">1</span>&lt;&lt;n, Base = n;</span><br><span class="line">    fwt(c, <span class="number">1</span>);</span><br><span class="line">    fwt(g, <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt;= full; ++S)</span><br><span class="line">        c[S] = muln(c[S], g[S]);</span><br><span class="line">    fwt(c, <span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0x3f3f3f3f</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> S = <span class="number">0</span>; S &lt;= full; ++S)</span><br><span class="line">        ans = min(ans, c[S]);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, ans);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div></div><p>[HDU5909]</p><p>[WC2018]州区划分</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;受这几天看到的不少高维前缀和题目的影响，我决定系统地学习一下集合幂级数的一套理论了。内容主要来自2015年吕凯风（VFleaKing）国家集训队论文《集合幂级数的性质与应用及其快速算法》（pdf版本会放在附录里），包括&lt;strong&gt;集合并卷积、集合对称差卷积、子集卷积、快速莫比乌斯变换、快速莫比乌斯反演、快速沃尔什变换及逆变换&lt;/strong&gt;等，以及附带进行的一些练习。&lt;/p&gt;
&lt;p&gt;[TODO] 把练习第一题搞清楚&lt;br&gt;[TODO] 把第三道论文题学会&lt;/p&gt;
    
    </summary>
    
      <category term="算法" scheme="http://yoursite.com/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="高维前缀和（FMT）" scheme="http://yoursite.com/tags/%E9%AB%98%E7%BB%B4%E5%89%8D%E7%BC%80%E5%92%8C%EF%BC%88FMT%EF%BC%89/"/>
    
      <category term="快速沃尔什变换系列（FMT，FWT等）" scheme="http://yoursite.com/tags/%E5%BF%AB%E9%80%9F%E6%B2%83%E5%B0%94%E4%BB%80%E5%8F%98%E6%8D%A2%E7%B3%BB%E5%88%97%EF%BC%88FMT%EF%BC%8CFWT%E7%AD%89%EF%BC%89/"/>
    
      <category term="集合幂级数" scheme="http://yoursite.com/tags/%E9%9B%86%E5%90%88%E5%B9%82%E7%BA%A7%E6%95%B0/"/>
    
      <category term="子集卷积" scheme="http://yoursite.com/tags/%E5%AD%90%E9%9B%86%E5%8D%B7%E7%A7%AF/"/>
    
  </entry>
  
</feed>
